#include <math.h>
#include <iostream>
#include <vector>

/* @pre: ((cos_qpos_0 > -1.0) && (cos_qpos_0 < 1.0) && (cos_qpos_1 > -1.0) && (cos_qpos_1 < 1.0) && (cos_qpos_2 > -1.0) && (cos_qpos_2 < 1.0) && (cos_qpos_3 > -1.0) && (cos_qpos_3 < 1.0) && (cos_qpos_4 > -1.0) && (cos_qpos_4 < 1.0) && (cos_qpos_5 > -1.0) && (cos_qpos_5 < 1.0) && (sin_qpos_0 > -1.0) && (sin_qpos_0 < 1.0) && (sin_qpos_1 > -1.0) && (sin_qpos_1 < 1.0) && (sin_qpos_2 > -1.0) && (sin_qpos_2 < 1.0) && (sin_qpos_3 > -1.0) && (sin_qpos_3 < 1.0) && (sin_qpos_4 > -1.0) && (sin_qpos_4 < 1.0) && (sin_qpos_5 > -1.0) && (sin_qpos_5 < 1.0)) */
/* @post: (res) => (res +/- 1.0e-05) */
double rnea(
    double qcos_0, double qcos_1, double qcos_2, double qcos_3, double qcos_4, double qcos_5, 
    double qsin_0, double qsin_1, double qsin_2, double qsin_3, double qsin_4, double qsin_5,
    double v_0, double v_1, double v_2, double v_3, double v_4, double v_5,
    double a_0, double a_1, double a_2, double a_3, double a_4, double a_5
    ) {

  double limi_translation_0_2 = 0.333f;
  double limi_translation_0_1 = 0.0f;
  double limi_translation_0_0 = 0.0f;
  double limi_translation_1_2 = 0.0f;
  double limi_translation_1_1 = 0.0f;
  double limi_translation_1_0 = 0.0f;
  double limi_translation_2_2 = 0.0f;
  double limi_translation_2_1 = -0.316f;
  double limi_translation_2_0 = 0.0f;
  double limi_translation_3_2 = 0.0f;
  double limi_translation_3_1 = 0.0f;
  double limi_translation_3_0 = 0.0825f;
  double limi_translation_4_2 = 0.0f;
  double limi_translation_4_1 = 0.384f;
  double limi_translation_4_0 = -0.0825f;
  double limi_translation_5_2 = 0.0f;
  double limi_translation_5_1 = 0.0f;
  double limi_translation_5_0 = 0.0f;
  double a_gf_0_5 = 0.0f;
  double a_gf_0_4 = 0.0f;
  double a_gf_0_3 = 0.0f;
  double a_gf_0_2 = 9.81f;
  double a_gf_0_1 = 0.0f;
  double a_gf_0_0 = 0.0f;
  double a_gf_1_5 = 0.0f;
  double a_gf_1_4 = 0.0f;
  double a_gf_1_3 = 0.0f;
  double a_gf_1_2 = 9.81f;
  double a_gf_1_1 = 0.0f;
  double a_gf_1_0 = 0.0f;
  double a_gf_2_5 = 0.0f;
  double a_gf_2_4 = 0.0f;
  double a_gf_2_3 = 0.0f;
  double a_gf_2_2 = 9.81f;
  double a_gf_2_1 = 0.0f;
  double a_gf_2_0 = 0.0f;
  double a_gf_3_5 = 0.0f;
  double a_gf_3_4 = 0.0f;
  double a_gf_3_3 = 0.0f;
  double a_gf_3_2 = 9.81f;
  double a_gf_3_1 = 0.0f;
  double a_gf_3_0 = 0.0f;
  double a_gf_4_5 = 0.0f;
  double a_gf_4_4 = 0.0f;
  double a_gf_4_3 = 0.0f;
  double a_gf_4_2 = 9.81f;
  double a_gf_4_1 = 0.0f;
  double a_gf_4_0 = 0.0f;
  double a_gf_5_5 = 0.0f;
  double a_gf_5_4 = 0.0f;
  double a_gf_5_3 = 0.0f;
  double a_gf_5_2 = 9.81f;
  double a_gf_5_1 = 0.0f;
  double a_gf_5_0 = 0.0f;
  double data_v_0_5 = 0.0f;
  double data_v_0_4 = 0.0f;
  double data_v_0_3 = 0.0f;
  double data_v_0_2 = 0.0f;
  double data_v_0_1 = 0.0f;
  double data_v_0_0 = 0.0f;
  double data_v_1_5 = 0.0f;
  double data_v_1_4 = 0.0f;
  double data_v_1_3 = 0.0f;
  double data_v_1_2 = 0.0f;
  double data_v_1_1 = 0.0f;
  double data_v_1_0 = 0.0f;
  double data_v_2_5 = 0.0f;
  double data_v_2_4 = 0.0f;
  double data_v_2_3 = 0.0f;
  double data_v_2_2 = 0.0f;
  double data_v_2_1 = 0.0f;
  double data_v_2_0 = 0.0f;
  double data_v_3_5 = 0.0f;
  double data_v_3_4 = 0.0f;
  double data_v_3_3 = 0.0f;
  double data_v_3_2 = 0.0f;
  double data_v_3_1 = 0.0f;
  double data_v_3_0 = 0.0f;
  double data_v_4_5 = 0.0f;
  double data_v_4_4 = 0.0f;
  double data_v_4_3 = 0.0f;
  double data_v_4_2 = 0.0f;
  double data_v_4_1 = 0.0f;
  double data_v_4_0 = 0.0f;
  double data_v_5_5 = 0.0f;
  double data_v_5_4 = 0.0f;
  double data_v_5_3 = 0.0f;
  double data_v_5_2 = 0.0f;
  double data_v_5_1 = 0.0f;
  double data_v_5_0 = 0.0f;
  double lever_0_2 = -0.04762f;
  double lever_0_1 = 0.002081f;
  double lever_0_0 = 0.003875f;
  double lever_1_2 = 0.003495f;
  double lever_1_1 = -0.02872f;
  double lever_1_0 = -0.003141f;
  double lever_2_2 = -0.066502f;
  double lever_2_1 = 0.039252f;
  double lever_2_0 = 0.027518f;
  double lever_3_2 = 0.027454f;
  double lever_3_1 = 0.104419f;
  double lever_3_0 = -0.05317f;
  double lever_4_2 = -0.038437f;
  double lever_4_1 = 0.041065f;
  double lever_4_0 = -0.011953f;
  double lever_5_2 = -0.010517f;
  double lever_5_1 = -0.014117f;
  double lever_5_0 = 0.060149f;
  double masses_5 = 1.66656f;
  double masses_4 = 1.225946f;
  double masses_3 = 3.587895f;
  double masses_2 = 3.228604f;
  double masses_1 = 0.646926f;
  double masses_0 = 4.970684f;
  double inertia_0_2_2 = 0.009117f;
  double inertia_0_2_1 = 0.019169f;
  double inertia_0_2_0 = 0.006772f;
  double inertia_0_1_2 = 0.019169f;
  double inertia_0_1_1 = 0.70661f;
  double inertia_0_1_0 = -0.000139f;
  double inertia_0_0_2 = 0.006772f;
  double inertia_0_0_1 = -0.000139f;
  double inertia_0_0_0 = 0.70337f;
  double inertia_1_2_2 = 0.025995f;
  double inertia_1_2_1 = 0.000704f;
  double inertia_1_2_0 = 0.010254f;
  double inertia_1_1_2 = 0.000704f;
  double inertia_1_1_1 = 0.02811f;
  double inertia_1_1_0 = -0.003925f;
  double inertia_1_0_2 = 0.010254f;
  double inertia_1_0_1 = -0.003925f;
  double inertia_1_0_0 = 0.007962f;
  double inertia_2_2_2 = 0.01083f;
  double inertia_2_2_1 = -0.012805f;
  double inertia_2_2_0 = -0.011396f;
  double inertia_2_1_2 = -0.012805f;
  double inertia_2_1_1 = 0.036155f;
  double inertia_2_1_0 = -0.004761f;
  double inertia_2_0_2 = -0.011396f;
  double inertia_2_0_1 = -0.004761f;
  double inertia_2_0_0 = 0.037242f;
  double inertia_3_2_2 = 0.028323f;
  double inertia_3_2_1 = 0.008641f;
  double inertia_3_2_0 = -0.001332f;
  double inertia_3_1_2 = 0.008641f;
  double inertia_3_1_1 = 0.019552f;
  double inertia_3_1_0 = 0.007796f;
  double inertia_3_0_2 = -0.001332f;
  double inertia_3_0_1 = 0.007796f;
  double inertia_3_0_0 = 0.025853f;
  double inertia_4_2_2 = 0.008627f;
  double inertia_4_2_1 = 0.000229f;
  double inertia_4_2_0 = -0.004037f;
  double inertia_4_1_2 = 0.000229f;
  double inertia_4_1_1 = 0.029474f;
  double inertia_4_1_0 = -0.002117f;
  double inertia_4_0_2 = -0.004037f;
  double inertia_4_0_1 = -0.002117f;
  double inertia_4_0_0 = 0.035549f;
  double inertia_5_2_2 = 0.005433f;
  double inertia_5_2_1 = 0.000341f;
  double inertia_5_2_0 = -0.001158f;
  double inertia_5_1_2 = 0.000341f;
  double inertia_5_1_1 = 0.004354f;
  double inertia_5_1_0 = 0.000109f;
  double inertia_5_0_2 = -0.001158f;
  double inertia_5_0_1 = 0.000109f;
  double inertia_5_0_0 = 0.001964f;
  double parent_v_5 = 0.0f;
  double parent_v_4 = 0.0f;
  double parent_v_3 = 0.0f;
  double parent_v_2 = 0.0f;
  double parent_v_1 = 0.0f;
  double parent_v_0 = 0.0f;
  double parent_a_gf_5 = 0.0f;
  double parent_a_gf_4 = 0.0f;
  double parent_a_gf_3 = 0.0f;
  double parent_a_gf_2 = 9.81f;
  double parent_a_gf_1 = 0.0f;
  double parent_a_gf_0 = 0.0f;
  double new_v_5 = 0.0f;
  double new_v_4 = 0.0f;
  double new_v_3 = 0.0f;
  double new_v_2 = 0.0f;
  double new_v_1 = 0.0f;
  double new_v_0 = 0.0f;
  double new_a_gf_5 = 0.0f;
  double new_a_gf_4 = 0.0f;
  double new_a_gf_3 = 0.0f;
  double new_a_gf_2 = 0.0f;
  double new_a_gf_1 = 0.0f;
  double new_a_gf_0 = 0.0f;
  double new_h_5 = 0.0f;
  double new_h_4 = 0.0f;
  double new_h_3 = 0.0f;
  double new_h_2 = 0.0f;
  double new_h_1 = 0.0f;
  double new_h_0 = 0.0f;
  double new_f_5 = 0.0f;
  double new_f_4 = 0.0f;
  double new_f_3 = 0.0f;
  double new_f_2 = 0.0f;
  double new_f_1 = 0.0f;
  double new_f_0 = 0.0f;
  double rotation_matrix_0_2_2 = 1.0f;
  double rotation_matrix_0_2_1 = 0.0f;
  double rotation_matrix_0_2_0 = 0.0f;
  double rotation_matrix_0_1_2 = 0.0f;
  double rotation_matrix_0_1_1 = qcos_0;
  double rotation_matrix_0_1_0 = qsin_0;
  double rotation_matrix_0_0_2 = 0.0f;
  double rotation_matrix_0_0_1 = -(qsin_0);
  double rotation_matrix_0_0_0 = qcos_0;
  double limi_rotation_0_2_2 = 1.0f;
  double limi_rotation_0_2_1 = 0.0f;
  double limi_rotation_0_2_0 = 0.0f;
  double limi_rotation_0_1_2 = 0.0f;
  double limi_rotation_0_1_1 = rotation_matrix_0_1_1;
  double limi_rotation_0_1_0 = rotation_matrix_0_1_0;
  double limi_rotation_0_0_2 = 0.0f;
  double limi_rotation_0_0_1 = rotation_matrix_0_0_1;
  double limi_rotation_0_0_0 = rotation_matrix_0_0_0;
  double v_linear_0_2 = data_v_0_2;
  double v_linear_0_1 = data_v_0_1;
  double v_linear_0_0 = data_v_0_0;
  double v_angular_0_2 = v_0;
  double v_angular_0_1 = data_v_0_4;
  double v_angular_0_0 = data_v_0_3;
  double parent_v_linear_0_2 = parent_v_2;
  double parent_v_linear_0_1 = parent_v_1;
  double parent_v_linear_0_0 = parent_v_0;
  double parent_v_angular_0_2 = parent_v_5;
  double parent_v_angular_0_1 = parent_v_4;
  double parent_v_angular_0_0 = parent_v_3;
  double parent_a_gf_linear_0_2 = parent_a_gf_2;
  double parent_a_gf_linear_0_1 = parent_a_gf_1;
  double parent_a_gf_linear_0_0 = parent_a_gf_0;
  double parent_a_gf_angular_0_2 = parent_a_gf_5;
  double parent_a_gf_angular_0_1 = parent_a_gf_4;
  double parent_a_gf_angular_0_0 = parent_a_gf_3;
  double minus_m_w_0 = v_0;
  double temp2 = -(minus_m_w_0);
  double temp1 = -(temp2);
  double alpha_cross1_linear_0 = (temp1 * v_linear_0_1);
  double temp3 = -(minus_m_w_0);
  double alpha_cross2_linear_0 = (temp3 * v_linear_0_0);
  double alpha_cross_linear_0_2 = 0.0f;
  double alpha_cross_linear_0_1 = alpha_cross2_linear_0;
  double alpha_cross_linear_0_0 = alpha_cross1_linear_0;
  double temp5 = -(minus_m_w_0);
  double temp4 = -(temp5);
  double alpha_cross1_angular_0 = (temp4 * v_angular_0_1);
  double temp6 = -(minus_m_w_0);
  double alpha_cross2_angular_0 = (temp6 * v_angular_0_0);
  double alpha_cross_angular_0_2 = 0.0f;
  double alpha_cross_angular_0_1 = alpha_cross2_angular_0;
  double alpha_cross_angular_0_0 = alpha_cross1_angular_0;
  double new_a_gf_0_5 = alpha_cross_angular_0_2;
  double new_a_gf_0_4 = alpha_cross_angular_0_1;
  double new_a_gf_0_3 = alpha_cross_angular_0_0;
  double new_a_gf_0_2 = alpha_cross_linear_0_2;
  double new_a_gf_0_1 = alpha_cross_linear_0_1;
  double new_a_gf_0_0 = alpha_cross_linear_0_0;
  double new_a_gf_up1_0 = (a_0 + new_a_gf_0_5);
  double new_a_gf2_linear_0_2 = new_a_gf_0_2;
  double new_a_gf2_linear_0_1 = new_a_gf_0_1;
  double new_a_gf2_linear_0_0 = new_a_gf_0_0;
  double new_a_gf2_angular_0_2 = new_a_gf_up1_0;
  double new_a_gf2_angular_0_1 = new_a_gf_0_4;
  double new_a_gf2_angular_0_0 = new_a_gf_0_3;
  double actInv1_2_0_0 = ((limi_translation_0_1 * parent_a_gf_angular_0_2) - (limi_translation_0_2 * parent_a_gf_angular_0_1));
  double actInv1_2_0_1 = ((limi_translation_0_2 * parent_a_gf_angular_0_0) - (limi_translation_0_0 * parent_a_gf_angular_0_2));
  double actInv1_2_0_2 = ((limi_translation_0_0 * parent_a_gf_angular_0_1) - (limi_translation_0_1 * parent_a_gf_angular_0_0));
  double actInv2_2_0_2 = (parent_a_gf_linear_0_2 - actInv1_2_0_2);
  double actInv2_2_0_1 = (parent_a_gf_linear_0_1 - actInv1_2_0_1);
  double actInv2_2_0_0 = (parent_a_gf_linear_0_0 - actInv1_2_0_0);
  double actInv3_2_0_2_2 = limi_rotation_0_2_2;
  double actInv3_2_0_1_2 = limi_rotation_0_2_1;
  double actInv3_2_0_0_2 = limi_rotation_0_2_0;
  double actInv3_2_0_2_1 = limi_rotation_0_1_2;
  double actInv3_2_0_1_1 = limi_rotation_0_1_1;
  double actInv3_2_0_0_1 = limi_rotation_0_1_0;
  double actInv3_2_0_2_0 = limi_rotation_0_0_2;
  double actInv3_2_0_1_0 = limi_rotation_0_0_1;
  double actInv3_2_0_0_0 = limi_rotation_0_0_0;
  double actInv4_2_0_2 = ((actInv3_2_0_2_0 * actInv2_2_0_0) + ((actInv3_2_0_2_1 * actInv2_2_0_1) + (actInv3_2_0_2_2 * actInv2_2_0_2)));
  double actInv4_2_0_1 = ((actInv3_2_0_1_0 * actInv2_2_0_0) + ((actInv3_2_0_1_1 * actInv2_2_0_1) + (actInv3_2_0_1_2 * actInv2_2_0_2)));
  double actInv4_2_0_0 = ((actInv3_2_0_0_0 * actInv2_2_0_0) + ((actInv3_2_0_0_1 * actInv2_2_0_1) + (actInv3_2_0_0_2 * actInv2_2_0_2)));
  double new_linear_up2_2_0_2 = (new_a_gf2_linear_0_2 + actInv4_2_0_2);
  double new_linear_up2_2_0_1 = (new_a_gf2_linear_0_1 + actInv4_2_0_1);
  double new_linear_up2_2_0_0 = (new_a_gf2_linear_0_0 + actInv4_2_0_0);
  double actInv5_2_0_2 = ((actInv3_2_0_2_0 * parent_a_gf_angular_0_0) + ((actInv3_2_0_2_1 * parent_a_gf_angular_0_1) + (actInv3_2_0_2_2 * parent_a_gf_angular_0_2)));
  double actInv5_2_0_1 = ((actInv3_2_0_1_0 * parent_a_gf_angular_0_0) + ((actInv3_2_0_1_1 * parent_a_gf_angular_0_1) + (actInv3_2_0_1_2 * parent_a_gf_angular_0_2)));
  double actInv5_2_0_0 = ((actInv3_2_0_0_0 * parent_a_gf_angular_0_0) + ((actInv3_2_0_0_1 * parent_a_gf_angular_0_1) + (actInv3_2_0_0_2 * parent_a_gf_angular_0_2)));
  double new_angular_up2_2_0_2 = (new_a_gf2_angular_0_2 + actInv5_2_0_2);
  double new_angular_up2_2_0_1 = (new_a_gf2_angular_0_1 + actInv5_2_0_1);
  double new_angular_up2_2_0_0 = (new_a_gf2_angular_0_0 + actInv5_2_0_0);
  double new_a_gf_up3_0_5 = new_angular_up2_2_0_2;
  double new_a_gf_up3_0_4 = new_angular_up2_2_0_1;
  double new_a_gf_up3_0_3 = new_angular_up2_2_0_0;
  double new_a_gf_up3_0_2 = new_linear_up2_2_0_2;
  double new_a_gf_up3_0_1 = new_linear_up2_2_0_1;
  double new_a_gf_up3_0_0 = new_linear_up2_2_0_0;
  double h_linear_1_0_0 = ((lever_0_1 * v_angular_0_2) - (lever_0_2 * v_angular_0_1));
  double h_linear_1_0_1 = ((lever_0_2 * v_angular_0_0) - (lever_0_0 * v_angular_0_2));
  double h_linear_1_0_2 = ((lever_0_0 * v_angular_0_1) - (lever_0_1 * v_angular_0_0));
  double h_linear_2_0_2 = (v_linear_0_2 - h_linear_1_0_2);
  double h_linear_2_0_1 = (v_linear_0_1 - h_linear_1_0_1);
  double h_linear_2_0_0 = (v_linear_0_0 - h_linear_1_0_0);
  double h_linear_0_2 = (h_linear_2_0_2 * masses_0);
  double h_linear_0_1 = (h_linear_2_0_1 * masses_0);
  double h_linear_0_0 = (h_linear_2_0_0 * masses_0);
  double temp7 = (inertia_0_0_0 * v_angular_0_0);
  double temp8 = (inertia_0_0_1 * v_angular_0_1);
  double rhsMult1_temp_0 = (temp7 + temp8);
  double temp9 = (inertia_0_0_2 * v_angular_0_2);
  double rhsMult1_0 = (rhsMult1_temp_0 + temp9);
  double temp10 = (inertia_0_0_1 * v_angular_0_0);
  double temp11 = (inertia_0_1_1 * v_angular_0_1);
  double rhsMult2_temp_0 = (temp10 + temp11);
  double temp12 = (inertia_0_1_2 * v_angular_0_2);
  double rhsMult2_0 = (rhsMult2_temp_0 + temp12);
  double temp13 = (inertia_0_0_2 * v_angular_0_0);
  double temp14 = (inertia_0_1_2 * v_angular_0_1);
  double rhsMult3_temp_0 = (temp13 + temp14);
  double temp15 = (inertia_0_2_2 * v_angular_0_2);
  double rhsMult3_0 = (rhsMult3_temp_0 + temp15);
  double rhsMult_0_2 = rhsMult3_0;
  double rhsMult_0_1 = rhsMult2_0;
  double rhsMult_0_0 = rhsMult1_0;
  double h_angular_first_0_2 = rhsMult_0_2;
  double h_angular_first_0_1 = rhsMult_0_1;
  double h_angular_first_0_0 = rhsMult_0_0;
  double h_angular_1_0_0 = ((lever_0_1 * h_linear_0_2) - (lever_0_2 * h_linear_0_1));
  double h_angular_1_0_1 = ((lever_0_2 * h_linear_0_0) - (lever_0_0 * h_linear_0_2));
  double h_angular_1_0_2 = ((lever_0_0 * h_linear_0_1) - (lever_0_1 * h_linear_0_0));
  double h_angular_0_2 = (h_angular_first_0_2 + h_angular_1_0_2);
  double h_angular_0_1 = (h_angular_first_0_1 + h_angular_1_0_1);
  double h_angular_0_0 = (h_angular_first_0_0 + h_angular_1_0_0);
  double f_linear_1_0_0 = ((lever_0_1 * new_angular_up2_2_0_2) - (lever_0_2 * new_angular_up2_2_0_1));
  double f_linear_1_0_1 = ((lever_0_2 * new_angular_up2_2_0_0) - (lever_0_0 * new_angular_up2_2_0_2));
  double f_linear_1_0_2 = ((lever_0_0 * new_angular_up2_2_0_1) - (lever_0_1 * new_angular_up2_2_0_0));
  double f_linear_2_0_2 = (new_linear_up2_2_0_2 - f_linear_1_0_2);
  double f_linear_2_0_1 = (new_linear_up2_2_0_1 - f_linear_1_0_1);
  double f_linear_2_0_0 = (new_linear_up2_2_0_0 - f_linear_1_0_0);
  double f_linear_3_0_2 = (f_linear_2_0_2 * masses_0);
  double f_linear_3_0_1 = (f_linear_2_0_1 * masses_0);
  double f_linear_3_0_0 = (f_linear_2_0_0 * masses_0);
  double temp16 = (inertia_0_0_0 * new_angular_up2_2_0_0);
  double temp17 = (inertia_0_0_1 * new_angular_up2_2_0_1);
  double rhsMult1_2_temp_0 = (temp16 + temp17);
  double temp18 = (inertia_0_0_2 * new_angular_up2_2_0_2);
  double rhsMult1_2_0 = (rhsMult1_2_temp_0 + temp18);
  double temp19 = (inertia_0_0_1 * new_angular_up2_2_0_0);
  double temp20 = (inertia_0_1_1 * new_angular_up2_2_0_1);
  double rhsMult2_2_temp_0 = (temp19 + temp20);
  double temp21 = (inertia_0_1_2 * new_angular_up2_2_0_2);
  double rhsMult2_2_0 = (rhsMult2_2_temp_0 + temp21);
  double temp22 = (inertia_0_0_2 * new_angular_up2_2_0_0);
  double temp23 = (inertia_0_1_2 * new_angular_up2_2_0_1);
  double rhsMult3_2_temp_0 = (temp22 + temp23);
  double temp24 = (inertia_0_2_2 * new_angular_up2_2_0_2);
  double rhsMult3_2_0 = (rhsMult3_2_temp_0 + temp24);
  double rhsMult_2_0_2 = rhsMult3_2_0;
  double rhsMult_2_0_1 = rhsMult2_2_0;
  double rhsMult_2_0_0 = rhsMult1_2_0;
  double f_angular_first_0_2 = rhsMult_2_0_2;
  double f_angular_first_0_1 = rhsMult_2_0_1;
  double f_angular_first_0_0 = rhsMult_2_0_0;
  double f_angular_1_0_0 = ((lever_0_1 * f_linear_3_0_2) - (lever_0_2 * f_linear_3_0_1));
  double f_angular_1_0_1 = ((lever_0_2 * f_linear_3_0_0) - (lever_0_0 * f_linear_3_0_2));
  double f_angular_1_0_2 = ((lever_0_0 * f_linear_3_0_1) - (lever_0_1 * f_linear_3_0_0));
  double f_angular_2_0_2 = (f_angular_first_0_2 + f_angular_1_0_2);
  double f_angular_2_0_1 = (f_angular_first_0_1 + f_angular_1_0_1);
  double f_angular_2_0_0 = (f_angular_first_0_0 + f_angular_1_0_0);
  double f_linear_4_temp_0_0 = ((v_angular_0_1 * h_linear_0_2) - (v_angular_0_2 * h_linear_0_1));
  double f_linear_4_temp_0_1 = ((v_angular_0_2 * h_linear_0_0) - (v_angular_0_0 * h_linear_0_2));
  double f_linear_4_temp_0_2 = ((v_angular_0_0 * h_linear_0_1) - (v_angular_0_1 * h_linear_0_0));
  double f_linear_4_0_2 = (f_linear_3_0_2 + f_linear_4_temp_0_2);
  double f_linear_4_0_1 = (f_linear_3_0_1 + f_linear_4_temp_0_1);
  double f_linear_4_0_0 = (f_linear_3_0_0 + f_linear_4_temp_0_0);
  double f_angular_3_temp_0_0 = ((v_angular_0_1 * h_angular_first_0_2) - (v_angular_0_2 * h_angular_first_0_1));
  double f_angular_3_temp_0_1 = ((v_angular_0_2 * h_angular_first_0_0) - (v_angular_0_0 * h_angular_first_0_2));
  double f_angular_3_temp_0_2 = ((v_angular_0_0 * h_angular_first_0_1) - (v_angular_0_1 * h_angular_first_0_0));
  double f_angular_3_0_2 = (f_angular_2_0_2 + f_angular_3_temp_0_2);
  double f_angular_3_0_1 = (f_angular_2_0_1 + f_angular_3_temp_0_1);
  double f_angular_3_0_0 = (f_angular_2_0_0 + f_angular_3_temp_0_0);
  double f_angular_4_temp_0_0 = ((v_linear_0_1 * h_linear_0_2) - (v_linear_0_2 * h_linear_0_1));
  double f_angular_4_temp_0_1 = ((v_linear_0_2 * h_linear_0_0) - (v_linear_0_0 * h_linear_0_2));
  double f_angular_4_temp_0_2 = ((v_linear_0_0 * h_linear_0_1) - (v_linear_0_1 * h_linear_0_0));
  double f_angular_4_0_2 = (f_angular_3_0_2 + f_angular_4_temp_0_2);
  double f_angular_4_0_1 = (f_angular_3_0_1 + f_angular_4_temp_0_1);
  double f_angular_4_0_0 = (f_angular_3_0_0 + f_angular_4_temp_0_0);
  double h_rnea_firstpass0_5 = h_angular_0_2;
  double h_rnea_firstpass0_4 = h_angular_0_1;
  double h_rnea_firstpass0_3 = h_angular_0_0;
  double h_rnea_firstpass0_2 = h_linear_0_2;
  double h_rnea_firstpass0_1 = h_linear_0_1;
  double h_rnea_firstpass0_0 = h_linear_0_0;
  double f_rnea_firstpass0_5 = f_angular_4_0_2;
  double f_rnea_firstpass0_4 = f_angular_4_0_1;
  double f_rnea_firstpass0_3 = f_angular_4_0_0;
  double f_rnea_firstpass0_2 = f_linear_4_0_2;
  double f_rnea_firstpass0_1 = f_linear_4_0_1;
  double f_rnea_firstpass0_0 = f_linear_4_0_0;
  double new_v_0_5 = v_angular_0_2;
  double new_v_0_4 = v_angular_0_1;
  double new_v_0_3 = v_angular_0_0;
  double new_v_0_2 = v_linear_0_2;
  double new_v_0_1 = v_linear_0_1;
  double new_v_0_0 = v_linear_0_0;
  double rotation_matrix_1_2_2 = 1.0f;
  double rotation_matrix_1_2_1 = 0.0f;
  double rotation_matrix_1_2_0 = 0.0f;
  double rotation_matrix_1_1_2 = 0.0f;
  double rotation_matrix_1_1_1 = qcos_1;
  double rotation_matrix_1_1_0 = qsin_1;
  double rotation_matrix_1_0_2 = 0.0f;
  double rotation_matrix_1_0_1 = -(qsin_1);
  double rotation_matrix_1_0_0 = qcos_1;
  double limi_rotation_1_2_2 = 0.0f;
  double limi_rotation_1_2_1 = -(rotation_matrix_1_1_1);
  double limi_rotation_1_2_0 = -(rotation_matrix_1_1_0);
  double limi_rotation_1_1_2 = 1.0f;
  double limi_rotation_1_1_1 = 0.0f;
  double limi_rotation_1_1_0 = 0.0f;
  double limi_rotation_1_0_2 = 0.0f;
  double limi_rotation_1_0_1 = rotation_matrix_1_0_1;
  double limi_rotation_1_0_0 = rotation_matrix_1_0_0;
  double v_linear_1_2 = data_v_1_2;
  double v_linear_1_1 = data_v_1_1;
  double v_linear_1_0 = data_v_1_0;
  double v_angular_1_2 = v_1;
  double v_angular_1_1 = data_v_1_4;
  double v_angular_1_0 = data_v_1_3;
  double parent_v_linear_1_2 = new_v_0_2;
  double parent_v_linear_1_1 = new_v_0_1;
  double parent_v_linear_1_0 = new_v_0_0;
  double parent_v_angular_1_2 = new_v_0_5;
  double parent_v_angular_1_1 = new_v_0_4;
  double parent_v_angular_1_0 = new_v_0_3;
  double parent_a_gf_linear_1_2 = new_a_gf_up3_0_2;
  double parent_a_gf_linear_1_1 = new_a_gf_up3_0_1;
  double parent_a_gf_linear_1_0 = new_a_gf_up3_0_0;
  double parent_a_gf_angular_1_2 = new_a_gf_up3_0_5;
  double parent_a_gf_angular_1_1 = new_a_gf_up3_0_4;
  double parent_a_gf_angular_1_0 = new_a_gf_up3_0_3;
  double actInv1_1_0 = ((limi_translation_1_1 * parent_v_angular_1_2) - (limi_translation_1_2 * parent_v_angular_1_1));
  double actInv1_1_1 = ((limi_translation_1_2 * parent_v_angular_1_0) - (limi_translation_1_0 * parent_v_angular_1_2));
  double actInv1_1_2 = ((limi_translation_1_0 * parent_v_angular_1_1) - (limi_translation_1_1 * parent_v_angular_1_0));
  double actInv2_1_2 = (parent_v_linear_1_2 - actInv1_1_2);
  double actInv2_1_1 = (parent_v_linear_1_1 - actInv1_1_1);
  double actInv2_1_0 = (parent_v_linear_1_0 - actInv1_1_0);
  double actInv3_1_2_2 = limi_rotation_1_2_2;
  double actInv3_1_1_2 = limi_rotation_1_2_1;
  double actInv3_1_0_2 = limi_rotation_1_2_0;
  double actInv3_1_2_1 = limi_rotation_1_1_2;
  double actInv3_1_1_1 = limi_rotation_1_1_1;
  double actInv3_1_0_1 = limi_rotation_1_1_0;
  double actInv3_1_2_0 = limi_rotation_1_0_2;
  double actInv3_1_1_0 = limi_rotation_1_0_1;
  double actInv3_1_0_0 = limi_rotation_1_0_0;
  double actInv4_1_2 = ((actInv3_1_2_0 * actInv2_1_0) + ((actInv3_1_2_1 * actInv2_1_1) + (actInv3_1_2_2 * actInv2_1_2)));
  double actInv4_1_1 = ((actInv3_1_1_0 * actInv2_1_0) + ((actInv3_1_1_1 * actInv2_1_1) + (actInv3_1_1_2 * actInv2_1_2)));
  double actInv4_1_0 = ((actInv3_1_0_0 * actInv2_1_0) + ((actInv3_1_0_1 * actInv2_1_1) + (actInv3_1_0_2 * actInv2_1_2)));
  double act_inv_linear_1_2 = (v_linear_1_2 + actInv4_1_2);
  double act_inv_linear_1_1 = (v_linear_1_1 + actInv4_1_1);
  double act_inv_linear_1_0 = (v_linear_1_0 + actInv4_1_0);
  double actInv5_1_2 = ((actInv3_1_2_0 * parent_v_angular_1_0) + ((actInv3_1_2_1 * parent_v_angular_1_1) + (actInv3_1_2_2 * parent_v_angular_1_2)));
  double actInv5_1_1 = ((actInv3_1_1_0 * parent_v_angular_1_0) + ((actInv3_1_1_1 * parent_v_angular_1_1) + (actInv3_1_1_2 * parent_v_angular_1_2)));
  double actInv5_1_0 = ((actInv3_1_0_0 * parent_v_angular_1_0) + ((actInv3_1_0_1 * parent_v_angular_1_1) + (actInv3_1_0_2 * parent_v_angular_1_2)));
  double act_inv_angular_1_2 = (v_angular_1_2 + actInv5_1_2);
  double act_inv_angular_1_1 = (v_angular_1_1 + actInv5_1_1);
  double act_inv_angular_1_0 = (v_angular_1_0 + actInv5_1_0);
  double minus_m_w_1 = v_1;
  double temp26 = -(minus_m_w_1);
  double temp25 = -(temp26);
  double alpha_cross1_linear_1 = (temp25 * act_inv_linear_1_1);
  double temp27 = -(minus_m_w_1);
  double alpha_cross2_linear_1 = (temp27 * act_inv_linear_1_0);
  double alpha_cross_linear_1_2 = 0.0f;
  double alpha_cross_linear_1_1 = alpha_cross2_linear_1;
  double alpha_cross_linear_1_0 = alpha_cross1_linear_1;
  double temp29 = -(minus_m_w_1);
  double temp28 = -(temp29);
  double alpha_cross1_angular_1 = (temp28 * act_inv_angular_1_1);
  double temp30 = -(minus_m_w_1);
  double alpha_cross2_angular_1 = (temp30 * act_inv_angular_1_0);
  double alpha_cross_angular_1_2 = 0.0f;
  double alpha_cross_angular_1_1 = alpha_cross2_angular_1;
  double alpha_cross_angular_1_0 = alpha_cross1_angular_1;
  double new_a_gf_1_5 = alpha_cross_angular_1_2;
  double new_a_gf_1_4 = alpha_cross_angular_1_1;
  double new_a_gf_1_3 = alpha_cross_angular_1_0;
  double new_a_gf_1_2 = alpha_cross_linear_1_2;
  double new_a_gf_1_1 = alpha_cross_linear_1_1;
  double new_a_gf_1_0 = alpha_cross_linear_1_0;
  double new_a_gf_up1_1 = (a_1 + new_a_gf_1_5);
  double new_a_gf2_linear_1_2 = new_a_gf_1_2;
  double new_a_gf2_linear_1_1 = new_a_gf_1_1;
  double new_a_gf2_linear_1_0 = new_a_gf_1_0;
  double new_a_gf2_angular_1_2 = new_a_gf_up1_1;
  double new_a_gf2_angular_1_1 = new_a_gf_1_4;
  double new_a_gf2_angular_1_0 = new_a_gf_1_3;
  double actInv1_2_1_0 = ((limi_translation_1_1 * parent_a_gf_angular_1_2) - (limi_translation_1_2 * parent_a_gf_angular_1_1));
  double actInv1_2_1_1 = ((limi_translation_1_2 * parent_a_gf_angular_1_0) - (limi_translation_1_0 * parent_a_gf_angular_1_2));
  double actInv1_2_1_2 = ((limi_translation_1_0 * parent_a_gf_angular_1_1) - (limi_translation_1_1 * parent_a_gf_angular_1_0));
  double actInv2_2_1_2 = (parent_a_gf_linear_1_2 - actInv1_2_1_2);
  double actInv2_2_1_1 = (parent_a_gf_linear_1_1 - actInv1_2_1_1);
  double actInv2_2_1_0 = (parent_a_gf_linear_1_0 - actInv1_2_1_0);
  double actInv3_2_1_2_2 = limi_rotation_1_2_2;
  double actInv3_2_1_1_2 = limi_rotation_1_2_1;
  double actInv3_2_1_0_2 = limi_rotation_1_2_0;
  double actInv3_2_1_2_1 = limi_rotation_1_1_2;
  double actInv3_2_1_1_1 = limi_rotation_1_1_1;
  double actInv3_2_1_0_1 = limi_rotation_1_1_0;
  double actInv3_2_1_2_0 = limi_rotation_1_0_2;
  double actInv3_2_1_1_0 = limi_rotation_1_0_1;
  double actInv3_2_1_0_0 = limi_rotation_1_0_0;
  double actInv4_2_1_2 = ((actInv3_2_1_2_0 * actInv2_2_1_0) + ((actInv3_2_1_2_1 * actInv2_2_1_1) + (actInv3_2_1_2_2 * actInv2_2_1_2)));
  double actInv4_2_1_1 = ((actInv3_2_1_1_0 * actInv2_2_1_0) + ((actInv3_2_1_1_1 * actInv2_2_1_1) + (actInv3_2_1_1_2 * actInv2_2_1_2)));
  double actInv4_2_1_0 = ((actInv3_2_1_0_0 * actInv2_2_1_0) + ((actInv3_2_1_0_1 * actInv2_2_1_1) + (actInv3_2_1_0_2 * actInv2_2_1_2)));
  double new_linear_up2_2_1_2 = (new_a_gf2_linear_1_2 + actInv4_2_1_2);
  double new_linear_up2_2_1_1 = (new_a_gf2_linear_1_1 + actInv4_2_1_1);
  double new_linear_up2_2_1_0 = (new_a_gf2_linear_1_0 + actInv4_2_1_0);
  double actInv5_2_1_2 = ((actInv3_2_1_2_0 * parent_a_gf_angular_1_0) + ((actInv3_2_1_2_1 * parent_a_gf_angular_1_1) + (actInv3_2_1_2_2 * parent_a_gf_angular_1_2)));
  double actInv5_2_1_1 = ((actInv3_2_1_1_0 * parent_a_gf_angular_1_0) + ((actInv3_2_1_1_1 * parent_a_gf_angular_1_1) + (actInv3_2_1_1_2 * parent_a_gf_angular_1_2)));
  double actInv5_2_1_0 = ((actInv3_2_1_0_0 * parent_a_gf_angular_1_0) + ((actInv3_2_1_0_1 * parent_a_gf_angular_1_1) + (actInv3_2_1_0_2 * parent_a_gf_angular_1_2)));
  double new_angular_up2_2_1_2 = (new_a_gf2_angular_1_2 + actInv5_2_1_2);
  double new_angular_up2_2_1_1 = (new_a_gf2_angular_1_1 + actInv5_2_1_1);
  double new_angular_up2_2_1_0 = (new_a_gf2_angular_1_0 + actInv5_2_1_0);
  double new_a_gf_up3_1_5 = new_angular_up2_2_1_2;
  double new_a_gf_up3_1_4 = new_angular_up2_2_1_1;
  double new_a_gf_up3_1_3 = new_angular_up2_2_1_0;
  double new_a_gf_up3_1_2 = new_linear_up2_2_1_2;
  double new_a_gf_up3_1_1 = new_linear_up2_2_1_1;
  double new_a_gf_up3_1_0 = new_linear_up2_2_1_0;
  double h_linear_1_1_0 = ((lever_1_1 * act_inv_angular_1_2) - (lever_1_2 * act_inv_angular_1_1));
  double h_linear_1_1_1 = ((lever_1_2 * act_inv_angular_1_0) - (lever_1_0 * act_inv_angular_1_2));
  double h_linear_1_1_2 = ((lever_1_0 * act_inv_angular_1_1) - (lever_1_1 * act_inv_angular_1_0));
  double h_linear_2_1_2 = (act_inv_linear_1_2 - h_linear_1_1_2);
  double h_linear_2_1_1 = (act_inv_linear_1_1 - h_linear_1_1_1);
  double h_linear_2_1_0 = (act_inv_linear_1_0 - h_linear_1_1_0);
  double h_linear_1_2 = (h_linear_2_1_2 * masses_1);
  double h_linear_1_1 = (h_linear_2_1_1 * masses_1);
  double h_linear_1_0 = (h_linear_2_1_0 * masses_1);
  double temp31 = (inertia_1_0_0 * act_inv_angular_1_0);
  double temp32 = (inertia_1_0_1 * act_inv_angular_1_1);
  double rhsMult1_temp_1 = (temp31 + temp32);
  double temp33 = (inertia_1_0_2 * act_inv_angular_1_2);
  double rhsMult1_1 = (rhsMult1_temp_1 + temp33);
  double temp34 = (inertia_1_0_1 * act_inv_angular_1_0);
  double temp35 = (inertia_1_1_1 * act_inv_angular_1_1);
  double rhsMult2_temp_1 = (temp34 + temp35);
  double temp36 = (inertia_1_1_2 * act_inv_angular_1_2);
  double rhsMult2_1 = (rhsMult2_temp_1 + temp36);
  double temp37 = (inertia_1_0_2 * act_inv_angular_1_0);
  double temp38 = (inertia_1_1_2 * act_inv_angular_1_1);
  double rhsMult3_temp_1 = (temp37 + temp38);
  double temp39 = (inertia_1_2_2 * act_inv_angular_1_2);
  double rhsMult3_1 = (rhsMult3_temp_1 + temp39);
  double rhsMult_1_2 = rhsMult3_1;
  double rhsMult_1_1 = rhsMult2_1;
  double rhsMult_1_0 = rhsMult1_1;
  double h_angular_first_1_2 = rhsMult_1_2;
  double h_angular_first_1_1 = rhsMult_1_1;
  double h_angular_first_1_0 = rhsMult_1_0;
  double h_angular_1_1_0 = ((lever_1_1 * h_linear_1_2) - (lever_1_2 * h_linear_1_1));
  double h_angular_1_1_1 = ((lever_1_2 * h_linear_1_0) - (lever_1_0 * h_linear_1_2));
  double h_angular_1_1_2 = ((lever_1_0 * h_linear_1_1) - (lever_1_1 * h_linear_1_0));
  double h_angular_1_2 = (h_angular_first_1_2 + h_angular_1_1_2);
  double h_angular_1_1 = (h_angular_first_1_1 + h_angular_1_1_1);
  double h_angular_1_0 = (h_angular_first_1_0 + h_angular_1_1_0);
  double f_linear_1_1_0 = ((lever_1_1 * new_angular_up2_2_1_2) - (lever_1_2 * new_angular_up2_2_1_1));
  double f_linear_1_1_1 = ((lever_1_2 * new_angular_up2_2_1_0) - (lever_1_0 * new_angular_up2_2_1_2));
  double f_linear_1_1_2 = ((lever_1_0 * new_angular_up2_2_1_1) - (lever_1_1 * new_angular_up2_2_1_0));
  double f_linear_2_1_2 = (new_linear_up2_2_1_2 - f_linear_1_1_2);
  double f_linear_2_1_1 = (new_linear_up2_2_1_1 - f_linear_1_1_1);
  double f_linear_2_1_0 = (new_linear_up2_2_1_0 - f_linear_1_1_0);
  double f_linear_3_1_2 = (f_linear_2_1_2 * masses_1);
  double f_linear_3_1_1 = (f_linear_2_1_1 * masses_1);
  double f_linear_3_1_0 = (f_linear_2_1_0 * masses_1);
  double temp40 = (inertia_1_0_0 * new_angular_up2_2_1_0);
  double temp41 = (inertia_1_0_1 * new_angular_up2_2_1_1);
  double rhsMult1_2_temp_1 = (temp40 + temp41);
  double temp42 = (inertia_1_0_2 * new_angular_up2_2_1_2);
  double rhsMult1_2_1 = (rhsMult1_2_temp_1 + temp42);
  double temp43 = (inertia_1_0_1 * new_angular_up2_2_1_0);
  double temp44 = (inertia_1_1_1 * new_angular_up2_2_1_1);
  double rhsMult2_2_temp_1 = (temp43 + temp44);
  double temp45 = (inertia_1_1_2 * new_angular_up2_2_1_2);
  double rhsMult2_2_1 = (rhsMult2_2_temp_1 + temp45);
  double temp46 = (inertia_1_0_2 * new_angular_up2_2_1_0);
  double temp47 = (inertia_1_1_2 * new_angular_up2_2_1_1);
  double rhsMult3_2_temp_1 = (temp46 + temp47);
  double temp48 = (inertia_1_2_2 * new_angular_up2_2_1_2);
  double rhsMult3_2_1 = (rhsMult3_2_temp_1 + temp48);
  double rhsMult_2_1_2 = rhsMult3_2_1;
  double rhsMult_2_1_1 = rhsMult2_2_1;
  double rhsMult_2_1_0 = rhsMult1_2_1;
  double f_angular_first_1_2 = rhsMult_2_1_2;
  double f_angular_first_1_1 = rhsMult_2_1_1;
  double f_angular_first_1_0 = rhsMult_2_1_0;
  double f_angular_1_1_0 = ((lever_1_1 * f_linear_3_1_2) - (lever_1_2 * f_linear_3_1_1));
  double f_angular_1_1_1 = ((lever_1_2 * f_linear_3_1_0) - (lever_1_0 * f_linear_3_1_2));
  double f_angular_1_1_2 = ((lever_1_0 * f_linear_3_1_1) - (lever_1_1 * f_linear_3_1_0));
  double f_angular_2_1_2 = (f_angular_first_1_2 + f_angular_1_1_2);
  double f_angular_2_1_1 = (f_angular_first_1_1 + f_angular_1_1_1);
  double f_angular_2_1_0 = (f_angular_first_1_0 + f_angular_1_1_0);
  double f_linear_4_temp_1_0 = ((act_inv_angular_1_1 * h_linear_1_2) - (act_inv_angular_1_2 * h_linear_1_1));
  double f_linear_4_temp_1_1 = ((act_inv_angular_1_2 * h_linear_1_0) - (act_inv_angular_1_0 * h_linear_1_2));
  double f_linear_4_temp_1_2 = ((act_inv_angular_1_0 * h_linear_1_1) - (act_inv_angular_1_1 * h_linear_1_0));
  double f_linear_4_1_2 = (f_linear_3_1_2 + f_linear_4_temp_1_2);
  double f_linear_4_1_1 = (f_linear_3_1_1 + f_linear_4_temp_1_1);
  double f_linear_4_1_0 = (f_linear_3_1_0 + f_linear_4_temp_1_0);
  double f_angular_3_temp_1_0 = ((act_inv_angular_1_1 * h_angular_first_1_2) - (act_inv_angular_1_2 * h_angular_first_1_1));
  double f_angular_3_temp_1_1 = ((act_inv_angular_1_2 * h_angular_first_1_0) - (act_inv_angular_1_0 * h_angular_first_1_2));
  double f_angular_3_temp_1_2 = ((act_inv_angular_1_0 * h_angular_first_1_1) - (act_inv_angular_1_1 * h_angular_first_1_0));
  double f_angular_3_1_2 = (f_angular_2_1_2 + f_angular_3_temp_1_2);
  double f_angular_3_1_1 = (f_angular_2_1_1 + f_angular_3_temp_1_1);
  double f_angular_3_1_0 = (f_angular_2_1_0 + f_angular_3_temp_1_0);
  double f_angular_4_temp_1_0 = ((act_inv_linear_1_1 * h_linear_1_2) - (act_inv_linear_1_2 * h_linear_1_1));
  double f_angular_4_temp_1_1 = ((act_inv_linear_1_2 * h_linear_1_0) - (act_inv_linear_1_0 * h_linear_1_2));
  double f_angular_4_temp_1_2 = ((act_inv_linear_1_0 * h_linear_1_1) - (act_inv_linear_1_1 * h_linear_1_0));
  double f_angular_4_1_2 = (f_angular_3_1_2 + f_angular_4_temp_1_2);
  double f_angular_4_1_1 = (f_angular_3_1_1 + f_angular_4_temp_1_1);
  double f_angular_4_1_0 = (f_angular_3_1_0 + f_angular_4_temp_1_0);
  double h_rnea_firstpass1_5 = h_angular_1_2;
  double h_rnea_firstpass1_4 = h_angular_1_1;
  double h_rnea_firstpass1_3 = h_angular_1_0;
  double h_rnea_firstpass1_2 = h_linear_1_2;
  double h_rnea_firstpass1_1 = h_linear_1_1;
  double h_rnea_firstpass1_0 = h_linear_1_0;
  double f_rnea_firstpass1_5 = f_angular_4_1_2;
  double f_rnea_firstpass1_4 = f_angular_4_1_1;
  double f_rnea_firstpass1_3 = f_angular_4_1_0;
  double f_rnea_firstpass1_2 = f_linear_4_1_2;
  double f_rnea_firstpass1_1 = f_linear_4_1_1;
  double f_rnea_firstpass1_0 = f_linear_4_1_0;
  double new_v_1_5 = act_inv_angular_1_2;
  double new_v_1_4 = act_inv_angular_1_1;
  double new_v_1_3 = act_inv_angular_1_0;
  double new_v_1_2 = act_inv_linear_1_2;
  double new_v_1_1 = act_inv_linear_1_1;
  double new_v_1_0 = act_inv_linear_1_0;
  double rotation_matrix_2_2_2 = 1.0f;
  double rotation_matrix_2_2_1 = 0.0f;
  double rotation_matrix_2_2_0 = 0.0f;
  double rotation_matrix_2_1_2 = 0.0f;
  double rotation_matrix_2_1_1 = qcos_2;
  double rotation_matrix_2_1_0 = qsin_2;
  double rotation_matrix_2_0_2 = 0.0f;
  double rotation_matrix_2_0_1 = -(qsin_2);
  double rotation_matrix_2_0_0 = qcos_2;
  double limi_rotation_2_2_2 = 0.0f;
  double limi_rotation_2_2_1 = rotation_matrix_2_1_1;
  double limi_rotation_2_2_0 = rotation_matrix_2_1_0;
  double limi_rotation_2_1_2 = -1.0f;
  double limi_rotation_2_1_1 = 0.0f;
  double limi_rotation_2_1_0 = 0.0f;
  double limi_rotation_2_0_2 = 0.0f;
  double limi_rotation_2_0_1 = rotation_matrix_2_0_1;
  double limi_rotation_2_0_0 = rotation_matrix_2_0_0;
  double v_linear_2_2 = data_v_2_2;
  double v_linear_2_1 = data_v_2_1;
  double v_linear_2_0 = data_v_2_0;
  double v_angular_2_2 = v_2;
  double v_angular_2_1 = data_v_2_4;
  double v_angular_2_0 = data_v_2_3;
  double parent_v_linear_2_2 = new_v_1_2;
  double parent_v_linear_2_1 = new_v_1_1;
  double parent_v_linear_2_0 = new_v_1_0;
  double parent_v_angular_2_2 = new_v_1_5;
  double parent_v_angular_2_1 = new_v_1_4;
  double parent_v_angular_2_0 = new_v_1_3;
  double parent_a_gf_linear_2_2 = new_a_gf_up3_1_2;
  double parent_a_gf_linear_2_1 = new_a_gf_up3_1_1;
  double parent_a_gf_linear_2_0 = new_a_gf_up3_1_0;
  double parent_a_gf_angular_2_2 = new_a_gf_up3_1_5;
  double parent_a_gf_angular_2_1 = new_a_gf_up3_1_4;
  double parent_a_gf_angular_2_0 = new_a_gf_up3_1_3;
  double actInv1_2_0 = ((limi_translation_2_1 * parent_v_angular_2_2) - (limi_translation_2_2 * parent_v_angular_2_1));
  double actInv1_2_1 = ((limi_translation_2_2 * parent_v_angular_2_0) - (limi_translation_2_0 * parent_v_angular_2_2));
  double actInv1_2_2 = ((limi_translation_2_0 * parent_v_angular_2_1) - (limi_translation_2_1 * parent_v_angular_2_0));
  double actInv2_2_2 = (parent_v_linear_2_2 - actInv1_2_2);
  double actInv2_2_1 = (parent_v_linear_2_1 - actInv1_2_1);
  double actInv2_2_0 = (parent_v_linear_2_0 - actInv1_2_0);
  double actInv3_2_2_2 = limi_rotation_2_2_2;
  double actInv3_2_1_2 = limi_rotation_2_2_1;
  double actInv3_2_0_2 = limi_rotation_2_2_0;
  double actInv3_2_2_1 = limi_rotation_2_1_2;
  double actInv3_2_1_1 = limi_rotation_2_1_1;
  double actInv3_2_0_1 = limi_rotation_2_1_0;
  double actInv3_2_2_0 = limi_rotation_2_0_2;
  double actInv3_2_1_0 = limi_rotation_2_0_1;
  double actInv3_2_0_0 = limi_rotation_2_0_0;
  double actInv4_2_2 = ((actInv3_2_2_0 * actInv2_2_0) + ((actInv3_2_2_1 * actInv2_2_1) + (actInv3_2_2_2 * actInv2_2_2)));
  double actInv4_2_1 = ((actInv3_2_1_0 * actInv2_2_0) + ((actInv3_2_1_1 * actInv2_2_1) + (actInv3_2_1_2 * actInv2_2_2)));
  double actInv4_2_0 = ((actInv3_2_0_0 * actInv2_2_0) + ((actInv3_2_0_1 * actInv2_2_1) + (actInv3_2_0_2 * actInv2_2_2)));
  double act_inv_linear_2_2 = (v_linear_2_2 + actInv4_2_2);
  double act_inv_linear_2_1 = (v_linear_2_1 + actInv4_2_1);
  double act_inv_linear_2_0 = (v_linear_2_0 + actInv4_2_0);
  double actInv5_2_2 = ((actInv3_2_2_0 * parent_v_angular_2_0) + ((actInv3_2_2_1 * parent_v_angular_2_1) + (actInv3_2_2_2 * parent_v_angular_2_2)));
  double actInv5_2_1 = ((actInv3_2_1_0 * parent_v_angular_2_0) + ((actInv3_2_1_1 * parent_v_angular_2_1) + (actInv3_2_1_2 * parent_v_angular_2_2)));
  double actInv5_2_0 = ((actInv3_2_0_0 * parent_v_angular_2_0) + ((actInv3_2_0_1 * parent_v_angular_2_1) + (actInv3_2_0_2 * parent_v_angular_2_2)));
  double act_inv_angular_2_2 = (v_angular_2_2 + actInv5_2_2);
  double act_inv_angular_2_1 = (v_angular_2_1 + actInv5_2_1);
  double act_inv_angular_2_0 = (v_angular_2_0 + actInv5_2_0);
  double minus_m_w_2 = v_2;
  double temp50 = -(minus_m_w_2);
  double temp49 = -(temp50);
  double alpha_cross1_linear_2 = (temp49 * act_inv_linear_2_1);
  double temp51 = -(minus_m_w_2);
  double alpha_cross2_linear_2 = (temp51 * act_inv_linear_2_0);
  double alpha_cross_linear_2_2 = 0.0f;
  double alpha_cross_linear_2_1 = alpha_cross2_linear_2;
  double alpha_cross_linear_2_0 = alpha_cross1_linear_2;
  double temp53 = -(minus_m_w_2);
  double temp52 = -(temp53);
  double alpha_cross1_angular_2 = (temp52 * act_inv_angular_2_1);
  double temp54 = -(minus_m_w_2);
  double alpha_cross2_angular_2 = (temp54 * act_inv_angular_2_0);
  double alpha_cross_angular_2_2 = 0.0f;
  double alpha_cross_angular_2_1 = alpha_cross2_angular_2;
  double alpha_cross_angular_2_0 = alpha_cross1_angular_2;
  double new_a_gf_2_5 = alpha_cross_angular_2_2;
  double new_a_gf_2_4 = alpha_cross_angular_2_1;
  double new_a_gf_2_3 = alpha_cross_angular_2_0;
  double new_a_gf_2_2 = alpha_cross_linear_2_2;
  double new_a_gf_2_1 = alpha_cross_linear_2_1;
  double new_a_gf_2_0 = alpha_cross_linear_2_0;
  double new_a_gf_up1_2 = (a_2 + new_a_gf_2_5);
  double new_a_gf2_linear_2_2 = new_a_gf_2_2;
  double new_a_gf2_linear_2_1 = new_a_gf_2_1;
  double new_a_gf2_linear_2_0 = new_a_gf_2_0;
  double new_a_gf2_angular_2_2 = new_a_gf_up1_2;
  double new_a_gf2_angular_2_1 = new_a_gf_2_4;
  double new_a_gf2_angular_2_0 = new_a_gf_2_3;
  double actInv1_2_2_0 = ((limi_translation_2_1 * parent_a_gf_angular_2_2) - (limi_translation_2_2 * parent_a_gf_angular_2_1));
  double actInv1_2_2_1 = ((limi_translation_2_2 * parent_a_gf_angular_2_0) - (limi_translation_2_0 * parent_a_gf_angular_2_2));
  double actInv1_2_2_2 = ((limi_translation_2_0 * parent_a_gf_angular_2_1) - (limi_translation_2_1 * parent_a_gf_angular_2_0));
  double actInv2_2_2_2 = (parent_a_gf_linear_2_2 - actInv1_2_2_2);
  double actInv2_2_2_1 = (parent_a_gf_linear_2_1 - actInv1_2_2_1);
  double actInv2_2_2_0 = (parent_a_gf_linear_2_0 - actInv1_2_2_0);
  double actInv3_2_2_2_2 = limi_rotation_2_2_2;
  double actInv3_2_2_1_2 = limi_rotation_2_2_1;
  double actInv3_2_2_0_2 = limi_rotation_2_2_0;
  double actInv3_2_2_2_1 = limi_rotation_2_1_2;
  double actInv3_2_2_1_1 = limi_rotation_2_1_1;
  double actInv3_2_2_0_1 = limi_rotation_2_1_0;
  double actInv3_2_2_2_0 = limi_rotation_2_0_2;
  double actInv3_2_2_1_0 = limi_rotation_2_0_1;
  double actInv3_2_2_0_0 = limi_rotation_2_0_0;
  double actInv4_2_2_2 = ((actInv3_2_2_2_0 * actInv2_2_2_0) + ((actInv3_2_2_2_1 * actInv2_2_2_1) + (actInv3_2_2_2_2 * actInv2_2_2_2)));
  double actInv4_2_2_1 = ((actInv3_2_2_1_0 * actInv2_2_2_0) + ((actInv3_2_2_1_1 * actInv2_2_2_1) + (actInv3_2_2_1_2 * actInv2_2_2_2)));
  double actInv4_2_2_0 = ((actInv3_2_2_0_0 * actInv2_2_2_0) + ((actInv3_2_2_0_1 * actInv2_2_2_1) + (actInv3_2_2_0_2 * actInv2_2_2_2)));
  double new_linear_up2_2_2_2 = (new_a_gf2_linear_2_2 + actInv4_2_2_2);
  double new_linear_up2_2_2_1 = (new_a_gf2_linear_2_1 + actInv4_2_2_1);
  double new_linear_up2_2_2_0 = (new_a_gf2_linear_2_0 + actInv4_2_2_0);
  double actInv5_2_2_2 = ((actInv3_2_2_2_0 * parent_a_gf_angular_2_0) + ((actInv3_2_2_2_1 * parent_a_gf_angular_2_1) + (actInv3_2_2_2_2 * parent_a_gf_angular_2_2)));
  double actInv5_2_2_1 = ((actInv3_2_2_1_0 * parent_a_gf_angular_2_0) + ((actInv3_2_2_1_1 * parent_a_gf_angular_2_1) + (actInv3_2_2_1_2 * parent_a_gf_angular_2_2)));
  double actInv5_2_2_0 = ((actInv3_2_2_0_0 * parent_a_gf_angular_2_0) + ((actInv3_2_2_0_1 * parent_a_gf_angular_2_1) + (actInv3_2_2_0_2 * parent_a_gf_angular_2_2)));
  double new_angular_up2_2_2_2 = (new_a_gf2_angular_2_2 + actInv5_2_2_2);
  double new_angular_up2_2_2_1 = (new_a_gf2_angular_2_1 + actInv5_2_2_1);
  double new_angular_up2_2_2_0 = (new_a_gf2_angular_2_0 + actInv5_2_2_0);
  double new_a_gf_up3_2_5 = new_angular_up2_2_2_2;
  double new_a_gf_up3_2_4 = new_angular_up2_2_2_1;
  double new_a_gf_up3_2_3 = new_angular_up2_2_2_0;
  double new_a_gf_up3_2_2 = new_linear_up2_2_2_2;
  double new_a_gf_up3_2_1 = new_linear_up2_2_2_1;
  double new_a_gf_up3_2_0 = new_linear_up2_2_2_0;
  double h_linear_1_2_0 = ((lever_2_1 * act_inv_angular_2_2) - (lever_2_2 * act_inv_angular_2_1));
  double h_linear_1_2_1 = ((lever_2_2 * act_inv_angular_2_0) - (lever_2_0 * act_inv_angular_2_2));
  double h_linear_1_2_2 = ((lever_2_0 * act_inv_angular_2_1) - (lever_2_1 * act_inv_angular_2_0));
  double h_linear_2_2_2 = (act_inv_linear_2_2 - h_linear_1_2_2);
  double h_linear_2_2_1 = (act_inv_linear_2_1 - h_linear_1_2_1);
  double h_linear_2_2_0 = (act_inv_linear_2_0 - h_linear_1_2_0);
  double h_linear_2_2 = (h_linear_2_2_2 * masses_2);
  double h_linear_2_1 = (h_linear_2_2_1 * masses_2);
  double h_linear_2_0 = (h_linear_2_2_0 * masses_2);
  double temp55 = (inertia_2_0_0 * act_inv_angular_2_0);
  double temp56 = (inertia_2_0_1 * act_inv_angular_2_1);
  double rhsMult1_temp_2 = (temp55 + temp56);
  double temp57 = (inertia_2_0_2 * act_inv_angular_2_2);
  double rhsMult1_2 = (rhsMult1_temp_2 + temp57);
  double temp58 = (inertia_2_0_1 * act_inv_angular_2_0);
  double temp59 = (inertia_2_1_1 * act_inv_angular_2_1);
  double rhsMult2_temp_2 = (temp58 + temp59);
  double temp60 = (inertia_2_1_2 * act_inv_angular_2_2);
  double rhsMult2_2 = (rhsMult2_temp_2 + temp60);
  double temp61 = (inertia_2_0_2 * act_inv_angular_2_0);
  double temp62 = (inertia_2_1_2 * act_inv_angular_2_1);
  double rhsMult3_temp_2 = (temp61 + temp62);
  double temp63 = (inertia_2_2_2 * act_inv_angular_2_2);
  double rhsMult3_2 = (rhsMult3_temp_2 + temp63);
  double rhsMult_2_2 = rhsMult3_2;
  double rhsMult_2_1 = rhsMult2_2;
  double rhsMult_2_0 = rhsMult1_2;
  double h_angular_first_2_2 = rhsMult_2_2;
  double h_angular_first_2_1 = rhsMult_2_1;
  double h_angular_first_2_0 = rhsMult_2_0;
  double h_angular_1_2_0 = ((lever_2_1 * h_linear_2_2) - (lever_2_2 * h_linear_2_1));
  double h_angular_1_2_1 = ((lever_2_2 * h_linear_2_0) - (lever_2_0 * h_linear_2_2));
  double h_angular_1_2_2 = ((lever_2_0 * h_linear_2_1) - (lever_2_1 * h_linear_2_0));
  double h_angular_2_2 = (h_angular_first_2_2 + h_angular_1_2_2);
  double h_angular_2_1 = (h_angular_first_2_1 + h_angular_1_2_1);
  double h_angular_2_0 = (h_angular_first_2_0 + h_angular_1_2_0);
  double f_linear_1_2_0 = ((lever_2_1 * new_angular_up2_2_2_2) - (lever_2_2 * new_angular_up2_2_2_1));
  double f_linear_1_2_1 = ((lever_2_2 * new_angular_up2_2_2_0) - (lever_2_0 * new_angular_up2_2_2_2));
  double f_linear_1_2_2 = ((lever_2_0 * new_angular_up2_2_2_1) - (lever_2_1 * new_angular_up2_2_2_0));
  double f_linear_2_2_2 = (new_linear_up2_2_2_2 - f_linear_1_2_2);
  double f_linear_2_2_1 = (new_linear_up2_2_2_1 - f_linear_1_2_1);
  double f_linear_2_2_0 = (new_linear_up2_2_2_0 - f_linear_1_2_0);
  double f_linear_3_2_2 = (f_linear_2_2_2 * masses_2);
  double f_linear_3_2_1 = (f_linear_2_2_1 * masses_2);
  double f_linear_3_2_0 = (f_linear_2_2_0 * masses_2);
  double temp64 = (inertia_2_0_0 * new_angular_up2_2_2_0);
  double temp65 = (inertia_2_0_1 * new_angular_up2_2_2_1);
  double rhsMult1_2_temp_2 = (temp64 + temp65);
  double temp66 = (inertia_2_0_2 * new_angular_up2_2_2_2);
  double rhsMult1_2_2 = (rhsMult1_2_temp_2 + temp66);
  double temp67 = (inertia_2_0_1 * new_angular_up2_2_2_0);
  double temp68 = (inertia_2_1_1 * new_angular_up2_2_2_1);
  double rhsMult2_2_temp_2 = (temp67 + temp68);
  double temp69 = (inertia_2_1_2 * new_angular_up2_2_2_2);
  double rhsMult2_2_2 = (rhsMult2_2_temp_2 + temp69);
  double temp70 = (inertia_2_0_2 * new_angular_up2_2_2_0);
  double temp71 = (inertia_2_1_2 * new_angular_up2_2_2_1);
  double rhsMult3_2_temp_2 = (temp70 + temp71);
  double temp72 = (inertia_2_2_2 * new_angular_up2_2_2_2);
  double rhsMult3_2_2 = (rhsMult3_2_temp_2 + temp72);
  double rhsMult_2_2_2 = rhsMult3_2_2;
  double rhsMult_2_2_1 = rhsMult2_2_2;
  double rhsMult_2_2_0 = rhsMult1_2_2;
  double f_angular_first_2_2 = rhsMult_2_2_2;
  double f_angular_first_2_1 = rhsMult_2_2_1;
  double f_angular_first_2_0 = rhsMult_2_2_0;
  double f_angular_1_2_0 = ((lever_2_1 * f_linear_3_2_2) - (lever_2_2 * f_linear_3_2_1));
  double f_angular_1_2_1 = ((lever_2_2 * f_linear_3_2_0) - (lever_2_0 * f_linear_3_2_2));
  double f_angular_1_2_2 = ((lever_2_0 * f_linear_3_2_1) - (lever_2_1 * f_linear_3_2_0));
  double f_angular_2_2_2 = (f_angular_first_2_2 + f_angular_1_2_2);
  double f_angular_2_2_1 = (f_angular_first_2_1 + f_angular_1_2_1);
  double f_angular_2_2_0 = (f_angular_first_2_0 + f_angular_1_2_0);
  double f_linear_4_temp_2_0 = ((act_inv_angular_2_1 * h_linear_2_2) - (act_inv_angular_2_2 * h_linear_2_1));
  double f_linear_4_temp_2_1 = ((act_inv_angular_2_2 * h_linear_2_0) - (act_inv_angular_2_0 * h_linear_2_2));
  double f_linear_4_temp_2_2 = ((act_inv_angular_2_0 * h_linear_2_1) - (act_inv_angular_2_1 * h_linear_2_0));
  double f_linear_4_2_2 = (f_linear_3_2_2 + f_linear_4_temp_2_2);
  double f_linear_4_2_1 = (f_linear_3_2_1 + f_linear_4_temp_2_1);
  double f_linear_4_2_0 = (f_linear_3_2_0 + f_linear_4_temp_2_0);
  double f_angular_3_temp_2_0 = ((act_inv_angular_2_1 * h_angular_first_2_2) - (act_inv_angular_2_2 * h_angular_first_2_1));
  double f_angular_3_temp_2_1 = ((act_inv_angular_2_2 * h_angular_first_2_0) - (act_inv_angular_2_0 * h_angular_first_2_2));
  double f_angular_3_temp_2_2 = ((act_inv_angular_2_0 * h_angular_first_2_1) - (act_inv_angular_2_1 * h_angular_first_2_0));
  double f_angular_3_2_2 = (f_angular_2_2_2 + f_angular_3_temp_2_2);
  double f_angular_3_2_1 = (f_angular_2_2_1 + f_angular_3_temp_2_1);
  double f_angular_3_2_0 = (f_angular_2_2_0 + f_angular_3_temp_2_0);
  double f_angular_4_temp_2_0 = ((act_inv_linear_2_1 * h_linear_2_2) - (act_inv_linear_2_2 * h_linear_2_1));
  double f_angular_4_temp_2_1 = ((act_inv_linear_2_2 * h_linear_2_0) - (act_inv_linear_2_0 * h_linear_2_2));
  double f_angular_4_temp_2_2 = ((act_inv_linear_2_0 * h_linear_2_1) - (act_inv_linear_2_1 * h_linear_2_0));
  double f_angular_4_2_2 = (f_angular_3_2_2 + f_angular_4_temp_2_2);
  double f_angular_4_2_1 = (f_angular_3_2_1 + f_angular_4_temp_2_1);
  double f_angular_4_2_0 = (f_angular_3_2_0 + f_angular_4_temp_2_0);
  double h_rnea_firstpass2_5 = h_angular_2_2;
  double h_rnea_firstpass2_4 = h_angular_2_1;
  double h_rnea_firstpass2_3 = h_angular_2_0;
  double h_rnea_firstpass2_2 = h_linear_2_2;
  double h_rnea_firstpass2_1 = h_linear_2_1;
  double h_rnea_firstpass2_0 = h_linear_2_0;
  double f_rnea_firstpass2_5 = f_angular_4_2_2;
  double f_rnea_firstpass2_4 = f_angular_4_2_1;
  double f_rnea_firstpass2_3 = f_angular_4_2_0;
  double f_rnea_firstpass2_2 = f_linear_4_2_2;
  double f_rnea_firstpass2_1 = f_linear_4_2_1;
  double f_rnea_firstpass2_0 = f_linear_4_2_0;
  double new_v_2_5 = act_inv_angular_2_2;
  double new_v_2_4 = act_inv_angular_2_1;
  double new_v_2_3 = act_inv_angular_2_0;
  double new_v_2_2 = act_inv_linear_2_2;
  double new_v_2_1 = act_inv_linear_2_1;
  double new_v_2_0 = act_inv_linear_2_0;
  double rotation_matrix_3_2_2 = 1.0f;
  double rotation_matrix_3_2_1 = 0.0f;
  double rotation_matrix_3_2_0 = 0.0f;
  double rotation_matrix_3_1_2 = 0.0f;
  double rotation_matrix_3_1_1 = qcos_3;
  double rotation_matrix_3_1_0 = qsin_3;
  double rotation_matrix_3_0_2 = 0.0f;
  double rotation_matrix_3_0_1 = -(qsin_3);
  double rotation_matrix_3_0_0 = qcos_3;
  double limi_rotation_3_2_2 = 0.0f;
  double limi_rotation_3_2_1 = rotation_matrix_3_1_1;
  double limi_rotation_3_2_0 = rotation_matrix_3_1_0;
  double limi_rotation_3_1_2 = -1.0f;
  double limi_rotation_3_1_1 = 0.0f;
  double limi_rotation_3_1_0 = 0.0f;
  double limi_rotation_3_0_2 = 0.0f;
  double limi_rotation_3_0_1 = rotation_matrix_3_0_1;
  double limi_rotation_3_0_0 = rotation_matrix_3_0_0;
  double v_linear_3_2 = data_v_3_2;
  double v_linear_3_1 = data_v_3_1;
  double v_linear_3_0 = data_v_3_0;
  double v_angular_3_2 = v_3;
  double v_angular_3_1 = data_v_3_4;
  double v_angular_3_0 = data_v_3_3;
  double parent_v_linear_3_2 = new_v_2_2;
  double parent_v_linear_3_1 = new_v_2_1;
  double parent_v_linear_3_0 = new_v_2_0;
  double parent_v_angular_3_2 = new_v_2_5;
  double parent_v_angular_3_1 = new_v_2_4;
  double parent_v_angular_3_0 = new_v_2_3;
  double parent_a_gf_linear_3_2 = new_a_gf_up3_2_2;
  double parent_a_gf_linear_3_1 = new_a_gf_up3_2_1;
  double parent_a_gf_linear_3_0 = new_a_gf_up3_2_0;
  double parent_a_gf_angular_3_2 = new_a_gf_up3_2_5;
  double parent_a_gf_angular_3_1 = new_a_gf_up3_2_4;
  double parent_a_gf_angular_3_0 = new_a_gf_up3_2_3;
  double actInv1_3_0 = ((limi_translation_3_1 * parent_v_angular_3_2) - (limi_translation_3_2 * parent_v_angular_3_1));
  double actInv1_3_1 = ((limi_translation_3_2 * parent_v_angular_3_0) - (limi_translation_3_0 * parent_v_angular_3_2));
  double actInv1_3_2 = ((limi_translation_3_0 * parent_v_angular_3_1) - (limi_translation_3_1 * parent_v_angular_3_0));
  double actInv2_3_2 = (parent_v_linear_3_2 - actInv1_3_2);
  double actInv2_3_1 = (parent_v_linear_3_1 - actInv1_3_1);
  double actInv2_3_0 = (parent_v_linear_3_0 - actInv1_3_0);
  double actInv3_3_2_2 = limi_rotation_3_2_2;
  double actInv3_3_1_2 = limi_rotation_3_2_1;
  double actInv3_3_0_2 = limi_rotation_3_2_0;
  double actInv3_3_2_1 = limi_rotation_3_1_2;
  double actInv3_3_1_1 = limi_rotation_3_1_1;
  double actInv3_3_0_1 = limi_rotation_3_1_0;
  double actInv3_3_2_0 = limi_rotation_3_0_2;
  double actInv3_3_1_0 = limi_rotation_3_0_1;
  double actInv3_3_0_0 = limi_rotation_3_0_0;
  double actInv4_3_2 = ((actInv3_3_2_0 * actInv2_3_0) + ((actInv3_3_2_1 * actInv2_3_1) + (actInv3_3_2_2 * actInv2_3_2)));
  double actInv4_3_1 = ((actInv3_3_1_0 * actInv2_3_0) + ((actInv3_3_1_1 * actInv2_3_1) + (actInv3_3_1_2 * actInv2_3_2)));
  double actInv4_3_0 = ((actInv3_3_0_0 * actInv2_3_0) + ((actInv3_3_0_1 * actInv2_3_1) + (actInv3_3_0_2 * actInv2_3_2)));
  double act_inv_linear_3_2 = (v_linear_3_2 + actInv4_3_2);
  double act_inv_linear_3_1 = (v_linear_3_1 + actInv4_3_1);
  double act_inv_linear_3_0 = (v_linear_3_0 + actInv4_3_0);
  double actInv5_3_2 = ((actInv3_3_2_0 * parent_v_angular_3_0) + ((actInv3_3_2_1 * parent_v_angular_3_1) + (actInv3_3_2_2 * parent_v_angular_3_2)));
  double actInv5_3_1 = ((actInv3_3_1_0 * parent_v_angular_3_0) + ((actInv3_3_1_1 * parent_v_angular_3_1) + (actInv3_3_1_2 * parent_v_angular_3_2)));
  double actInv5_3_0 = ((actInv3_3_0_0 * parent_v_angular_3_0) + ((actInv3_3_0_1 * parent_v_angular_3_1) + (actInv3_3_0_2 * parent_v_angular_3_2)));
  double act_inv_angular_3_2 = (v_angular_3_2 + actInv5_3_2);
  double act_inv_angular_3_1 = (v_angular_3_1 + actInv5_3_1);
  double act_inv_angular_3_0 = (v_angular_3_0 + actInv5_3_0);
  double minus_m_w_3 = v_3;
  double temp74 = -(minus_m_w_3);
  double temp73 = -(temp74);
  double alpha_cross1_linear_3 = (temp73 * act_inv_linear_3_1);
  double temp75 = -(minus_m_w_3);
  double alpha_cross2_linear_3 = (temp75 * act_inv_linear_3_0);
  double alpha_cross_linear_3_2 = 0.0f;
  double alpha_cross_linear_3_1 = alpha_cross2_linear_3;
  double alpha_cross_linear_3_0 = alpha_cross1_linear_3;
  double temp77 = -(minus_m_w_3);
  double temp76 = -(temp77);
  double alpha_cross1_angular_3 = (temp76 * act_inv_angular_3_1);
  double temp78 = -(minus_m_w_3);
  double alpha_cross2_angular_3 = (temp78 * act_inv_angular_3_0);
  double alpha_cross_angular_3_2 = 0.0f;
  double alpha_cross_angular_3_1 = alpha_cross2_angular_3;
  double alpha_cross_angular_3_0 = alpha_cross1_angular_3;
  double new_a_gf_3_5 = alpha_cross_angular_3_2;
  double new_a_gf_3_4 = alpha_cross_angular_3_1;
  double new_a_gf_3_3 = alpha_cross_angular_3_0;
  double new_a_gf_3_2 = alpha_cross_linear_3_2;
  double new_a_gf_3_1 = alpha_cross_linear_3_1;
  double new_a_gf_3_0 = alpha_cross_linear_3_0;
  double new_a_gf_up1_3 = (a_3 + new_a_gf_3_5);
  double new_a_gf2_linear_3_2 = new_a_gf_3_2;
  double new_a_gf2_linear_3_1 = new_a_gf_3_1;
  double new_a_gf2_linear_3_0 = new_a_gf_3_0;
  double new_a_gf2_angular_3_2 = new_a_gf_up1_3;
  double new_a_gf2_angular_3_1 = new_a_gf_3_4;
  double new_a_gf2_angular_3_0 = new_a_gf_3_3;
  double actInv1_2_3_0 = ((limi_translation_3_1 * parent_a_gf_angular_3_2) - (limi_translation_3_2 * parent_a_gf_angular_3_1));
  double actInv1_2_3_1 = ((limi_translation_3_2 * parent_a_gf_angular_3_0) - (limi_translation_3_0 * parent_a_gf_angular_3_2));
  double actInv1_2_3_2 = ((limi_translation_3_0 * parent_a_gf_angular_3_1) - (limi_translation_3_1 * parent_a_gf_angular_3_0));
  double actInv2_2_3_2 = (parent_a_gf_linear_3_2 - actInv1_2_3_2);
  double actInv2_2_3_1 = (parent_a_gf_linear_3_1 - actInv1_2_3_1);
  double actInv2_2_3_0 = (parent_a_gf_linear_3_0 - actInv1_2_3_0);
  double actInv3_2_3_2_2 = limi_rotation_3_2_2;
  double actInv3_2_3_1_2 = limi_rotation_3_2_1;
  double actInv3_2_3_0_2 = limi_rotation_3_2_0;
  double actInv3_2_3_2_1 = limi_rotation_3_1_2;
  double actInv3_2_3_1_1 = limi_rotation_3_1_1;
  double actInv3_2_3_0_1 = limi_rotation_3_1_0;
  double actInv3_2_3_2_0 = limi_rotation_3_0_2;
  double actInv3_2_3_1_0 = limi_rotation_3_0_1;
  double actInv3_2_3_0_0 = limi_rotation_3_0_0;
  double actInv4_2_3_2 = ((actInv3_2_3_2_0 * actInv2_2_3_0) + ((actInv3_2_3_2_1 * actInv2_2_3_1) + (actInv3_2_3_2_2 * actInv2_2_3_2)));
  double actInv4_2_3_1 = ((actInv3_2_3_1_0 * actInv2_2_3_0) + ((actInv3_2_3_1_1 * actInv2_2_3_1) + (actInv3_2_3_1_2 * actInv2_2_3_2)));
  double actInv4_2_3_0 = ((actInv3_2_3_0_0 * actInv2_2_3_0) + ((actInv3_2_3_0_1 * actInv2_2_3_1) + (actInv3_2_3_0_2 * actInv2_2_3_2)));
  double new_linear_up2_2_3_2 = (new_a_gf2_linear_3_2 + actInv4_2_3_2);
  double new_linear_up2_2_3_1 = (new_a_gf2_linear_3_1 + actInv4_2_3_1);
  double new_linear_up2_2_3_0 = (new_a_gf2_linear_3_0 + actInv4_2_3_0);
  double actInv5_2_3_2 = ((actInv3_2_3_2_0 * parent_a_gf_angular_3_0) + ((actInv3_2_3_2_1 * parent_a_gf_angular_3_1) + (actInv3_2_3_2_2 * parent_a_gf_angular_3_2)));
  double actInv5_2_3_1 = ((actInv3_2_3_1_0 * parent_a_gf_angular_3_0) + ((actInv3_2_3_1_1 * parent_a_gf_angular_3_1) + (actInv3_2_3_1_2 * parent_a_gf_angular_3_2)));
  double actInv5_2_3_0 = ((actInv3_2_3_0_0 * parent_a_gf_angular_3_0) + ((actInv3_2_3_0_1 * parent_a_gf_angular_3_1) + (actInv3_2_3_0_2 * parent_a_gf_angular_3_2)));
  double new_angular_up2_2_3_2 = (new_a_gf2_angular_3_2 + actInv5_2_3_2);
  double new_angular_up2_2_3_1 = (new_a_gf2_angular_3_1 + actInv5_2_3_1);
  double new_angular_up2_2_3_0 = (new_a_gf2_angular_3_0 + actInv5_2_3_0);
  double new_a_gf_up3_3_5 = new_angular_up2_2_3_2;
  double new_a_gf_up3_3_4 = new_angular_up2_2_3_1;
  double new_a_gf_up3_3_3 = new_angular_up2_2_3_0;
  double new_a_gf_up3_3_2 = new_linear_up2_2_3_2;
  double new_a_gf_up3_3_1 = new_linear_up2_2_3_1;
  double new_a_gf_up3_3_0 = new_linear_up2_2_3_0;
  double h_linear_1_3_0 = ((lever_3_1 * act_inv_angular_3_2) - (lever_3_2 * act_inv_angular_3_1));
  double h_linear_1_3_1 = ((lever_3_2 * act_inv_angular_3_0) - (lever_3_0 * act_inv_angular_3_2));
  double h_linear_1_3_2 = ((lever_3_0 * act_inv_angular_3_1) - (lever_3_1 * act_inv_angular_3_0));
  double h_linear_2_3_2 = (act_inv_linear_3_2 - h_linear_1_3_2);
  double h_linear_2_3_1 = (act_inv_linear_3_1 - h_linear_1_3_1);
  double h_linear_2_3_0 = (act_inv_linear_3_0 - h_linear_1_3_0);
  double h_linear_3_2 = (h_linear_2_3_2 * masses_3);
  double h_linear_3_1 = (h_linear_2_3_1 * masses_3);
  double h_linear_3_0 = (h_linear_2_3_0 * masses_3);
  double temp79 = (inertia_3_0_0 * act_inv_angular_3_0);
  double temp80 = (inertia_3_0_1 * act_inv_angular_3_1);
  double rhsMult1_temp_3 = (temp79 + temp80);
  double temp81 = (inertia_3_0_2 * act_inv_angular_3_2);
  double rhsMult1_3 = (rhsMult1_temp_3 + temp81);
  double temp82 = (inertia_3_0_1 * act_inv_angular_3_0);
  double temp83 = (inertia_3_1_1 * act_inv_angular_3_1);
  double rhsMult2_temp_3 = (temp82 + temp83);
  double temp84 = (inertia_3_1_2 * act_inv_angular_3_2);
  double rhsMult2_3 = (rhsMult2_temp_3 + temp84);
  double temp85 = (inertia_3_0_2 * act_inv_angular_3_0);
  double temp86 = (inertia_3_1_2 * act_inv_angular_3_1);
  double rhsMult3_temp_3 = (temp85 + temp86);
  double temp87 = (inertia_3_2_2 * act_inv_angular_3_2);
  double rhsMult3_3 = (rhsMult3_temp_3 + temp87);
  double rhsMult_3_2 = rhsMult3_3;
  double rhsMult_3_1 = rhsMult2_3;
  double rhsMult_3_0 = rhsMult1_3;
  double h_angular_first_3_2 = rhsMult_3_2;
  double h_angular_first_3_1 = rhsMult_3_1;
  double h_angular_first_3_0 = rhsMult_3_0;
  double h_angular_1_3_0 = ((lever_3_1 * h_linear_3_2) - (lever_3_2 * h_linear_3_1));
  double h_angular_1_3_1 = ((lever_3_2 * h_linear_3_0) - (lever_3_0 * h_linear_3_2));
  double h_angular_1_3_2 = ((lever_3_0 * h_linear_3_1) - (lever_3_1 * h_linear_3_0));
  double h_angular_3_2 = (h_angular_first_3_2 + h_angular_1_3_2);
  double h_angular_3_1 = (h_angular_first_3_1 + h_angular_1_3_1);
  double h_angular_3_0 = (h_angular_first_3_0 + h_angular_1_3_0);
  double f_linear_1_3_0 = ((lever_3_1 * new_angular_up2_2_3_2) - (lever_3_2 * new_angular_up2_2_3_1));
  double f_linear_1_3_1 = ((lever_3_2 * new_angular_up2_2_3_0) - (lever_3_0 * new_angular_up2_2_3_2));
  double f_linear_1_3_2 = ((lever_3_0 * new_angular_up2_2_3_1) - (lever_3_1 * new_angular_up2_2_3_0));
  double f_linear_2_3_2 = (new_linear_up2_2_3_2 - f_linear_1_3_2);
  double f_linear_2_3_1 = (new_linear_up2_2_3_1 - f_linear_1_3_1);
  double f_linear_2_3_0 = (new_linear_up2_2_3_0 - f_linear_1_3_0);
  double f_linear_3_3_2 = (f_linear_2_3_2 * masses_3);
  double f_linear_3_3_1 = (f_linear_2_3_1 * masses_3);
  double f_linear_3_3_0 = (f_linear_2_3_0 * masses_3);
  double temp88 = (inertia_3_0_0 * new_angular_up2_2_3_0);
  double temp89 = (inertia_3_0_1 * new_angular_up2_2_3_1);
  double rhsMult1_2_temp_3 = (temp88 + temp89);
  double temp90 = (inertia_3_0_2 * new_angular_up2_2_3_2);
  double rhsMult1_2_3 = (rhsMult1_2_temp_3 + temp90);
  double temp91 = (inertia_3_0_1 * new_angular_up2_2_3_0);
  double temp92 = (inertia_3_1_1 * new_angular_up2_2_3_1);
  double rhsMult2_2_temp_3 = (temp91 + temp92);
  double temp93 = (inertia_3_1_2 * new_angular_up2_2_3_2);
  double rhsMult2_2_3 = (rhsMult2_2_temp_3 + temp93);
  double temp94 = (inertia_3_0_2 * new_angular_up2_2_3_0);
  double temp95 = (inertia_3_1_2 * new_angular_up2_2_3_1);
  double rhsMult3_2_temp_3 = (temp94 + temp95);
  double temp96 = (inertia_3_2_2 * new_angular_up2_2_3_2);
  double rhsMult3_2_3 = (rhsMult3_2_temp_3 + temp96);
  double rhsMult_2_3_2 = rhsMult3_2_3;
  double rhsMult_2_3_1 = rhsMult2_2_3;
  double rhsMult_2_3_0 = rhsMult1_2_3;
  double f_angular_first_3_2 = rhsMult_2_3_2;
  double f_angular_first_3_1 = rhsMult_2_3_1;
  double f_angular_first_3_0 = rhsMult_2_3_0;
  double f_angular_1_3_0 = ((lever_3_1 * f_linear_3_3_2) - (lever_3_2 * f_linear_3_3_1));
  double f_angular_1_3_1 = ((lever_3_2 * f_linear_3_3_0) - (lever_3_0 * f_linear_3_3_2));
  double f_angular_1_3_2 = ((lever_3_0 * f_linear_3_3_1) - (lever_3_1 * f_linear_3_3_0));
  double f_angular_2_3_2 = (f_angular_first_3_2 + f_angular_1_3_2);
  double f_angular_2_3_1 = (f_angular_first_3_1 + f_angular_1_3_1);
  double f_angular_2_3_0 = (f_angular_first_3_0 + f_angular_1_3_0);
  double f_linear_4_temp_3_0 = ((act_inv_angular_3_1 * h_linear_3_2) - (act_inv_angular_3_2 * h_linear_3_1));
  double f_linear_4_temp_3_1 = ((act_inv_angular_3_2 * h_linear_3_0) - (act_inv_angular_3_0 * h_linear_3_2));
  double f_linear_4_temp_3_2 = ((act_inv_angular_3_0 * h_linear_3_1) - (act_inv_angular_3_1 * h_linear_3_0));
  double f_linear_4_3_2 = (f_linear_3_3_2 + f_linear_4_temp_3_2);
  double f_linear_4_3_1 = (f_linear_3_3_1 + f_linear_4_temp_3_1);
  double f_linear_4_3_0 = (f_linear_3_3_0 + f_linear_4_temp_3_0);
  double f_angular_3_temp_3_0 = ((act_inv_angular_3_1 * h_angular_first_3_2) - (act_inv_angular_3_2 * h_angular_first_3_1));
  double f_angular_3_temp_3_1 = ((act_inv_angular_3_2 * h_angular_first_3_0) - (act_inv_angular_3_0 * h_angular_first_3_2));
  double f_angular_3_temp_3_2 = ((act_inv_angular_3_0 * h_angular_first_3_1) - (act_inv_angular_3_1 * h_angular_first_3_0));
  double f_angular_3_3_2 = (f_angular_2_3_2 + f_angular_3_temp_3_2);
  double f_angular_3_3_1 = (f_angular_2_3_1 + f_angular_3_temp_3_1);
  double f_angular_3_3_0 = (f_angular_2_3_0 + f_angular_3_temp_3_0);
  double f_angular_4_temp_3_0 = ((act_inv_linear_3_1 * h_linear_3_2) - (act_inv_linear_3_2 * h_linear_3_1));
  double f_angular_4_temp_3_1 = ((act_inv_linear_3_2 * h_linear_3_0) - (act_inv_linear_3_0 * h_linear_3_2));
  double f_angular_4_temp_3_2 = ((act_inv_linear_3_0 * h_linear_3_1) - (act_inv_linear_3_1 * h_linear_3_0));
  double f_angular_4_3_2 = (f_angular_3_3_2 + f_angular_4_temp_3_2);
  double f_angular_4_3_1 = (f_angular_3_3_1 + f_angular_4_temp_3_1);
  double f_angular_4_3_0 = (f_angular_3_3_0 + f_angular_4_temp_3_0);
  double h_rnea_firstpass3_5 = h_angular_3_2;
  double h_rnea_firstpass3_4 = h_angular_3_1;
  double h_rnea_firstpass3_3 = h_angular_3_0;
  double h_rnea_firstpass3_2 = h_linear_3_2;
  double h_rnea_firstpass3_1 = h_linear_3_1;
  double h_rnea_firstpass3_0 = h_linear_3_0;
  double f_rnea_firstpass3_5 = f_angular_4_3_2;
  double f_rnea_firstpass3_4 = f_angular_4_3_1;
  double f_rnea_firstpass3_3 = f_angular_4_3_0;
  double f_rnea_firstpass3_2 = f_linear_4_3_2;
  double f_rnea_firstpass3_1 = f_linear_4_3_1;
  double f_rnea_firstpass3_0 = f_linear_4_3_0;
  double new_v_3_5 = act_inv_angular_3_2;
  double new_v_3_4 = act_inv_angular_3_1;
  double new_v_3_3 = act_inv_angular_3_0;
  double new_v_3_2 = act_inv_linear_3_2;
  double new_v_3_1 = act_inv_linear_3_1;
  double new_v_3_0 = act_inv_linear_3_0;
  double rotation_matrix_4_2_2 = 1.0f;
  double rotation_matrix_4_2_1 = 0.0f;
  double rotation_matrix_4_2_0 = 0.0f;
  double rotation_matrix_4_1_2 = 0.0f;
  double rotation_matrix_4_1_1 = qcos_4;
  double rotation_matrix_4_1_0 = qsin_4;
  double rotation_matrix_4_0_2 = 0.0f;
  double rotation_matrix_4_0_1 = -(qsin_4);
  double rotation_matrix_4_0_0 = qcos_4;
  double limi_rotation_4_2_2 = 0.0f;
  double limi_rotation_4_2_1 = -(rotation_matrix_4_1_1);
  double limi_rotation_4_2_0 = -(rotation_matrix_4_1_0);
  double limi_rotation_4_1_2 = 1.0f;
  double limi_rotation_4_1_1 = 0.0f;
  double limi_rotation_4_1_0 = 0.0f;
  double limi_rotation_4_0_2 = 0.0f;
  double limi_rotation_4_0_1 = rotation_matrix_4_0_1;
  double limi_rotation_4_0_0 = rotation_matrix_4_0_0;
  double v_linear_4_2 = data_v_4_2;
  double v_linear_4_1 = data_v_4_1;
  double v_linear_4_0 = data_v_4_0;
  double v_angular_4_2 = v_4;
  double v_angular_4_1 = data_v_4_4;
  double v_angular_4_0 = data_v_4_3;
  double parent_v_linear_4_2 = new_v_3_2;
  double parent_v_linear_4_1 = new_v_3_1;
  double parent_v_linear_4_0 = new_v_3_0;
  double parent_v_angular_4_2 = new_v_3_5;
  double parent_v_angular_4_1 = new_v_3_4;
  double parent_v_angular_4_0 = new_v_3_3;
  double parent_a_gf_linear_4_2 = new_a_gf_up3_3_2;
  double parent_a_gf_linear_4_1 = new_a_gf_up3_3_1;
  double parent_a_gf_linear_4_0 = new_a_gf_up3_3_0;
  double parent_a_gf_angular_4_2 = new_a_gf_up3_3_5;
  double parent_a_gf_angular_4_1 = new_a_gf_up3_3_4;
  double parent_a_gf_angular_4_0 = new_a_gf_up3_3_3;
  double actInv1_4_0 = ((limi_translation_4_1 * parent_v_angular_4_2) - (limi_translation_4_2 * parent_v_angular_4_1));
  double actInv1_4_1 = ((limi_translation_4_2 * parent_v_angular_4_0) - (limi_translation_4_0 * parent_v_angular_4_2));
  double actInv1_4_2 = ((limi_translation_4_0 * parent_v_angular_4_1) - (limi_translation_4_1 * parent_v_angular_4_0));
  double actInv2_4_2 = (parent_v_linear_4_2 - actInv1_4_2);
  double actInv2_4_1 = (parent_v_linear_4_1 - actInv1_4_1);
  double actInv2_4_0 = (parent_v_linear_4_0 - actInv1_4_0);
  double actInv3_4_2_2 = limi_rotation_4_2_2;
  double actInv3_4_1_2 = limi_rotation_4_2_1;
  double actInv3_4_0_2 = limi_rotation_4_2_0;
  double actInv3_4_2_1 = limi_rotation_4_1_2;
  double actInv3_4_1_1 = limi_rotation_4_1_1;
  double actInv3_4_0_1 = limi_rotation_4_1_0;
  double actInv3_4_2_0 = limi_rotation_4_0_2;
  double actInv3_4_1_0 = limi_rotation_4_0_1;
  double actInv3_4_0_0 = limi_rotation_4_0_0;
  double actInv4_4_2 = ((actInv3_4_2_0 * actInv2_4_0) + ((actInv3_4_2_1 * actInv2_4_1) + (actInv3_4_2_2 * actInv2_4_2)));
  double actInv4_4_1 = ((actInv3_4_1_0 * actInv2_4_0) + ((actInv3_4_1_1 * actInv2_4_1) + (actInv3_4_1_2 * actInv2_4_2)));
  double actInv4_4_0 = ((actInv3_4_0_0 * actInv2_4_0) + ((actInv3_4_0_1 * actInv2_4_1) + (actInv3_4_0_2 * actInv2_4_2)));
  double act_inv_linear_4_2 = (v_linear_4_2 + actInv4_4_2);
  double act_inv_linear_4_1 = (v_linear_4_1 + actInv4_4_1);
  double act_inv_linear_4_0 = (v_linear_4_0 + actInv4_4_0);
  double actInv5_4_2 = ((actInv3_4_2_0 * parent_v_angular_4_0) + ((actInv3_4_2_1 * parent_v_angular_4_1) + (actInv3_4_2_2 * parent_v_angular_4_2)));
  double actInv5_4_1 = ((actInv3_4_1_0 * parent_v_angular_4_0) + ((actInv3_4_1_1 * parent_v_angular_4_1) + (actInv3_4_1_2 * parent_v_angular_4_2)));
  double actInv5_4_0 = ((actInv3_4_0_0 * parent_v_angular_4_0) + ((actInv3_4_0_1 * parent_v_angular_4_1) + (actInv3_4_0_2 * parent_v_angular_4_2)));
  double act_inv_angular_4_2 = (v_angular_4_2 + actInv5_4_2);
  double act_inv_angular_4_1 = (v_angular_4_1 + actInv5_4_1);
  double act_inv_angular_4_0 = (v_angular_4_0 + actInv5_4_0);
  double minus_m_w_4 = v_4;
  double temp98 = -(minus_m_w_4);
  double temp97 = -(temp98);
  double alpha_cross1_linear_4 = (temp97 * act_inv_linear_4_1);
  double temp99 = -(minus_m_w_4);
  double alpha_cross2_linear_4 = (temp99 * act_inv_linear_4_0);
  double alpha_cross_linear_4_2 = 0.0f;
  double alpha_cross_linear_4_1 = alpha_cross2_linear_4;
  double alpha_cross_linear_4_0 = alpha_cross1_linear_4;
  double temp101 = -(minus_m_w_4);
  double temp100 = -(temp101);
  double alpha_cross1_angular_4 = (temp100 * act_inv_angular_4_1);
  double temp102 = -(minus_m_w_4);
  double alpha_cross2_angular_4 = (temp102 * act_inv_angular_4_0);
  double alpha_cross_angular_4_2 = 0.0f;
  double alpha_cross_angular_4_1 = alpha_cross2_angular_4;
  double alpha_cross_angular_4_0 = alpha_cross1_angular_4;
  double new_a_gf_4_5 = alpha_cross_angular_4_2;
  double new_a_gf_4_4 = alpha_cross_angular_4_1;
  double new_a_gf_4_3 = alpha_cross_angular_4_0;
  double new_a_gf_4_2 = alpha_cross_linear_4_2;
  double new_a_gf_4_1 = alpha_cross_linear_4_1;
  double new_a_gf_4_0 = alpha_cross_linear_4_0;
  double new_a_gf_up1_4 = (a_4 + new_a_gf_4_5);
  double new_a_gf2_linear_4_2 = new_a_gf_4_2;
  double new_a_gf2_linear_4_1 = new_a_gf_4_1;
  double new_a_gf2_linear_4_0 = new_a_gf_4_0;
  double new_a_gf2_angular_4_2 = new_a_gf_up1_4;
  double new_a_gf2_angular_4_1 = new_a_gf_4_4;
  double new_a_gf2_angular_4_0 = new_a_gf_4_3;
  double actInv1_2_4_0 = ((limi_translation_4_1 * parent_a_gf_angular_4_2) - (limi_translation_4_2 * parent_a_gf_angular_4_1));
  double actInv1_2_4_1 = ((limi_translation_4_2 * parent_a_gf_angular_4_0) - (limi_translation_4_0 * parent_a_gf_angular_4_2));
  double actInv1_2_4_2 = ((limi_translation_4_0 * parent_a_gf_angular_4_1) - (limi_translation_4_1 * parent_a_gf_angular_4_0));
  double actInv2_2_4_2 = (parent_a_gf_linear_4_2 - actInv1_2_4_2);
  double actInv2_2_4_1 = (parent_a_gf_linear_4_1 - actInv1_2_4_1);
  double actInv2_2_4_0 = (parent_a_gf_linear_4_0 - actInv1_2_4_0);
  double actInv3_2_4_2_2 = limi_rotation_4_2_2;
  double actInv3_2_4_1_2 = limi_rotation_4_2_1;
  double actInv3_2_4_0_2 = limi_rotation_4_2_0;
  double actInv3_2_4_2_1 = limi_rotation_4_1_2;
  double actInv3_2_4_1_1 = limi_rotation_4_1_1;
  double actInv3_2_4_0_1 = limi_rotation_4_1_0;
  double actInv3_2_4_2_0 = limi_rotation_4_0_2;
  double actInv3_2_4_1_0 = limi_rotation_4_0_1;
  double actInv3_2_4_0_0 = limi_rotation_4_0_0;
  double actInv4_2_4_2 = ((actInv3_2_4_2_0 * actInv2_2_4_0) + ((actInv3_2_4_2_1 * actInv2_2_4_1) + (actInv3_2_4_2_2 * actInv2_2_4_2)));
  double actInv4_2_4_1 = ((actInv3_2_4_1_0 * actInv2_2_4_0) + ((actInv3_2_4_1_1 * actInv2_2_4_1) + (actInv3_2_4_1_2 * actInv2_2_4_2)));
  double actInv4_2_4_0 = ((actInv3_2_4_0_0 * actInv2_2_4_0) + ((actInv3_2_4_0_1 * actInv2_2_4_1) + (actInv3_2_4_0_2 * actInv2_2_4_2)));
  double new_linear_up2_2_4_2 = (new_a_gf2_linear_4_2 + actInv4_2_4_2);
  double new_linear_up2_2_4_1 = (new_a_gf2_linear_4_1 + actInv4_2_4_1);
  double new_linear_up2_2_4_0 = (new_a_gf2_linear_4_0 + actInv4_2_4_0);
  double actInv5_2_4_2 = ((actInv3_2_4_2_0 * parent_a_gf_angular_4_0) + ((actInv3_2_4_2_1 * parent_a_gf_angular_4_1) + (actInv3_2_4_2_2 * parent_a_gf_angular_4_2)));
  double actInv5_2_4_1 = ((actInv3_2_4_1_0 * parent_a_gf_angular_4_0) + ((actInv3_2_4_1_1 * parent_a_gf_angular_4_1) + (actInv3_2_4_1_2 * parent_a_gf_angular_4_2)));
  double actInv5_2_4_0 = ((actInv3_2_4_0_0 * parent_a_gf_angular_4_0) + ((actInv3_2_4_0_1 * parent_a_gf_angular_4_1) + (actInv3_2_4_0_2 * parent_a_gf_angular_4_2)));
  double new_angular_up2_2_4_2 = (new_a_gf2_angular_4_2 + actInv5_2_4_2);
  double new_angular_up2_2_4_1 = (new_a_gf2_angular_4_1 + actInv5_2_4_1);
  double new_angular_up2_2_4_0 = (new_a_gf2_angular_4_0 + actInv5_2_4_0);
  double new_a_gf_up3_4_5 = new_angular_up2_2_4_2;
  double new_a_gf_up3_4_4 = new_angular_up2_2_4_1;
  double new_a_gf_up3_4_3 = new_angular_up2_2_4_0;
  double new_a_gf_up3_4_2 = new_linear_up2_2_4_2;
  double new_a_gf_up3_4_1 = new_linear_up2_2_4_1;
  double new_a_gf_up3_4_0 = new_linear_up2_2_4_0;
  double h_linear_1_4_0 = ((lever_4_1 * act_inv_angular_4_2) - (lever_4_2 * act_inv_angular_4_1));
  double h_linear_1_4_1 = ((lever_4_2 * act_inv_angular_4_0) - (lever_4_0 * act_inv_angular_4_2));
  double h_linear_1_4_2 = ((lever_4_0 * act_inv_angular_4_1) - (lever_4_1 * act_inv_angular_4_0));
  double h_linear_2_4_2 = (act_inv_linear_4_2 - h_linear_1_4_2);
  double h_linear_2_4_1 = (act_inv_linear_4_1 - h_linear_1_4_1);
  double h_linear_2_4_0 = (act_inv_linear_4_0 - h_linear_1_4_0);
  double h_linear_4_2 = (h_linear_2_4_2 * masses_4);
  double h_linear_4_1 = (h_linear_2_4_1 * masses_4);
  double h_linear_4_0 = (h_linear_2_4_0 * masses_4);
  double temp103 = (inertia_4_0_0 * act_inv_angular_4_0);
  double temp104 = (inertia_4_0_1 * act_inv_angular_4_1);
  double rhsMult1_temp_4 = (temp103 + temp104);
  double temp105 = (inertia_4_0_2 * act_inv_angular_4_2);
  double rhsMult1_4 = (rhsMult1_temp_4 + temp105);
  double temp106 = (inertia_4_0_1 * act_inv_angular_4_0);
  double temp107 = (inertia_4_1_1 * act_inv_angular_4_1);
  double rhsMult2_temp_4 = (temp106 + temp107);
  double temp108 = (inertia_4_1_2 * act_inv_angular_4_2);
  double rhsMult2_4 = (rhsMult2_temp_4 + temp108);
  double temp109 = (inertia_4_0_2 * act_inv_angular_4_0);
  double temp110 = (inertia_4_1_2 * act_inv_angular_4_1);
  double rhsMult3_temp_4 = (temp109 + temp110);
  double temp111 = (inertia_4_2_2 * act_inv_angular_4_2);
  double rhsMult3_4 = (rhsMult3_temp_4 + temp111);
  double rhsMult_4_2 = rhsMult3_4;
  double rhsMult_4_1 = rhsMult2_4;
  double rhsMult_4_0 = rhsMult1_4;
  double h_angular_first_4_2 = rhsMult_4_2;
  double h_angular_first_4_1 = rhsMult_4_1;
  double h_angular_first_4_0 = rhsMult_4_0;
  double h_angular_1_4_0 = ((lever_4_1 * h_linear_4_2) - (lever_4_2 * h_linear_4_1));
  double h_angular_1_4_1 = ((lever_4_2 * h_linear_4_0) - (lever_4_0 * h_linear_4_2));
  double h_angular_1_4_2 = ((lever_4_0 * h_linear_4_1) - (lever_4_1 * h_linear_4_0));
  double h_angular_4_2 = (h_angular_first_4_2 + h_angular_1_4_2);
  double h_angular_4_1 = (h_angular_first_4_1 + h_angular_1_4_1);
  double h_angular_4_0 = (h_angular_first_4_0 + h_angular_1_4_0);
  double f_linear_1_4_0 = ((lever_4_1 * new_angular_up2_2_4_2) - (lever_4_2 * new_angular_up2_2_4_1));
  double f_linear_1_4_1 = ((lever_4_2 * new_angular_up2_2_4_0) - (lever_4_0 * new_angular_up2_2_4_2));
  double f_linear_1_4_2 = ((lever_4_0 * new_angular_up2_2_4_1) - (lever_4_1 * new_angular_up2_2_4_0));
  double f_linear_2_4_2 = (new_linear_up2_2_4_2 - f_linear_1_4_2);
  double f_linear_2_4_1 = (new_linear_up2_2_4_1 - f_linear_1_4_1);
  double f_linear_2_4_0 = (new_linear_up2_2_4_0 - f_linear_1_4_0);
  double f_linear_3_4_2 = (f_linear_2_4_2 * masses_4);
  double f_linear_3_4_1 = (f_linear_2_4_1 * masses_4);
  double f_linear_3_4_0 = (f_linear_2_4_0 * masses_4);
  double temp112 = (inertia_4_0_0 * new_angular_up2_2_4_0);
  double temp113 = (inertia_4_0_1 * new_angular_up2_2_4_1);
  double rhsMult1_2_temp_4 = (temp112 + temp113);
  double temp114 = (inertia_4_0_2 * new_angular_up2_2_4_2);
  double rhsMult1_2_4 = (rhsMult1_2_temp_4 + temp114);
  double temp115 = (inertia_4_0_1 * new_angular_up2_2_4_0);
  double temp116 = (inertia_4_1_1 * new_angular_up2_2_4_1);
  double rhsMult2_2_temp_4 = (temp115 + temp116);
  double temp117 = (inertia_4_1_2 * new_angular_up2_2_4_2);
  double rhsMult2_2_4 = (rhsMult2_2_temp_4 + temp117);
  double temp118 = (inertia_4_0_2 * new_angular_up2_2_4_0);
  double temp119 = (inertia_4_1_2 * new_angular_up2_2_4_1);
  double rhsMult3_2_temp_4 = (temp118 + temp119);
  double temp120 = (inertia_4_2_2 * new_angular_up2_2_4_2);
  double rhsMult3_2_4 = (rhsMult3_2_temp_4 + temp120);
  double rhsMult_2_4_2 = rhsMult3_2_4;
  double rhsMult_2_4_1 = rhsMult2_2_4;
  double rhsMult_2_4_0 = rhsMult1_2_4;
  double f_angular_first_4_2 = rhsMult_2_4_2;
  double f_angular_first_4_1 = rhsMult_2_4_1;
  double f_angular_first_4_0 = rhsMult_2_4_0;
  double f_angular_1_4_0 = ((lever_4_1 * f_linear_3_4_2) - (lever_4_2 * f_linear_3_4_1));
  double f_angular_1_4_1 = ((lever_4_2 * f_linear_3_4_0) - (lever_4_0 * f_linear_3_4_2));
  double f_angular_1_4_2 = ((lever_4_0 * f_linear_3_4_1) - (lever_4_1 * f_linear_3_4_0));
  double f_angular_2_4_2 = (f_angular_first_4_2 + f_angular_1_4_2);
  double f_angular_2_4_1 = (f_angular_first_4_1 + f_angular_1_4_1);
  double f_angular_2_4_0 = (f_angular_first_4_0 + f_angular_1_4_0);
  double f_linear_4_temp_4_0 = ((act_inv_angular_4_1 * h_linear_4_2) - (act_inv_angular_4_2 * h_linear_4_1));
  double f_linear_4_temp_4_1 = ((act_inv_angular_4_2 * h_linear_4_0) - (act_inv_angular_4_0 * h_linear_4_2));
  double f_linear_4_temp_4_2 = ((act_inv_angular_4_0 * h_linear_4_1) - (act_inv_angular_4_1 * h_linear_4_0));
  double f_linear_4_4_2 = (f_linear_3_4_2 + f_linear_4_temp_4_2);
  double f_linear_4_4_1 = (f_linear_3_4_1 + f_linear_4_temp_4_1);
  double f_linear_4_4_0 = (f_linear_3_4_0 + f_linear_4_temp_4_0);
  double f_angular_3_temp_4_0 = ((act_inv_angular_4_1 * h_angular_first_4_2) - (act_inv_angular_4_2 * h_angular_first_4_1));
  double f_angular_3_temp_4_1 = ((act_inv_angular_4_2 * h_angular_first_4_0) - (act_inv_angular_4_0 * h_angular_first_4_2));
  double f_angular_3_temp_4_2 = ((act_inv_angular_4_0 * h_angular_first_4_1) - (act_inv_angular_4_1 * h_angular_first_4_0));
  double f_angular_3_4_2 = (f_angular_2_4_2 + f_angular_3_temp_4_2);
  double f_angular_3_4_1 = (f_angular_2_4_1 + f_angular_3_temp_4_1);
  double f_angular_3_4_0 = (f_angular_2_4_0 + f_angular_3_temp_4_0);
  double f_angular_4_temp_4_0 = ((act_inv_linear_4_1 * h_linear_4_2) - (act_inv_linear_4_2 * h_linear_4_1));
  double f_angular_4_temp_4_1 = ((act_inv_linear_4_2 * h_linear_4_0) - (act_inv_linear_4_0 * h_linear_4_2));
  double f_angular_4_temp_4_2 = ((act_inv_linear_4_0 * h_linear_4_1) - (act_inv_linear_4_1 * h_linear_4_0));
  double f_angular_4_4_2 = (f_angular_3_4_2 + f_angular_4_temp_4_2);
  double f_angular_4_4_1 = (f_angular_3_4_1 + f_angular_4_temp_4_1);
  double f_angular_4_4_0 = (f_angular_3_4_0 + f_angular_4_temp_4_0);
  double h_rnea_firstpass4_5 = h_angular_4_2;
  double h_rnea_firstpass4_4 = h_angular_4_1;
  double h_rnea_firstpass4_3 = h_angular_4_0;
  double h_rnea_firstpass4_2 = h_linear_4_2;
  double h_rnea_firstpass4_1 = h_linear_4_1;
  double h_rnea_firstpass4_0 = h_linear_4_0;
  double f_rnea_firstpass4_5 = f_angular_4_4_2;
  double f_rnea_firstpass4_4 = f_angular_4_4_1;
  double f_rnea_firstpass4_3 = f_angular_4_4_0;
  double f_rnea_firstpass4_2 = f_linear_4_4_2;
  double f_rnea_firstpass4_1 = f_linear_4_4_1;
  double f_rnea_firstpass4_0 = f_linear_4_4_0;
  double new_v_4_5 = act_inv_angular_4_2;
  double new_v_4_4 = act_inv_angular_4_1;
  double new_v_4_3 = act_inv_angular_4_0;
  double new_v_4_2 = act_inv_linear_4_2;
  double new_v_4_1 = act_inv_linear_4_1;
  double new_v_4_0 = act_inv_linear_4_0;
  double rotation_matrix_5_2_2 = 1.0f;
  double rotation_matrix_5_2_1 = 0.0f;
  double rotation_matrix_5_2_0 = 0.0f;
  double rotation_matrix_5_1_2 = 0.0f;
  double rotation_matrix_5_1_1 = qcos_5;
  double rotation_matrix_5_1_0 = qsin_5;
  double rotation_matrix_5_0_2 = 0.0f;
  double rotation_matrix_5_0_1 = -(qsin_5);
  double rotation_matrix_5_0_0 = qcos_5;
  double limi_rotation_5_2_2 = 0.0f;
  double limi_rotation_5_2_1 = rotation_matrix_5_1_1;
  double limi_rotation_5_2_0 = rotation_matrix_5_1_0;
  double limi_rotation_5_1_2 = -1.0f;
  double limi_rotation_5_1_1 = 0.0f;
  double limi_rotation_5_1_0 = 0.0f;
  double limi_rotation_5_0_2 = 0.0f;
  double limi_rotation_5_0_1 = rotation_matrix_5_0_1;
  double limi_rotation_5_0_0 = rotation_matrix_5_0_0;
  double v_linear_5_2 = data_v_5_2;
  double v_linear_5_1 = data_v_5_1;
  double v_linear_5_0 = data_v_5_0;
  double v_angular_5_2 = v_5;
  double v_angular_5_1 = data_v_5_4;
  double v_angular_5_0 = data_v_5_3;
  double parent_v_linear_5_2 = new_v_4_2;
  double parent_v_linear_5_1 = new_v_4_1;
  double parent_v_linear_5_0 = new_v_4_0;
  double parent_v_angular_5_2 = new_v_4_5;
  double parent_v_angular_5_1 = new_v_4_4;
  double parent_v_angular_5_0 = new_v_4_3;
  double parent_a_gf_linear_5_2 = new_a_gf_up3_4_2;
  double parent_a_gf_linear_5_1 = new_a_gf_up3_4_1;
  double parent_a_gf_linear_5_0 = new_a_gf_up3_4_0;
  double parent_a_gf_angular_5_2 = new_a_gf_up3_4_5;
  double parent_a_gf_angular_5_1 = new_a_gf_up3_4_4;
  double parent_a_gf_angular_5_0 = new_a_gf_up3_4_3;
  double actInv1_5_0 = ((limi_translation_5_1 * parent_v_angular_5_2) - (limi_translation_5_2 * parent_v_angular_5_1));
  double actInv1_5_1 = ((limi_translation_5_2 * parent_v_angular_5_0) - (limi_translation_5_0 * parent_v_angular_5_2));
  double actInv1_5_2 = ((limi_translation_5_0 * parent_v_angular_5_1) - (limi_translation_5_1 * parent_v_angular_5_0));
  double actInv2_5_2 = (parent_v_linear_5_2 - actInv1_5_2);
  double actInv2_5_1 = (parent_v_linear_5_1 - actInv1_5_1);
  double actInv2_5_0 = (parent_v_linear_5_0 - actInv1_5_0);
  double actInv3_5_2_2 = limi_rotation_5_2_2;
  double actInv3_5_1_2 = limi_rotation_5_2_1;
  double actInv3_5_0_2 = limi_rotation_5_2_0;
  double actInv3_5_2_1 = limi_rotation_5_1_2;
  double actInv3_5_1_1 = limi_rotation_5_1_1;
  double actInv3_5_0_1 = limi_rotation_5_1_0;
  double actInv3_5_2_0 = limi_rotation_5_0_2;
  double actInv3_5_1_0 = limi_rotation_5_0_1;
  double actInv3_5_0_0 = limi_rotation_5_0_0;
  double actInv4_5_2 = ((actInv3_5_2_0 * actInv2_5_0) + ((actInv3_5_2_1 * actInv2_5_1) + (actInv3_5_2_2 * actInv2_5_2)));
  double actInv4_5_1 = ((actInv3_5_1_0 * actInv2_5_0) + ((actInv3_5_1_1 * actInv2_5_1) + (actInv3_5_1_2 * actInv2_5_2)));
  double actInv4_5_0 = ((actInv3_5_0_0 * actInv2_5_0) + ((actInv3_5_0_1 * actInv2_5_1) + (actInv3_5_0_2 * actInv2_5_2)));
  double act_inv_linear_5_2 = (v_linear_5_2 + actInv4_5_2);
  double act_inv_linear_5_1 = (v_linear_5_1 + actInv4_5_1);
  double act_inv_linear_5_0 = (v_linear_5_0 + actInv4_5_0);
  double actInv5_5_2 = ((actInv3_5_2_0 * parent_v_angular_5_0) + ((actInv3_5_2_1 * parent_v_angular_5_1) + (actInv3_5_2_2 * parent_v_angular_5_2)));
  double actInv5_5_1 = ((actInv3_5_1_0 * parent_v_angular_5_0) + ((actInv3_5_1_1 * parent_v_angular_5_1) + (actInv3_5_1_2 * parent_v_angular_5_2)));
  double actInv5_5_0 = ((actInv3_5_0_0 * parent_v_angular_5_0) + ((actInv3_5_0_1 * parent_v_angular_5_1) + (actInv3_5_0_2 * parent_v_angular_5_2)));
  double act_inv_angular_5_2 = (v_angular_5_2 + actInv5_5_2);
  double act_inv_angular_5_1 = (v_angular_5_1 + actInv5_5_1);
  double act_inv_angular_5_0 = (v_angular_5_0 + actInv5_5_0);
  double minus_m_w_5 = v_5;
  double temp122 = -(minus_m_w_5);
  double temp121 = -(temp122);
  double alpha_cross1_linear_5 = (temp121 * act_inv_linear_5_1);
  double temp123 = -(minus_m_w_5);
  double alpha_cross2_linear_5 = (temp123 * act_inv_linear_5_0);
  double alpha_cross_linear_5_2 = 0.0f;
  double alpha_cross_linear_5_1 = alpha_cross2_linear_5;
  double alpha_cross_linear_5_0 = alpha_cross1_linear_5;
  double temp125 = -(minus_m_w_5);
  double temp124 = -(temp125);
  double alpha_cross1_angular_5 = (temp124 * act_inv_angular_5_1);
  double temp126 = -(minus_m_w_5);
  double alpha_cross2_angular_5 = (temp126 * act_inv_angular_5_0);
  double alpha_cross_angular_5_2 = 0.0f;
  double alpha_cross_angular_5_1 = alpha_cross2_angular_5;
  double alpha_cross_angular_5_0 = alpha_cross1_angular_5;
  double new_a_gf_5_5 = alpha_cross_angular_5_2;
  double new_a_gf_5_4 = alpha_cross_angular_5_1;
  double new_a_gf_5_3 = alpha_cross_angular_5_0;
  double new_a_gf_5_2 = alpha_cross_linear_5_2;
  double new_a_gf_5_1 = alpha_cross_linear_5_1;
  double new_a_gf_5_0 = alpha_cross_linear_5_0;
  double new_a_gf_up1_5 = (a_5 + new_a_gf_5_5);
  double new_a_gf2_linear_5_2 = new_a_gf_5_2;
  double new_a_gf2_linear_5_1 = new_a_gf_5_1;
  double new_a_gf2_linear_5_0 = new_a_gf_5_0;
  double new_a_gf2_angular_5_2 = new_a_gf_up1_5;
  double new_a_gf2_angular_5_1 = new_a_gf_5_4;
  double new_a_gf2_angular_5_0 = new_a_gf_5_3;
  double actInv1_2_5_0 = ((limi_translation_5_1 * parent_a_gf_angular_5_2) - (limi_translation_5_2 * parent_a_gf_angular_5_1));
  double actInv1_2_5_1 = ((limi_translation_5_2 * parent_a_gf_angular_5_0) - (limi_translation_5_0 * parent_a_gf_angular_5_2));
  double actInv1_2_5_2 = ((limi_translation_5_0 * parent_a_gf_angular_5_1) - (limi_translation_5_1 * parent_a_gf_angular_5_0));
  double actInv2_2_5_2 = (parent_a_gf_linear_5_2 - actInv1_2_5_2);
  double actInv2_2_5_1 = (parent_a_gf_linear_5_1 - actInv1_2_5_1);
  double actInv2_2_5_0 = (parent_a_gf_linear_5_0 - actInv1_2_5_0);
  double actInv3_2_5_2_2 = limi_rotation_5_2_2;
  double actInv3_2_5_1_2 = limi_rotation_5_2_1;
  double actInv3_2_5_0_2 = limi_rotation_5_2_0;
  double actInv3_2_5_2_1 = limi_rotation_5_1_2;
  double actInv3_2_5_1_1 = limi_rotation_5_1_1;
  double actInv3_2_5_0_1 = limi_rotation_5_1_0;
  double actInv3_2_5_2_0 = limi_rotation_5_0_2;
  double actInv3_2_5_1_0 = limi_rotation_5_0_1;
  double actInv3_2_5_0_0 = limi_rotation_5_0_0;
  double actInv4_2_5_2 = ((actInv3_2_5_2_0 * actInv2_2_5_0) + ((actInv3_2_5_2_1 * actInv2_2_5_1) + (actInv3_2_5_2_2 * actInv2_2_5_2)));
  double actInv4_2_5_1 = ((actInv3_2_5_1_0 * actInv2_2_5_0) + ((actInv3_2_5_1_1 * actInv2_2_5_1) + (actInv3_2_5_1_2 * actInv2_2_5_2)));
  double actInv4_2_5_0 = ((actInv3_2_5_0_0 * actInv2_2_5_0) + ((actInv3_2_5_0_1 * actInv2_2_5_1) + (actInv3_2_5_0_2 * actInv2_2_5_2)));
  double new_linear_up2_2_5_2 = (new_a_gf2_linear_5_2 + actInv4_2_5_2);
  double new_linear_up2_2_5_1 = (new_a_gf2_linear_5_1 + actInv4_2_5_1);
  double new_linear_up2_2_5_0 = (new_a_gf2_linear_5_0 + actInv4_2_5_0);
  double actInv5_2_5_2 = ((actInv3_2_5_2_0 * parent_a_gf_angular_5_0) + ((actInv3_2_5_2_1 * parent_a_gf_angular_5_1) + (actInv3_2_5_2_2 * parent_a_gf_angular_5_2)));
  double actInv5_2_5_1 = ((actInv3_2_5_1_0 * parent_a_gf_angular_5_0) + ((actInv3_2_5_1_1 * parent_a_gf_angular_5_1) + (actInv3_2_5_1_2 * parent_a_gf_angular_5_2)));
  double actInv5_2_5_0 = ((actInv3_2_5_0_0 * parent_a_gf_angular_5_0) + ((actInv3_2_5_0_1 * parent_a_gf_angular_5_1) + (actInv3_2_5_0_2 * parent_a_gf_angular_5_2)));
  double new_angular_up2_2_5_2 = (new_a_gf2_angular_5_2 + actInv5_2_5_2);
  double new_angular_up2_2_5_1 = (new_a_gf2_angular_5_1 + actInv5_2_5_1);
  double new_angular_up2_2_5_0 = (new_a_gf2_angular_5_0 + actInv5_2_5_0);
  double new_a_gf_up3_5_5 = new_angular_up2_2_5_2;
  double new_a_gf_up3_5_4 = new_angular_up2_2_5_1;
  double new_a_gf_up3_5_3 = new_angular_up2_2_5_0;
  double new_a_gf_up3_5_2 = new_linear_up2_2_5_2;
  double new_a_gf_up3_5_1 = new_linear_up2_2_5_1;
  double new_a_gf_up3_5_0 = new_linear_up2_2_5_0;
  double h_linear_1_5_0 = ((lever_5_1 * act_inv_angular_5_2) - (lever_5_2 * act_inv_angular_5_1));
  double h_linear_1_5_1 = ((lever_5_2 * act_inv_angular_5_0) - (lever_5_0 * act_inv_angular_5_2));
  double h_linear_1_5_2 = ((lever_5_0 * act_inv_angular_5_1) - (lever_5_1 * act_inv_angular_5_0));
  double h_linear_2_5_2 = (act_inv_linear_5_2 - h_linear_1_5_2);
  double h_linear_2_5_1 = (act_inv_linear_5_1 - h_linear_1_5_1);
  double h_linear_2_5_0 = (act_inv_linear_5_0 - h_linear_1_5_0);
  double h_linear_5_2 = (h_linear_2_5_2 * masses_5);
  double h_linear_5_1 = (h_linear_2_5_1 * masses_5);
  double h_linear_5_0 = (h_linear_2_5_0 * masses_5);
  double temp127 = (inertia_5_0_0 * act_inv_angular_5_0);
  double temp128 = (inertia_5_0_1 * act_inv_angular_5_1);
  double rhsMult1_temp_5 = (temp127 + temp128);
  double temp129 = (inertia_5_0_2 * act_inv_angular_5_2);
  double rhsMult1_5 = (rhsMult1_temp_5 + temp129);
  double temp130 = (inertia_5_0_1 * act_inv_angular_5_0);
  double temp131 = (inertia_5_1_1 * act_inv_angular_5_1);
  double rhsMult2_temp_5 = (temp130 + temp131);
  double temp132 = (inertia_5_1_2 * act_inv_angular_5_2);
  double rhsMult2_5 = (rhsMult2_temp_5 + temp132);
  double temp133 = (inertia_5_0_2 * act_inv_angular_5_0);
  double temp134 = (inertia_5_1_2 * act_inv_angular_5_1);
  double rhsMult3_temp_5 = (temp133 + temp134);
  double temp135 = (inertia_5_2_2 * act_inv_angular_5_2);
  double rhsMult3_5 = (rhsMult3_temp_5 + temp135);
  double rhsMult_5_2 = rhsMult3_5;
  double rhsMult_5_1 = rhsMult2_5;
  double rhsMult_5_0 = rhsMult1_5;
  double h_angular_first_5_2 = rhsMult_5_2;
  double h_angular_first_5_1 = rhsMult_5_1;
  double h_angular_first_5_0 = rhsMult_5_0;
  double h_angular_1_5_0 = ((lever_5_1 * h_linear_5_2) - (lever_5_2 * h_linear_5_1));
  double h_angular_1_5_1 = ((lever_5_2 * h_linear_5_0) - (lever_5_0 * h_linear_5_2));
  double h_angular_1_5_2 = ((lever_5_0 * h_linear_5_1) - (lever_5_1 * h_linear_5_0));
  double h_angular_5_2 = (h_angular_first_5_2 + h_angular_1_5_2);
  double h_angular_5_1 = (h_angular_first_5_1 + h_angular_1_5_1);
  double h_angular_5_0 = (h_angular_first_5_0 + h_angular_1_5_0);
  double f_linear_1_5_0 = ((lever_5_1 * new_angular_up2_2_5_2) - (lever_5_2 * new_angular_up2_2_5_1));
  double f_linear_1_5_1 = ((lever_5_2 * new_angular_up2_2_5_0) - (lever_5_0 * new_angular_up2_2_5_2));
  double f_linear_1_5_2 = ((lever_5_0 * new_angular_up2_2_5_1) - (lever_5_1 * new_angular_up2_2_5_0));
  double f_linear_2_5_2 = (new_linear_up2_2_5_2 - f_linear_1_5_2);
  double f_linear_2_5_1 = (new_linear_up2_2_5_1 - f_linear_1_5_1);
  double f_linear_2_5_0 = (new_linear_up2_2_5_0 - f_linear_1_5_0);
  double f_linear_3_5_2 = (f_linear_2_5_2 * masses_5);
  double f_linear_3_5_1 = (f_linear_2_5_1 * masses_5);
  double f_linear_3_5_0 = (f_linear_2_5_0 * masses_5);
  double temp136 = (inertia_5_0_0 * new_angular_up2_2_5_0);
  double temp137 = (inertia_5_0_1 * new_angular_up2_2_5_1);
  double rhsMult1_2_temp_5 = (temp136 + temp137);
  double temp138 = (inertia_5_0_2 * new_angular_up2_2_5_2);
  double rhsMult1_2_5 = (rhsMult1_2_temp_5 + temp138);
  double temp139 = (inertia_5_0_1 * new_angular_up2_2_5_0);
  double temp140 = (inertia_5_1_1 * new_angular_up2_2_5_1);
  double rhsMult2_2_temp_5 = (temp139 + temp140);
  double temp141 = (inertia_5_1_2 * new_angular_up2_2_5_2);
  double rhsMult2_2_5 = (rhsMult2_2_temp_5 + temp141);
  double temp142 = (inertia_5_0_2 * new_angular_up2_2_5_0);
  double temp143 = (inertia_5_1_2 * new_angular_up2_2_5_1);
  double rhsMult3_2_temp_5 = (temp142 + temp143);
  double temp144 = (inertia_5_2_2 * new_angular_up2_2_5_2);
  double rhsMult3_2_5 = (rhsMult3_2_temp_5 + temp144);
  double rhsMult_2_5_2 = rhsMult3_2_5;
  double rhsMult_2_5_1 = rhsMult2_2_5;
  double rhsMult_2_5_0 = rhsMult1_2_5;
  double f_angular_first_5_2 = rhsMult_2_5_2;
  double f_angular_first_5_1 = rhsMult_2_5_1;
  double f_angular_first_5_0 = rhsMult_2_5_0;
  double f_angular_1_5_0 = ((lever_5_1 * f_linear_3_5_2) - (lever_5_2 * f_linear_3_5_1));
  double f_angular_1_5_1 = ((lever_5_2 * f_linear_3_5_0) - (lever_5_0 * f_linear_3_5_2));
  double f_angular_1_5_2 = ((lever_5_0 * f_linear_3_5_1) - (lever_5_1 * f_linear_3_5_0));
  double f_angular_2_5_2 = (f_angular_first_5_2 + f_angular_1_5_2);
  double f_angular_2_5_1 = (f_angular_first_5_1 + f_angular_1_5_1);
  double f_angular_2_5_0 = (f_angular_first_5_0 + f_angular_1_5_0);
  double f_linear_4_temp_5_0 = ((act_inv_angular_5_1 * h_linear_5_2) - (act_inv_angular_5_2 * h_linear_5_1));
  double f_linear_4_temp_5_1 = ((act_inv_angular_5_2 * h_linear_5_0) - (act_inv_angular_5_0 * h_linear_5_2));
  double f_linear_4_temp_5_2 = ((act_inv_angular_5_0 * h_linear_5_1) - (act_inv_angular_5_1 * h_linear_5_0));
  double f_linear_4_5_2 = (f_linear_3_5_2 + f_linear_4_temp_5_2);
  double f_linear_4_5_1 = (f_linear_3_5_1 + f_linear_4_temp_5_1);
  double f_linear_4_5_0 = (f_linear_3_5_0 + f_linear_4_temp_5_0);
  double f_angular_3_temp_5_0 = ((act_inv_angular_5_1 * h_angular_first_5_2) - (act_inv_angular_5_2 * h_angular_first_5_1));
  double f_angular_3_temp_5_1 = ((act_inv_angular_5_2 * h_angular_first_5_0) - (act_inv_angular_5_0 * h_angular_first_5_2));
  double f_angular_3_temp_5_2 = ((act_inv_angular_5_0 * h_angular_first_5_1) - (act_inv_angular_5_1 * h_angular_first_5_0));
  double f_angular_3_5_2 = (f_angular_2_5_2 + f_angular_3_temp_5_2);
  double f_angular_3_5_1 = (f_angular_2_5_1 + f_angular_3_temp_5_1);
  double f_angular_3_5_0 = (f_angular_2_5_0 + f_angular_3_temp_5_0);
  double f_angular_4_temp_5_0 = ((act_inv_linear_5_1 * h_linear_5_2) - (act_inv_linear_5_2 * h_linear_5_1));
  double f_angular_4_temp_5_1 = ((act_inv_linear_5_2 * h_linear_5_0) - (act_inv_linear_5_0 * h_linear_5_2));
  double f_angular_4_temp_5_2 = ((act_inv_linear_5_0 * h_linear_5_1) - (act_inv_linear_5_1 * h_linear_5_0));
  double f_angular_4_5_2 = (f_angular_3_5_2 + f_angular_4_temp_5_2);
  double f_angular_4_5_1 = (f_angular_3_5_1 + f_angular_4_temp_5_1);
  double f_angular_4_5_0 = (f_angular_3_5_0 + f_angular_4_temp_5_0);
  double h_rnea_firstpass5_5 = h_angular_5_2;
  double h_rnea_firstpass5_4 = h_angular_5_1;
  double h_rnea_firstpass5_3 = h_angular_5_0;
  double h_rnea_firstpass5_2 = h_linear_5_2;
  double h_rnea_firstpass5_1 = h_linear_5_1;
  double h_rnea_firstpass5_0 = h_linear_5_0;
  double f_rnea_firstpass5_5 = f_angular_4_5_2;
  double f_rnea_firstpass5_4 = f_angular_4_5_1;
  double f_rnea_firstpass5_3 = f_angular_4_5_0;
  double f_rnea_firstpass5_2 = f_linear_4_5_2;
  double f_rnea_firstpass5_1 = f_linear_4_5_1;
  double f_rnea_firstpass5_0 = f_linear_4_5_0;
  double new_v_5_5 = act_inv_angular_5_2;
  double new_v_5_4 = act_inv_angular_5_1;
  double new_v_5_3 = act_inv_angular_5_0;
  double new_v_5_2 = act_inv_linear_5_2;
  double new_v_5_1 = act_inv_linear_5_1;
  double new_v_5_0 = act_inv_linear_5_0;
  double data_tau_temp_5 = f_rnea_firstpass5_5;
  double f_linear_5_2 = f_rnea_firstpass5_2;
  double f_linear_5_1 = f_rnea_firstpass5_1;
  double f_linear_5_0 = f_rnea_firstpass5_0;
  double f_angular_5_2 = f_rnea_firstpass5_5;
  double f_angular_5_1 = f_rnea_firstpass5_4;
  double f_angular_5_0 = f_rnea_firstpass5_3;
  double new_f_linear_5_2 = ((limi_rotation_5_2_0 * f_linear_5_0) + ((limi_rotation_5_2_1 * f_linear_5_1) + (limi_rotation_5_2_2 * f_linear_5_2)));
  double new_f_linear_5_1 = ((limi_rotation_5_1_0 * f_linear_5_0) + ((limi_rotation_5_1_1 * f_linear_5_1) + (limi_rotation_5_1_2 * f_linear_5_2)));
  double new_f_linear_5_0 = ((limi_rotation_5_0_0 * f_linear_5_0) + ((limi_rotation_5_0_1 * f_linear_5_1) + (limi_rotation_5_0_2 * f_linear_5_2)));
  double new_f_angular_temp_5_2 = ((limi_rotation_5_2_0 * f_angular_5_0) + ((limi_rotation_5_2_1 * f_angular_5_1) + (limi_rotation_5_2_2 * f_angular_5_2)));
  double new_f_angular_temp_5_1 = ((limi_rotation_5_1_0 * f_angular_5_0) + ((limi_rotation_5_1_1 * f_angular_5_1) + (limi_rotation_5_1_2 * f_angular_5_2)));
  double new_f_angular_temp_5_0 = ((limi_rotation_5_0_0 * f_angular_5_0) + ((limi_rotation_5_0_1 * f_angular_5_1) + (limi_rotation_5_0_2 * f_angular_5_2)));
  double f_angular_cross_5_0 = ((limi_translation_5_1 * new_f_linear_5_2) - (limi_translation_5_2 * new_f_linear_5_1));
  double f_angular_cross_5_1 = ((limi_translation_5_2 * new_f_linear_5_0) - (limi_translation_5_0 * new_f_linear_5_2));
  double f_angular_cross_5_2 = ((limi_translation_5_0 * new_f_linear_5_1) - (limi_translation_5_1 * new_f_linear_5_0));
  double new_f_angular_5_2 = (new_f_angular_temp_5_2 + f_angular_cross_5_2);
  double new_f_angular_5_1 = (new_f_angular_temp_5_1 + f_angular_cross_5_1);
  double new_f_angular_5_0 = (new_f_angular_temp_5_0 + f_angular_cross_5_0);
  double new_f_5_5 = new_f_angular_5_2;
  double new_f_5_4 = new_f_angular_5_1;
  double new_f_5_3 = new_f_angular_5_0;
  double new_f_5_2 = new_f_linear_5_2;
  double new_f_5_1 = new_f_linear_5_1;
  double new_f_5_0 = new_f_linear_5_0;
  double new_data_f_parent_5_5 = (f_rnea_firstpass4_5 + new_f_5_5);
  double new_data_f_parent_5_4 = (f_rnea_firstpass4_4 + new_f_5_4);
  double new_data_f_parent_5_3 = (f_rnea_firstpass4_3 + new_f_5_3);
  double new_data_f_parent_5_2 = (f_rnea_firstpass4_2 + new_f_5_2);
  double new_data_f_parent_5_1 = (f_rnea_firstpass4_1 + new_f_5_1);
  double new_data_f_parent_5_0 = (f_rnea_firstpass4_0 + new_f_5_0);
  double data_tau_temp_4 = new_data_f_parent_5_5;
  double f_linear_4_2 = new_data_f_parent_5_2;
  double f_linear_4_1 = new_data_f_parent_5_1;
  double f_linear_4_0 = new_data_f_parent_5_0;
  double f_angular_4_2 = new_data_f_parent_5_5;
  double f_angular_4_1 = new_data_f_parent_5_4;
  double f_angular_4_0 = new_data_f_parent_5_3;
  double new_f_linear_4_2 = ((limi_rotation_4_2_0 * f_linear_4_0) + ((limi_rotation_4_2_1 * f_linear_4_1) + (limi_rotation_4_2_2 * f_linear_4_2)));
  double new_f_linear_4_1 = ((limi_rotation_4_1_0 * f_linear_4_0) + ((limi_rotation_4_1_1 * f_linear_4_1) + (limi_rotation_4_1_2 * f_linear_4_2)));
  double new_f_linear_4_0 = ((limi_rotation_4_0_0 * f_linear_4_0) + ((limi_rotation_4_0_1 * f_linear_4_1) + (limi_rotation_4_0_2 * f_linear_4_2)));
  double new_f_angular_temp_4_2 = ((limi_rotation_4_2_0 * f_angular_4_0) + ((limi_rotation_4_2_1 * f_angular_4_1) + (limi_rotation_4_2_2 * f_angular_4_2)));
  double new_f_angular_temp_4_1 = ((limi_rotation_4_1_0 * f_angular_4_0) + ((limi_rotation_4_1_1 * f_angular_4_1) + (limi_rotation_4_1_2 * f_angular_4_2)));
  double new_f_angular_temp_4_0 = ((limi_rotation_4_0_0 * f_angular_4_0) + ((limi_rotation_4_0_1 * f_angular_4_1) + (limi_rotation_4_0_2 * f_angular_4_2)));
  double f_angular_cross_4_0 = ((limi_translation_4_1 * new_f_linear_4_2) - (limi_translation_4_2 * new_f_linear_4_1));
  double f_angular_cross_4_1 = ((limi_translation_4_2 * new_f_linear_4_0) - (limi_translation_4_0 * new_f_linear_4_2));
  double f_angular_cross_4_2 = ((limi_translation_4_0 * new_f_linear_4_1) - (limi_translation_4_1 * new_f_linear_4_0));
  double new_f_angular_4_2 = (new_f_angular_temp_4_2 + f_angular_cross_4_2);
  double new_f_angular_4_1 = (new_f_angular_temp_4_1 + f_angular_cross_4_1);
  double new_f_angular_4_0 = (new_f_angular_temp_4_0 + f_angular_cross_4_0);
  double new_f_4_5 = new_f_angular_4_2;
  double new_f_4_4 = new_f_angular_4_1;
  double new_f_4_3 = new_f_angular_4_0;
  double new_f_4_2 = new_f_linear_4_2;
  double new_f_4_1 = new_f_linear_4_1;
  double new_f_4_0 = new_f_linear_4_0;
  double new_data_f_parent_4_5 = (f_rnea_firstpass3_5 + new_f_4_5);
  double new_data_f_parent_4_4 = (f_rnea_firstpass3_4 + new_f_4_4);
  double new_data_f_parent_4_3 = (f_rnea_firstpass3_3 + new_f_4_3);
  double new_data_f_parent_4_2 = (f_rnea_firstpass3_2 + new_f_4_2);
  double new_data_f_parent_4_1 = (f_rnea_firstpass3_1 + new_f_4_1);
  double new_data_f_parent_4_0 = (f_rnea_firstpass3_0 + new_f_4_0);
  double data_tau_temp_3 = new_data_f_parent_4_5;
  double f_linear_3_2 = new_data_f_parent_4_2;
  double f_linear_3_1 = new_data_f_parent_4_1;
  double f_linear_3_0 = new_data_f_parent_4_0;
  double f_angular_3_2 = new_data_f_parent_4_5;
  double f_angular_3_1 = new_data_f_parent_4_4;
  double f_angular_3_0 = new_data_f_parent_4_3;
  double new_f_linear_3_2 = ((limi_rotation_3_2_0 * f_linear_3_0) + ((limi_rotation_3_2_1 * f_linear_3_1) + (limi_rotation_3_2_2 * f_linear_3_2)));
  double new_f_linear_3_1 = ((limi_rotation_3_1_0 * f_linear_3_0) + ((limi_rotation_3_1_1 * f_linear_3_1) + (limi_rotation_3_1_2 * f_linear_3_2)));
  double new_f_linear_3_0 = ((limi_rotation_3_0_0 * f_linear_3_0) + ((limi_rotation_3_0_1 * f_linear_3_1) + (limi_rotation_3_0_2 * f_linear_3_2)));
  double new_f_angular_temp_3_2 = ((limi_rotation_3_2_0 * f_angular_3_0) + ((limi_rotation_3_2_1 * f_angular_3_1) + (limi_rotation_3_2_2 * f_angular_3_2)));
  double new_f_angular_temp_3_1 = ((limi_rotation_3_1_0 * f_angular_3_0) + ((limi_rotation_3_1_1 * f_angular_3_1) + (limi_rotation_3_1_2 * f_angular_3_2)));
  double new_f_angular_temp_3_0 = ((limi_rotation_3_0_0 * f_angular_3_0) + ((limi_rotation_3_0_1 * f_angular_3_1) + (limi_rotation_3_0_2 * f_angular_3_2)));
  double f_angular_cross_3_0 = ((limi_translation_3_1 * new_f_linear_3_2) - (limi_translation_3_2 * new_f_linear_3_1));
  double f_angular_cross_3_1 = ((limi_translation_3_2 * new_f_linear_3_0) - (limi_translation_3_0 * new_f_linear_3_2));
  double f_angular_cross_3_2 = ((limi_translation_3_0 * new_f_linear_3_1) - (limi_translation_3_1 * new_f_linear_3_0));
  double new_f_angular_3_2 = (new_f_angular_temp_3_2 + f_angular_cross_3_2);
  double new_f_angular_3_1 = (new_f_angular_temp_3_1 + f_angular_cross_3_1);
  double new_f_angular_3_0 = (new_f_angular_temp_3_0 + f_angular_cross_3_0);
  double new_f_3_5 = new_f_angular_3_2;
  double new_f_3_4 = new_f_angular_3_1;
  double new_f_3_3 = new_f_angular_3_0;
  double new_f_3_2 = new_f_linear_3_2;
  double new_f_3_1 = new_f_linear_3_1;
  double new_f_3_0 = new_f_linear_3_0;
  double new_data_f_parent_3_5 = (f_rnea_firstpass2_5 + new_f_3_5);
  double new_data_f_parent_3_4 = (f_rnea_firstpass2_4 + new_f_3_4);
  double new_data_f_parent_3_3 = (f_rnea_firstpass2_3 + new_f_3_3);
  double new_data_f_parent_3_2 = (f_rnea_firstpass2_2 + new_f_3_2);
  double new_data_f_parent_3_1 = (f_rnea_firstpass2_1 + new_f_3_1);
  double new_data_f_parent_3_0 = (f_rnea_firstpass2_0 + new_f_3_0);
  double data_tau_temp_2 = new_data_f_parent_3_5;
  double f_linear_2_2 = new_data_f_parent_3_2;
  double f_linear_2_1 = new_data_f_parent_3_1;
  double f_linear_2_0 = new_data_f_parent_3_0;
  double f_angular_2_2 = new_data_f_parent_3_5;
  double f_angular_2_1 = new_data_f_parent_3_4;
  double f_angular_2_0 = new_data_f_parent_3_3;
  double new_f_linear_2_2 = ((limi_rotation_2_2_0 * f_linear_2_0) + ((limi_rotation_2_2_1 * f_linear_2_1) + (limi_rotation_2_2_2 * f_linear_2_2)));
  double new_f_linear_2_1 = ((limi_rotation_2_1_0 * f_linear_2_0) + ((limi_rotation_2_1_1 * f_linear_2_1) + (limi_rotation_2_1_2 * f_linear_2_2)));
  double new_f_linear_2_0 = ((limi_rotation_2_0_0 * f_linear_2_0) + ((limi_rotation_2_0_1 * f_linear_2_1) + (limi_rotation_2_0_2 * f_linear_2_2)));
  double new_f_angular_temp_2_2 = ((limi_rotation_2_2_0 * f_angular_2_0) + ((limi_rotation_2_2_1 * f_angular_2_1) + (limi_rotation_2_2_2 * f_angular_2_2)));
  double new_f_angular_temp_2_1 = ((limi_rotation_2_1_0 * f_angular_2_0) + ((limi_rotation_2_1_1 * f_angular_2_1) + (limi_rotation_2_1_2 * f_angular_2_2)));
  double new_f_angular_temp_2_0 = ((limi_rotation_2_0_0 * f_angular_2_0) + ((limi_rotation_2_0_1 * f_angular_2_1) + (limi_rotation_2_0_2 * f_angular_2_2)));
  double f_angular_cross_2_0 = ((limi_translation_2_1 * new_f_linear_2_2) - (limi_translation_2_2 * new_f_linear_2_1));
  double f_angular_cross_2_1 = ((limi_translation_2_2 * new_f_linear_2_0) - (limi_translation_2_0 * new_f_linear_2_2));
  double f_angular_cross_2_2 = ((limi_translation_2_0 * new_f_linear_2_1) - (limi_translation_2_1 * new_f_linear_2_0));
  double new_f_angular_2_2 = (new_f_angular_temp_2_2 + f_angular_cross_2_2);
  double new_f_angular_2_1 = (new_f_angular_temp_2_1 + f_angular_cross_2_1);
  double new_f_angular_2_0 = (new_f_angular_temp_2_0 + f_angular_cross_2_0);
  double new_f_2_5 = new_f_angular_2_2;
  double new_f_2_4 = new_f_angular_2_1;
  double new_f_2_3 = new_f_angular_2_0;
  double new_f_2_2 = new_f_linear_2_2;
  double new_f_2_1 = new_f_linear_2_1;
  double new_f_2_0 = new_f_linear_2_0;
  double new_data_f_parent_2_5 = (f_rnea_firstpass1_5 + new_f_2_5);
  double new_data_f_parent_2_4 = (f_rnea_firstpass1_4 + new_f_2_4);
  double new_data_f_parent_2_3 = (f_rnea_firstpass1_3 + new_f_2_3);
  double new_data_f_parent_2_2 = (f_rnea_firstpass1_2 + new_f_2_2);
  double new_data_f_parent_2_1 = (f_rnea_firstpass1_1 + new_f_2_1);
  double new_data_f_parent_2_0 = (f_rnea_firstpass1_0 + new_f_2_0);
  double data_tau_temp_1 = new_data_f_parent_2_5;
  double f_linear_1_2 = new_data_f_parent_2_2;
  double f_linear_1_1 = new_data_f_parent_2_1;
  double f_linear_1_0 = new_data_f_parent_2_0;
  double f_angular_1_2 = new_data_f_parent_2_5;
  double f_angular_1_1 = new_data_f_parent_2_4;
  double f_angular_1_0 = new_data_f_parent_2_3;
  double new_f_linear_1_2 = ((limi_rotation_1_2_0 * f_linear_1_0) + ((limi_rotation_1_2_1 * f_linear_1_1) + (limi_rotation_1_2_2 * f_linear_1_2)));
  double new_f_linear_1_1 = ((limi_rotation_1_1_0 * f_linear_1_0) + ((limi_rotation_1_1_1 * f_linear_1_1) + (limi_rotation_1_1_2 * f_linear_1_2)));
  double new_f_linear_1_0 = ((limi_rotation_1_0_0 * f_linear_1_0) + ((limi_rotation_1_0_1 * f_linear_1_1) + (limi_rotation_1_0_2 * f_linear_1_2)));
  double new_f_angular_temp_1_2 = ((limi_rotation_1_2_0 * f_angular_1_0) + ((limi_rotation_1_2_1 * f_angular_1_1) + (limi_rotation_1_2_2 * f_angular_1_2)));
  double new_f_angular_temp_1_1 = ((limi_rotation_1_1_0 * f_angular_1_0) + ((limi_rotation_1_1_1 * f_angular_1_1) + (limi_rotation_1_1_2 * f_angular_1_2)));
  double new_f_angular_temp_1_0 = ((limi_rotation_1_0_0 * f_angular_1_0) + ((limi_rotation_1_0_1 * f_angular_1_1) + (limi_rotation_1_0_2 * f_angular_1_2)));
  double f_angular_cross_1_0 = ((limi_translation_1_1 * new_f_linear_1_2) - (limi_translation_1_2 * new_f_linear_1_1));
  double f_angular_cross_1_1 = ((limi_translation_1_2 * new_f_linear_1_0) - (limi_translation_1_0 * new_f_linear_1_2));
  double f_angular_cross_1_2 = ((limi_translation_1_0 * new_f_linear_1_1) - (limi_translation_1_1 * new_f_linear_1_0));
  double new_f_angular_1_2 = (new_f_angular_temp_1_2 + f_angular_cross_1_2);
  double new_f_angular_1_1 = (new_f_angular_temp_1_1 + f_angular_cross_1_1);
  double new_f_angular_1_0 = (new_f_angular_temp_1_0 + f_angular_cross_1_0);
  double new_f_1_5 = new_f_angular_1_2;
  double new_f_1_4 = new_f_angular_1_1;
  double new_f_1_3 = new_f_angular_1_0;
  double new_f_1_2 = new_f_linear_1_2;
  double new_f_1_1 = new_f_linear_1_1;
  double new_f_1_0 = new_f_linear_1_0;
  double new_data_f_parent_1_5 = (f_rnea_firstpass0_5 + new_f_1_5);
  double new_data_f_parent_1_4 = (f_rnea_firstpass0_4 + new_f_1_4);
  double new_data_f_parent_1_3 = (f_rnea_firstpass0_3 + new_f_1_3);
  double new_data_f_parent_1_2 = (f_rnea_firstpass0_2 + new_f_1_2);
  double new_data_f_parent_1_1 = (f_rnea_firstpass0_1 + new_f_1_1);
  double new_data_f_parent_1_0 = (f_rnea_firstpass0_0 + new_f_1_0);
  double data_tau_temp_0 = new_data_f_parent_1_5;
  double data_tau_5 = data_tau_temp_5;
  double data_tau_4 = data_tau_temp_4;
  double data_tau_3 = data_tau_temp_3;
  double data_tau_2 = data_tau_temp_2;
  double data_tau_1 = data_tau_temp_1;
  double data_tau_0 = data_tau_temp_0;




  std::cout << "data_tau_0: " << data_tau_0 << std::endl;
  std::cout << "data_tau_1: " << data_tau_1 << std::endl;
  std::cout << "data_tau_2: " << data_tau_2 << std::endl;
  std::cout << "data_tau_3: " << data_tau_3 << std::endl;
  std::cout << "data_tau_4: " << data_tau_4 << std::endl;
  std::cout << "data_tau_5: " << data_tau_5 << std::endl;



  return data_tau_0;
} // [0.0, 0.0] +/- 0.0





int main(){
    // give some random values
    // q =   1.97125 -0.372364   1.64045 -0.674883   2.38533  0.727269
    // v =  -0.329554   0.536459  -0.444451    0.10794 -0.0452059   0.257742
    // a = -0.270431 0.0268018  0.904459   0.83239  0.271423  0.434594 
    std::vector<double> q = {1.97125, -0.372364, 1.64045, -0.674883, 2.38533, 0.727269};
    std::vector<double> v = {-0.329554, 0.536459, -0.444451, 0.10794, -0.0452059, 0.257742};
    std::vector<double> a = {-0.270431, 0.0268018, 0.904459, 0.83239, 0.271423, 0.434594};
    std::vector<double> cos_qpos = {cos(q[0]), cos(q[1]), cos(q[2]), cos(q[3]), cos(q[4]), cos(q[5])};
    std::vector<double> sin_qpos = {sin(q[0]), sin(q[1]), sin(q[2]), sin(q[3]), sin(q[4]), sin(q[5])};

    rnea(
        cos_qpos[0], cos_qpos[1], cos_qpos[2], cos_qpos[3], cos_qpos[4], cos_qpos[5],
        sin_qpos[0], sin_qpos[1], sin_qpos[2], sin_qpos[3], sin_qpos[4], sin_qpos[5],
        v[0], v[1], v[2], v[3], v[4], v[5],
        a[0], a[1], a[2], a[3], a[4], a[5]
    );
}