#include <math.h>
#include <iostream>
#include <vector>
#include <math.h>


/* @pre: ((qcos_0 > -1.0) && (qcos_0 < 1.0) && (qcos_1 > -1.0) && (qcos_1 < 1.0) && (qcos_2 > -1.0) && (qcos_2 < 1.0) && (qcos_3 > -1.0) && (qcos_3 < 1.0) && (qcos_4 > -1.0) && (qcos_4 < 1.0) && (qcos_5 > -1.0) && (qcos_5 < 1.0) && (qsin_0 > -1.0) && (qsin_0 < 1.0) && (qsin_1 > -1.0) && (qsin_1 < 1.0) && (qsin_2 > -1.0) && (qsin_2 < 1.0) && (qsin_3 > -1.0) && (qsin_3 < 1.0) && (qsin_4 > -1.0) && (qsin_4 < 1.0) && (qsin_5 > -1.0) && (qsin_5 < 1.0) && (v_0 > -1.0) && (v_0 < 1.0) && (v_1 > -1.0) && (v_1 < 1.0) && (v_2 > -1.0) && (v_2 < 1.0) && (v_3 > -1.0) && (v_3 < 1.0) && (v_4 > -1.0) && (v_4 < 1.0) && (v_5 > -1.0) && (v_5 < 1.0) && (a_0 > -1.0) && (a_0 < 1.0) && (a_1 > -1.0) && (a_1 < 1.0) && (a_2 > -1.0) && (a_2 < 1.0) && (a_3 > -1.0) && (a_3 < 1.0) && (a_4 > -1.0) && (a_4 < 1.0) && (a_5 > -1.0) && (a_5 < 1.0)) */
/* @post: (res) => (res +/- 0.1) */
double rneaderiv(double qcos_0, double qcos_1, double qcos_2, double qcos_3, double qcos_4, double qcos_5, double qsin_0, double qsin_1, double qsin_2, double qsin_3, double qsin_4, double qsin_5, double v_0, double v_1, double v_2, double v_3, double v_4, double v_5, double a_0, double a_1, double a_2, double a_3, double a_4, double a_5) {
  double qs_sin_0_0 = 0;
  double qs_sin_0_1 = 0;
  double qs_sin_0_2 = 0;
  double qs_sin_0_3 = 0;
  double qs_sin_0_4 = 0;
  double qs_sin_0_5 = 0;
  double qs_sin_1_0 = 0;
  double qs_sin_1_1 = 0;
  double qs_sin_1_2 = 0;
  double qs_sin_1_3 = 0;
  double qs_sin_1_4 = 0;
  double qs_sin_1_5 = 0;
  double qs_sin_2_0 = 0;
  double qs_sin_2_1 = 0;
  double qs_sin_2_2 = 0;
  double qs_sin_2_3 = 0;
  double qs_sin_2_4 = 0;
  double qs_sin_2_5 = 0;
  double qs_sin_3_0 = 0;
  double qs_sin_3_1 = 0;
  double qs_sin_3_2 = 0;
  double qs_sin_3_3 = 0;
  double qs_sin_3_4 = 0;
  double qs_sin_3_5 = 0;
  double qs_sin_4_0 = 0;
  double qs_sin_4_1 = 0;
  double qs_sin_4_2 = 0;
  double qs_sin_4_3 = 0;
  double qs_sin_4_4 = 0;
  double qs_sin_4_5 = 0;
  double qs_sin_5_0 = 0;
  double qs_sin_5_1 = 0;
  double qs_sin_5_2 = 0;
  double qs_sin_5_3 = 0;
  double qs_sin_5_4 = 0;
  double qs_sin_5_5 = 0;
  double qs_cos_0_0 = 0;
  double qs_cos_0_1 = 0;
  double qs_cos_0_2 = 0;
  double qs_cos_0_3 = 0;
  double qs_cos_0_4 = 0;
  double qs_cos_0_5 = 0;
  double qs_cos_1_0 = 0;
  double qs_cos_1_1 = 0;
  double qs_cos_1_2 = 0;
  double qs_cos_1_3 = 0;
  double qs_cos_1_4 = 0;
  double qs_cos_1_5 = 0;
  double qs_cos_2_0 = 0;
  double qs_cos_2_1 = 0;
  double qs_cos_2_2 = 0;
  double qs_cos_2_3 = 0;
  double qs_cos_2_4 = 0;
  double qs_cos_2_5 = 0;
  double qs_cos_3_0 = 0;
  double qs_cos_3_1 = 0;
  double qs_cos_3_2 = 0;
  double qs_cos_3_3 = 0;
  double qs_cos_3_4 = 0;
  double qs_cos_3_5 = 0;
  double qs_cos_4_0 = 0;
  double qs_cos_4_1 = 0;
  double qs_cos_4_2 = 0;
  double qs_cos_4_3 = 0;
  double qs_cos_4_4 = 0;
  double qs_cos_4_5 = 0;
  double qs_cos_5_0 = 0;
  double qs_cos_5_1 = 0;
  double qs_cos_5_2 = 0;
  double qs_cos_5_3 = 0;
  double qs_cos_5_4 = 0;
  double qs_cos_5_5 = 0;
  double us_0_0 = 0;
  double us_0_1 = 0;
  double us_0_2 = 0;
  double us_0_3 = 0;
  double us_0_4 = 0;
  double us_0_5 = 0;
  double us_1_0 = 0;
  double us_1_1 = 0;
  double us_1_2 = 0;
  double us_1_3 = 0;
  double us_1_4 = 0;
  double us_1_5 = 0;
  double us_2_0 = 0;
  double us_2_1 = 0;
  double us_2_2 = 0;
  double us_2_3 = 0;
  double us_2_4 = 0;
  double us_2_5 = 0;
  double us_3_0 = 0;
  double us_3_1 = 0;
  double us_3_2 = 0;
  double us_3_3 = 0;
  double us_3_4 = 0;
  double us_3_5 = 0;
  double us_4_0 = 0;
  double us_4_1 = 0;
  double us_4_2 = 0;
  double us_4_3 = 0;
  double us_4_4 = 0;
  double us_4_5 = 0;
  double us_5_0 = 0;
  double us_5_1 = 0;
  double us_5_2 = 0;
  double us_5_3 = 0;
  double us_5_4 = 0;
  double us_5_5 = 0;
  double xgoal_0 = 0;
  double xgoal_1 = 0;
  double xgoal_2 = 0;
  double xgoal_3 = 0;
  double xgoal_4 = 0;
  double xgoal_5 = 0;
  double limi_translation_0_0 = 0;
  double limi_translation_0_1 = 0;
  double limi_translation_0_2 = 0.333;
  double limi_translation_1_0 = 0;
  double limi_translation_1_1 = 0;
  double limi_translation_1_2 = 0;
  double limi_translation_2_0 = 0;
  double limi_translation_2_1 = -0.316;
  double limi_translation_2_2 = 0;
  double limi_translation_3_0 = 0.0825;
  double limi_translation_3_1 = 0;
  double limi_translation_3_2 = 0;
  double limi_translation_4_0 = -0.0825;
  double limi_translation_4_1 = 0.384;
  double limi_translation_4_2 = 0;
  double limi_translation_5_0 = 0;
  double limi_translation_5_1 = 0;
  double limi_translation_5_2 = 0;
  double data_v_0_0 = 0;
  double data_v_0_1 = 0;
  double data_v_0_2 = 0;
  double data_v_0_3 = 0;
  double data_v_0_4 = 0;
  double data_v_0_5 = 0;
  double data_v_1_0 = 0;
  double data_v_1_1 = 0;
  double data_v_1_2 = 0;
  double data_v_1_3 = 0;
  double data_v_1_4 = 0;
  double data_v_1_5 = 0;
  double data_v_2_0 = 0;
  double data_v_2_1 = 0;
  double data_v_2_2 = 0;
  double data_v_2_3 = 0;
  double data_v_2_4 = 0;
  double data_v_2_5 = 0;
  double data_v_3_0 = 0;
  double data_v_3_1 = 0;
  double data_v_3_2 = 0;
  double data_v_3_3 = 0;
  double data_v_3_4 = 0;
  double data_v_3_5 = 0;
  double data_v_4_0 = 0;
  double data_v_4_1 = 0;
  double data_v_4_2 = 0;
  double data_v_4_3 = 0;
  double data_v_4_4 = 0;
  double data_v_4_5 = 0;
  double data_v_5_0 = 0;
  double data_v_5_1 = 0;
  double data_v_5_2 = 0;
  double data_v_5_3 = 0;
  double data_v_5_4 = 0;
  double data_v_5_5 = 0;
  double lever_0_0 = 0.003875;
  double lever_0_1 = 0.002081;
  double lever_0_2 = -0.04762;
  double lever_1_0 = -0.003141;
  double lever_1_1 = -0.02872;
  double lever_1_2 = 0.003495;
  double lever_2_0 = 0.027518;
  double lever_2_1 = 0.039252;
  double lever_2_2 = -0.066502;
  double lever_3_0 = -0.05317;
  double lever_3_1 = 0.104419;
  double lever_3_2 = 0.027454;
  double lever_4_0 = -0.011953;
  double lever_4_1 = 0.041065;
  double lever_4_2 = -0.038437;
  double lever_5_0 = 0.060149;
  double lever_5_1 = -0.014117;
  double lever_5_2 = -0.010517;
  double masses_0 = 4.970684;
  double masses_1 = 0.646926;
  double masses_2 = 3.228604;
  double masses_3 = 3.587895;
  double masses_4 = 1.225946;
  double masses_5 = 1.66656;
  double inertia_0_0_0 = 0.70337;
  double inertia_0_0_1 = -1.39E-4;
  double inertia_0_0_2 = 0.006772;
  double inertia_0_1_0 = -1.39E-4;
  double inertia_0_1_1 = 0.70661;
  double inertia_0_1_2 = 0.019169;
  double inertia_0_2_0 = 0.006772;
  double inertia_0_2_1 = 0.019169;
  double inertia_0_2_2 = 0.009117;
  double inertia_1_0_0 = 0.007962;
  double inertia_1_0_1 = -0.003925;
  double inertia_1_0_2 = 0.010254;
  double inertia_1_1_0 = -0.003925;
  double inertia_1_1_1 = 0.02811;
  double inertia_1_1_2 = 7.04E-4;
  double inertia_1_2_0 = 0.010254;
  double inertia_1_2_1 = 7.04E-4;
  double inertia_1_2_2 = 0.025995;
  double inertia_2_0_0 = 0.037242;
  double inertia_2_0_1 = -0.004761;
  double inertia_2_0_2 = -0.011396;
  double inertia_2_1_0 = -0.004761;
  double inertia_2_1_1 = 0.036155;
  double inertia_2_1_2 = -0.012805;
  double inertia_2_2_0 = -0.011396;
  double inertia_2_2_1 = -0.012805;
  double inertia_2_2_2 = 0.01083;
  double inertia_3_0_0 = 0.025853;
  double inertia_3_0_1 = 0.007796;
  double inertia_3_0_2 = -0.001332;
  double inertia_3_1_0 = 0.007796;
  double inertia_3_1_1 = 0.019552;
  double inertia_3_1_2 = 0.008641;
  double inertia_3_2_0 = -0.001332;
  double inertia_3_2_1 = 0.008641;
  double inertia_3_2_2 = 0.028323;
  double inertia_4_0_0 = 0.035549;
  double inertia_4_0_1 = -0.002117;
  double inertia_4_0_2 = -0.004037;
  double inertia_4_1_0 = -0.002117;
  double inertia_4_1_1 = 0.029474;
  double inertia_4_1_2 = 2.29E-4;
  double inertia_4_2_0 = -0.004037;
  double inertia_4_2_1 = 2.29E-4;
  double inertia_4_2_2 = 0.008627;
  double inertia_5_0_0 = 0.001964;
  double inertia_5_0_1 = 1.09E-4;
  double inertia_5_0_2 = -0.001158;
  double inertia_5_1_0 = 1.09E-4;
  double inertia_5_1_1 = 0.004354;
  double inertia_5_1_2 = 3.41E-4;
  double inertia_5_2_0 = -0.001158;
  double inertia_5_2_1 = 3.41E-4;
  double inertia_5_2_2 = 0.005433;
  double parent_oa_gf_0 = 0;
  double parent_oa_gf_1 = 0;
  double parent_oa_gf_2 = 9.81;
  double parent_oa_gf_3 = 0;
  double parent_oa_gf_4 = 0;
  double parent_oa_gf_5 = 0;
  double new_v_0 = 0;
  double new_v_1 = 0;
  double new_v_2 = 0;
  double new_v_3 = 0;
  double new_v_4 = 0;
  double new_v_5 = 0;
  double new_a_gf_0 = 0;
  double new_a_gf_1 = 0;
  double new_a_gf_2 = 0;
  double new_a_gf_3 = 0;
  double new_a_gf_4 = 0;
  double new_a_gf_5 = 0;
  double new_h_0 = 0;
  double new_h_1 = 0;
  double new_h_2 = 0;
  double new_h_3 = 0;
  double new_h_4 = 0;
  double new_h_5 = 0;
  double new_f_0 = 0;
  double new_f_1 = 0;
  double new_f_2 = 0;
  double new_f_3 = 0;
  double new_f_4 = 0;
  double new_f_5 = 0;
  double rotation_matrix_0_0_0 = qcos_0;
  double rotation_matrix_0_0_1 = -(qsin_0);
  double rotation_matrix_0_0_2 = 0;
  double rotation_matrix_0_1_0 = qsin_0;
  double rotation_matrix_0_1_1 = qcos_0;
  double rotation_matrix_0_1_2 = 0;
  double rotation_matrix_0_2_0 = 0;
  double rotation_matrix_0_2_1 = 0;
  double rotation_matrix_0_2_2 = 1;
  double limi_rotation_0_0_0 = rotation_matrix_0_0_0;
  double limi_rotation_0_0_1 = rotation_matrix_0_0_1;
  double limi_rotation_0_0_2 = 0;
  double limi_rotation_0_1_0 = rotation_matrix_0_1_0;
  double limi_rotation_0_1_1 = rotation_matrix_0_1_1;
  double limi_rotation_0_1_2 = 0;
  double limi_rotation_0_2_0 = 0;
  double limi_rotation_0_2_1 = 0;
  double limi_rotation_0_2_2 = 1;
  double v_linear_0_0 = data_v_0_0;
  double v_linear_0_1 = data_v_0_1;
  double v_linear_0_2 = data_v_0_2;
  double v_angular_0_0 = data_v_0_3;
  double v_angular_0_1 = data_v_0_4;
  double v_angular_0_2 = v_0;
  double parent_v_0 = 0;
  double parent_v_1 = 0;
  double parent_v_2 = 0;
  double parent_v_3 = 0;
  double parent_v_4 = 0;
  double parent_v_5 = 0;
  double parent_v_linear_0_0 = parent_v_0;
  double parent_v_linear_0_1 = parent_v_1;
  double parent_v_linear_0_2 = parent_v_2;
  double parent_v_angular_0_0 = parent_v_3;
  double parent_v_angular_0_1 = parent_v_4;
  double parent_v_angular_0_2 = parent_v_5;
  double parent_a_0 = 0;
  double parent_a_1 = 0;
  double parent_a_2 = 0;
  double parent_a_3 = 0;
  double parent_a_4 = 0;
  double parent_a_5 = 0;
  double parent_a_linear_0_0 = parent_a_0;
  double parent_a_linear_0_1 = parent_a_1;
  double parent_a_linear_0_2 = parent_a_2;
  double parent_a_angular_0_0 = parent_a_3;
  double parent_a_angular_0_1 = parent_a_4;
  double parent_a_angular_0_2 = parent_a_5;
  double all_v_0_0 = v_linear_0_0;
  double all_v_0_1 = v_linear_0_1;
  double all_v_0_2 = v_linear_0_2;
  double all_v_0_3 = v_angular_0_0;
  double all_v_0_4 = v_angular_0_1;
  double all_v_0_5 = v_angular_0_2;
  double minus_m_w_0 = -(v_0);
  double alpha_cross1_linear_0 = (-(minus_m_w_0) * v_linear_0_1);
  double alpha_cross2_linear_0 = (minus_m_w_0 * v_linear_0_0);
  double alpha_cross_linear_0_0 = alpha_cross1_linear_0;
  double alpha_cross_linear_0_1 = alpha_cross2_linear_0;
  double alpha_cross_linear_0_2 = 0;
  double alpha_cross1_angular_0 = (-(minus_m_w_0) * v_angular_0_1);
  double alpha_cross2_angular_0 = (minus_m_w_0 * v_angular_0_0);
  double alpha_cross_angular_0_0 = alpha_cross1_angular_0;
  double alpha_cross_angular_0_1 = alpha_cross2_angular_0;
  double alpha_cross_angular_0_2 = 0;
  double new_data_a_0_0 = alpha_cross_linear_0_0;
  double new_data_a_0_1 = alpha_cross_linear_0_1;
  double new_data_a_0_2 = alpha_cross_linear_0_2;
  double new_data_a_0_3 = alpha_cross_angular_0_0;
  double new_data_a_0_4 = alpha_cross_angular_0_1;
  double new_data_a_0_5 = a_0;
  double temp_a_linear_0_0 = new_data_a_0_0;
  double temp_a_linear_0_1 = new_data_a_0_1;
  double temp_a_linear_0_2 = new_data_a_0_2;
  double temp_a_angular_0_0 = new_data_a_0_3;
  double temp_a_angular_0_1 = new_data_a_0_4;
  double temp_a_angular_0_2 = new_data_a_0_5;
  double new_translation_temp_0 = (((limi_rotation_0_0_0 * lever_0_0) + (limi_rotation_0_0_1 * lever_0_1)) + (limi_rotation_0_0_2 * lever_0_2));
  double new_translation_temp_1 = (((limi_rotation_0_1_0 * lever_0_0) + (limi_rotation_0_1_1 * lever_0_1)) + (limi_rotation_0_1_2 * lever_0_2));
  double new_translation_temp_2 = (((limi_rotation_0_2_0 * lever_0_0) + (limi_rotation_0_2_1 * lever_0_1)) + (limi_rotation_0_2_2 * lever_0_2));
  double new_translation_0 = (limi_translation_0_0 + new_translation_temp_0);
  double new_translation_1 = (limi_translation_0_1 + new_translation_temp_1);
  double new_translation_2 = (limi_translation_0_2 + new_translation_temp_2);
  double decompose_it_i_0_0 = (inertia_0_0_0 - inertia_0_2_2);
  double decompose_it_i_0_1 = inertia_0_0_1;
  double decompose_it_i_1_0 = inertia_0_0_1;
  double decompose_it_i_1_1 = (inertia_0_1_1 - inertia_0_2_2);
  double decompose_it_i_2_0 = (inertia_0_0_2 * 2);
  double decompose_it_i_2_1 = (inertia_0_1_2 + inertia_0_1_2);
  double rotate_bottom_r_0_0 = limi_rotation_0_1_0;
  double rotate_bottom_r_0_1 = limi_rotation_0_1_1;
  double rotate_bottom_r_0_2 = limi_rotation_0_1_2;
  double rotate_bottom_r_1_0 = limi_rotation_0_2_0;
  double rotate_bottom_r_1_1 = limi_rotation_0_2_1;
  double rotate_bottom_r_1_2 = limi_rotation_0_2_2;
  double rotate_y_0_0 = (((rotate_bottom_r_0_0 * decompose_it_i_0_0) + (rotate_bottom_r_0_1 * decompose_it_i_1_0)) + (rotate_bottom_r_0_2 * decompose_it_i_2_0));
  double rotate_y_0_1 = (((rotate_bottom_r_0_0 * decompose_it_i_0_1) + (rotate_bottom_r_0_1 * decompose_it_i_1_1)) + (rotate_bottom_r_0_2 * decompose_it_i_2_1));
  double rotate_y_1_0 = (((rotate_bottom_r_1_0 * decompose_it_i_0_0) + (rotate_bottom_r_1_1 * decompose_it_i_1_0)) + (rotate_bottom_r_1_2 * decompose_it_i_2_0));
  double rotate_y_1_1 = (((rotate_bottom_r_1_0 * decompose_it_i_0_1) + (rotate_bottom_r_1_1 * decompose_it_i_1_1)) + (rotate_bottom_r_1_2 * decompose_it_i_2_1));
  double sres_first_1 = ((limi_rotation_0_0_0 * rotate_y_0_0) + (limi_rotation_0_0_1 * rotate_y_0_1));
  double sres_first_2 = ((limi_rotation_0_1_0 * rotate_y_0_0) + (limi_rotation_0_1_1 * rotate_y_0_1));
  double sres_first_3 = ((limi_rotation_0_0_0 * rotate_y_1_0) + (limi_rotation_0_0_1 * rotate_y_1_1));
  double sres_first_4 = ((limi_rotation_0_1_0 * rotate_y_1_0) + (limi_rotation_0_1_1 * rotate_y_1_1));
  double sres_first_5 = ((limi_rotation_0_2_0 * rotate_y_1_0) + (limi_rotation_0_2_1 * rotate_y_1_1));
  double const_r_0 = ((-(inertia_0_1_2) * limi_rotation_0_0_0) + (inertia_0_0_2 * limi_rotation_0_0_1));
  double const_r_1 = ((-(inertia_0_1_2) * limi_rotation_0_1_0) + (inertia_0_0_2 * limi_rotation_0_1_1));
  double const_r_2 = ((-(inertia_0_1_2) * limi_rotation_0_2_0) + (inertia_0_0_2 * limi_rotation_0_2_1));
  double sres_update_0_tmp1 = (decompose_it_i_0_0 + decompose_it_i_1_1);
  double sres_update_0_tmp2 = (sres_first_2 + sres_first_5);
  double sres_update_0 = (sres_update_0_tmp1 - sres_update_0_tmp2);
  double symmetric3_rotate_0_0 = (sres_update_0 + inertia_0_2_2);
  double symmetric3_rotate_0_1 = (sres_first_1 + const_r_2);
  double symmetric3_rotate_0_2 = (sres_first_3 - const_r_1);
  double symmetric3_rotate_1_0 = (sres_first_1 + const_r_2);
  double symmetric3_rotate_1_1 = (sres_first_2 + inertia_0_2_2);
  double symmetric3_rotate_1_2 = (sres_first_4 + const_r_0);
  double symmetric3_rotate_2_0 = (sres_first_3 - const_r_1);
  double symmetric3_rotate_2_1 = (sres_first_4 + const_r_0);
  double symmetric3_rotate_2_2 = (sres_first_5 + inertia_0_2_2);
  double data_oinertias_trans_0_0 = new_translation_0;
  double data_oinertias_trans_0_1 = new_translation_1;
  double data_oinertias_trans_0_2 = new_translation_2;
  double data_oinertias_rot_0_0_0 = symmetric3_rotate_0_0;
  double data_oinertias_rot_0_0_1 = symmetric3_rotate_0_1;
  double data_oinertias_rot_0_0_2 = symmetric3_rotate_0_2;
  double data_oinertias_rot_0_1_0 = symmetric3_rotate_1_0;
  double data_oinertias_rot_0_1_1 = symmetric3_rotate_1_1;
  double data_oinertias_rot_0_1_2 = symmetric3_rotate_1_2;
  double data_oinertias_rot_0_2_0 = symmetric3_rotate_2_0;
  double data_oinertias_rot_0_2_1 = symmetric3_rotate_2_1;
  double data_oinertias_rot_0_2_2 = symmetric3_rotate_2_2;
  double motion_act_linear_0_0 = (((limi_rotation_0_0_0 * v_linear_0_0) + (limi_rotation_0_0_1 * v_linear_0_1)) + (limi_rotation_0_0_2 * v_linear_0_2));
  double motion_act_linear_0_1 = (((limi_rotation_0_1_0 * v_linear_0_0) + (limi_rotation_0_1_1 * v_linear_0_1)) + (limi_rotation_0_1_2 * v_linear_0_2));
  double motion_act_linear_0_2 = (((limi_rotation_0_2_0 * v_linear_0_0) + (limi_rotation_0_2_1 * v_linear_0_1)) + (limi_rotation_0_2_2 * v_linear_0_2));
  double motion_act_angular_0_0 = (((limi_rotation_0_0_0 * v_angular_0_0) + (limi_rotation_0_0_1 * v_angular_0_1)) + (limi_rotation_0_0_2 * v_angular_0_2));
  double motion_act_angular_0_1 = (((limi_rotation_0_1_0 * v_angular_0_0) + (limi_rotation_0_1_1 * v_angular_0_1)) + (limi_rotation_0_1_2 * v_angular_0_2));
  double motion_act_angular_0_2 = (((limi_rotation_0_2_0 * v_angular_0_0) + (limi_rotation_0_2_1 * v_angular_0_1)) + (limi_rotation_0_2_2 * v_angular_0_2));
  double motion_act_cross_0_0 = ((limi_translation_0_1 * motion_act_angular_0_2) - (limi_translation_0_2 * motion_act_angular_0_1));
  double motion_act_cross_0_1 = ((limi_translation_0_2 * motion_act_angular_0_0) - (limi_translation_0_0 * motion_act_angular_0_2));
  double motion_act_cross_0_2 = ((limi_translation_0_0 * motion_act_angular_0_1) - (limi_translation_0_1 * motion_act_angular_0_0));
  double motion_act_linear2_0_0 = (motion_act_linear_0_0 + motion_act_cross_0_0);
  double motion_act_linear2_0_1 = (motion_act_linear_0_1 + motion_act_cross_0_1);
  double motion_act_linear2_0_2 = (motion_act_linear_0_2 + motion_act_cross_0_2);
  double act_motion_res_0_0 = motion_act_linear2_0_0;
  double act_motion_res_0_1 = motion_act_linear2_0_1;
  double act_motion_res_0_2 = motion_act_linear2_0_2;
  double act_motion_res_0_3 = motion_act_angular_0_0;
  double act_motion_res_0_4 = motion_act_angular_0_1;
  double act_motion_res_0_5 = motion_act_angular_0_2;
  double ov_0_0 = act_motion_res_0_0;
  double ov_0_1 = act_motion_res_0_1;
  double ov_0_2 = act_motion_res_0_2;
  double ov_0_3 = act_motion_res_0_3;
  double ov_0_4 = act_motion_res_0_4;
  double ov_0_5 = act_motion_res_0_5;
  double t_linear_0_0 = new_data_a_0_0;
  double t_linear_0_1 = new_data_a_0_1;
  double t_linear_0_2 = new_data_a_0_2;
  double t_angular_0_0 = new_data_a_0_3;
  double t_angular_0_1 = new_data_a_0_4;
  double t_angular_0_2 = new_data_a_0_5;
  double r_1_motion_act_linear_0_0 = (((limi_rotation_0_0_0 * t_linear_0_0) + (limi_rotation_0_0_1 * t_linear_0_1)) + (limi_rotation_0_0_2 * t_linear_0_2));
  double r_1_motion_act_linear_0_1 = (((limi_rotation_0_1_0 * t_linear_0_0) + (limi_rotation_0_1_1 * t_linear_0_1)) + (limi_rotation_0_1_2 * t_linear_0_2));
  double r_1_motion_act_linear_0_2 = (((limi_rotation_0_2_0 * t_linear_0_0) + (limi_rotation_0_2_1 * t_linear_0_1)) + (limi_rotation_0_2_2 * t_linear_0_2));
  double r_2_motion_act_angular_0_0 = (((limi_rotation_0_0_0 * t_angular_0_0) + (limi_rotation_0_0_1 * t_angular_0_1)) + (limi_rotation_0_0_2 * t_angular_0_2));
  double r_2_motion_act_angular_0_1 = (((limi_rotation_0_1_0 * t_angular_0_0) + (limi_rotation_0_1_1 * t_angular_0_1)) + (limi_rotation_0_1_2 * t_angular_0_2));
  double r_2_motion_act_angular_0_2 = (((limi_rotation_0_2_0 * t_angular_0_0) + (limi_rotation_0_2_1 * t_angular_0_1)) + (limi_rotation_0_2_2 * t_angular_0_2));
  double r_3_motion_act_cross_0_0 = ((limi_translation_0_1 * r_2_motion_act_angular_0_2) - (limi_translation_0_2 * r_2_motion_act_angular_0_1));
  double r_3_motion_act_cross_0_1 = ((limi_translation_0_2 * r_2_motion_act_angular_0_0) - (limi_translation_0_0 * r_2_motion_act_angular_0_2));
  double r_3_motion_act_cross_0_2 = ((limi_translation_0_0 * r_2_motion_act_angular_0_1) - (limi_translation_0_1 * r_2_motion_act_angular_0_0));
  double r_4_motion_act_linear2_0_0 = (r_1_motion_act_linear_0_0 + r_3_motion_act_cross_0_0);
  double r_4_motion_act_linear2_0_1 = (r_1_motion_act_linear_0_1 + r_3_motion_act_cross_0_1);
  double r_4_motion_act_linear2_0_2 = (r_1_motion_act_linear_0_2 + r_3_motion_act_cross_0_2);
  double r_5_act_motion_res_0_0 = r_4_motion_act_linear2_0_0;
  double r_5_act_motion_res_0_1 = r_4_motion_act_linear2_0_1;
  double r_5_act_motion_res_0_2 = r_4_motion_act_linear2_0_2;
  double r_5_act_motion_res_0_3 = r_2_motion_act_angular_0_0;
  double r_5_act_motion_res_0_4 = r_2_motion_act_angular_0_1;
  double r_5_act_motion_res_0_5 = r_2_motion_act_angular_0_2;
  double oa_0_0 = r_5_act_motion_res_0_0;
  double oa_0_1 = r_5_act_motion_res_0_1;
  double oa_0_2 = r_5_act_motion_res_0_2;
  double oa_0_3 = r_5_act_motion_res_0_3;
  double oa_0_4 = r_5_act_motion_res_0_4;
  double oa_0_5 = r_5_act_motion_res_0_5;
  double model_gravity_0 = 0;
  double model_gravity_1 = 0;
  double model_gravity_2 = -9.81;
  double model_gravity_3 = 0;
  double model_gravity_4 = 0;
  double model_gravity_5 = 0;
  double oa_gf_0_0 = (oa_0_0 - model_gravity_0);
  double oa_gf_0_1 = (oa_0_1 - model_gravity_1);
  double oa_gf_0_2 = (oa_0_2 - model_gravity_2);
  double oa_gf_0_3 = (oa_0_3 - model_gravity_3);
  double oa_gf_0_4 = (oa_0_4 - model_gravity_4);
  double oa_gf_0_5 = (oa_0_5 - model_gravity_5);
  double ov_linear_0_0 = ov_0_0;
  double ov_linear_0_1 = ov_0_1;
  double ov_linear_0_2 = ov_0_2;
  double ov_angular_0_0 = ov_0_3;
  double ov_angular_0_1 = ov_0_4;
  double ov_angular_0_2 = ov_0_5;
  double data_oh_linear_temp1_0_0 = ((new_translation_1 * ov_angular_0_2) - (new_translation_2 * ov_angular_0_1));
  double data_oh_linear_temp1_0_1 = ((new_translation_2 * ov_angular_0_0) - (new_translation_0 * ov_angular_0_2));
  double data_oh_linear_temp1_0_2 = ((new_translation_0 * ov_angular_0_1) - (new_translation_1 * ov_angular_0_0));
  double data_oh_linear_temp2_0_0 = (ov_linear_0_0 - data_oh_linear_temp1_0_0);
  double data_oh_linear_temp2_0_1 = (ov_linear_0_1 - data_oh_linear_temp1_0_1);
  double data_oh_linear_temp2_0_2 = (ov_linear_0_2 - data_oh_linear_temp1_0_2);
  double data_oh_linear_0_0 = (masses_0 * data_oh_linear_temp2_0_0);
  double data_oh_linear_0_1 = (masses_0 * data_oh_linear_temp2_0_1);
  double data_oh_linear_0_2 = (masses_0 * data_oh_linear_temp2_0_2);
  double r_6_ = (symmetric3_rotate_0_0 * ov_angular_0_0);
  double r_7_ = (symmetric3_rotate_0_1 * ov_angular_0_1);
  double r_8_ = (symmetric3_rotate_0_2 * ov_angular_0_2);
  double r_9_ = (symmetric3_rotate_0_1 * ov_angular_0_0);
  double r_10_ = (symmetric3_rotate_1_1 * ov_angular_0_1);
  double r_11_ = (symmetric3_rotate_1_2 * ov_angular_0_2);
  double r_12_ = (symmetric3_rotate_0_2 * ov_angular_0_0);
  double r_13_ = (symmetric3_rotate_1_2 * ov_angular_0_1);
  double r_14_ = (symmetric3_rotate_2_2 * ov_angular_0_2);
  double rhsMult1_temp_0 = (r_6_ + r_7_);
  double rhsMult1_0 = (rhsMult1_temp_0 + r_8_);
  double rhsMult2_temp_0 = (r_9_ + r_10_);
  double rhsMult2_0 = (rhsMult2_temp_0 + r_11_);
  double rhsMult3_temp_0 = (r_12_ + r_13_);
  double rhsMult3_0 = (rhsMult3_temp_0 + r_14_);
  double rhsMult_0_0 = rhsMult1_0;
  double rhsMult_0_1 = rhsMult2_0;
  double rhsMult_0_2 = rhsMult3_0;
  double data_oh_angular_temp2_0_0 = ((new_translation_1 * data_oh_linear_0_2) - (new_translation_2 * data_oh_linear_0_1));
  double data_oh_angular_temp2_0_1 = ((new_translation_2 * data_oh_linear_0_0) - (new_translation_0 * data_oh_linear_0_2));
  double data_oh_angular_temp2_0_2 = ((new_translation_0 * data_oh_linear_0_1) - (new_translation_1 * data_oh_linear_0_0));
  double data_oh_angular_0_0 = (rhsMult_0_0 + data_oh_angular_temp2_0_0);
  double data_oh_angular_0_1 = (rhsMult_0_1 + data_oh_angular_temp2_0_1);
  double data_oh_angular_0_2 = (rhsMult_0_2 + data_oh_angular_temp2_0_2);
  double all_oh_0_0 = data_oh_linear_0_0;
  double all_oh_0_1 = data_oh_linear_0_1;
  double all_oh_0_2 = data_oh_linear_0_2;
  double all_oh_0_3 = data_oh_angular_0_0;
  double all_oh_0_4 = data_oh_angular_0_1;
  double all_oh_0_5 = data_oh_angular_0_2;
  double oa_gf_linear_0_0 = oa_gf_0_0;
  double oa_gf_linear_0_1 = oa_gf_0_1;
  double oa_gf_linear_0_2 = oa_gf_0_2;
  double oa_gf_angular_0_0 = oa_gf_0_3;
  double oa_gf_angular_0_1 = oa_gf_0_4;
  double oa_gf_angular_0_2 = oa_gf_0_5;
  double data_of_linear_temp1_0_0 = ((new_translation_1 * oa_gf_angular_0_2) - (new_translation_2 * oa_gf_angular_0_1));
  double data_of_linear_temp1_0_1 = ((new_translation_2 * oa_gf_angular_0_0) - (new_translation_0 * oa_gf_angular_0_2));
  double data_of_linear_temp1_0_2 = ((new_translation_0 * oa_gf_angular_0_1) - (new_translation_1 * oa_gf_angular_0_0));
  double data_of_linear_temp2_0_0 = (oa_gf_linear_0_0 - data_of_linear_temp1_0_0);
  double data_of_linear_temp2_0_1 = (oa_gf_linear_0_1 - data_of_linear_temp1_0_1);
  double data_of_linear_temp2_0_2 = (oa_gf_linear_0_2 - data_of_linear_temp1_0_2);
  double data_of_linear_temp3_0_0 = (masses_0 * data_of_linear_temp2_0_0);
  double data_of_linear_temp3_0_1 = (masses_0 * data_of_linear_temp2_0_1);
  double data_of_linear_temp3_0_2 = (masses_0 * data_of_linear_temp2_0_2);
  double r_15_ = (symmetric3_rotate_0_0 * oa_gf_angular_0_0);
  double r_16_ = (symmetric3_rotate_0_1 * oa_gf_angular_0_1);
  double r_17_ = (symmetric3_rotate_0_2 * oa_gf_angular_0_2);
  double r_18_ = (symmetric3_rotate_0_1 * oa_gf_angular_0_0);
  double r_19_ = (symmetric3_rotate_1_1 * oa_gf_angular_0_1);
  double r_20_ = (symmetric3_rotate_1_2 * oa_gf_angular_0_2);
  double r_21_ = (symmetric3_rotate_0_2 * oa_gf_angular_0_0);
  double r_22_ = (symmetric3_rotate_1_2 * oa_gf_angular_0_1);
  double r_23_ = (symmetric3_rotate_2_2 * oa_gf_angular_0_2);
  double r_24_rhsMult1_temp_0 = (r_15_ + r_16_);
  double r_25_rhsMult1_0 = (r_24_rhsMult1_temp_0 + r_17_);
  double r_26_rhsMult2_temp_0 = (r_18_ + r_19_);
  double r_27_rhsMult2_0 = (r_26_rhsMult2_temp_0 + r_20_);
  double r_28_rhsMult3_temp_0 = (r_21_ + r_22_);
  double r_29_rhsMult3_0 = (r_28_rhsMult3_temp_0 + r_23_);
  double r_30_rhsMult_0_0 = r_25_rhsMult1_0;
  double r_30_rhsMult_0_1 = r_27_rhsMult2_0;
  double r_30_rhsMult_0_2 = r_29_rhsMult3_0;
  double data_of_angular_temp2_0_0 = ((new_translation_1 * data_of_linear_temp3_0_2) - (new_translation_2 * data_of_linear_temp3_0_1));
  double data_of_angular_temp2_0_1 = ((new_translation_2 * data_of_linear_temp3_0_0) - (new_translation_0 * data_of_linear_temp3_0_2));
  double data_of_angular_temp2_0_2 = ((new_translation_0 * data_of_linear_temp3_0_1) - (new_translation_1 * data_of_linear_temp3_0_0));
  double data_of_angular_temp3_0_0 = (r_30_rhsMult_0_0 + data_of_angular_temp2_0_0);
  double data_of_angular_temp3_0_1 = (r_30_rhsMult_0_1 + data_of_angular_temp2_0_1);
  double data_of_angular_temp3_0_2 = (r_30_rhsMult_0_2 + data_of_angular_temp2_0_2);
  double data_of_linear_temp4_0_0 = ((ov_angular_0_1 * data_oh_linear_0_2) - (ov_angular_0_2 * data_oh_linear_0_1));
  double data_of_linear_temp4_0_1 = ((ov_angular_0_2 * data_oh_linear_0_0) - (ov_angular_0_0 * data_oh_linear_0_2));
  double data_of_linear_temp4_0_2 = ((ov_angular_0_0 * data_oh_linear_0_1) - (ov_angular_0_1 * data_oh_linear_0_0));
  double data_of_angular_temp4_0_0 = ((ov_angular_0_1 * data_oh_angular_0_2) - (ov_angular_0_2 * data_oh_angular_0_1));
  double data_of_angular_temp4_0_1 = ((ov_angular_0_2 * data_oh_angular_0_0) - (ov_angular_0_0 * data_oh_angular_0_2));
  double data_of_angular_temp4_0_2 = ((ov_angular_0_0 * data_oh_angular_0_1) - (ov_angular_0_1 * data_oh_angular_0_0));
  double data_of_angular_temp5_0_0 = ((ov_linear_0_1 * data_oh_linear_0_2) - (ov_linear_0_2 * data_oh_linear_0_1));
  double data_of_angular_temp5_0_1 = ((ov_linear_0_2 * data_oh_linear_0_0) - (ov_linear_0_0 * data_oh_linear_0_2));
  double data_of_angular_temp5_0_2 = ((ov_linear_0_0 * data_oh_linear_0_1) - (ov_linear_0_1 * data_oh_linear_0_0));
  double data_of_angular_temp6_0_0 = (data_of_angular_temp4_0_0 + data_of_angular_temp5_0_0);
  double data_of_angular_temp6_0_1 = (data_of_angular_temp4_0_1 + data_of_angular_temp5_0_1);
  double data_of_angular_temp6_0_2 = (data_of_angular_temp4_0_2 + data_of_angular_temp5_0_2);
  double data_of_linear_0_0 = (data_of_linear_temp3_0_0 + data_of_linear_temp4_0_0);
  double data_of_linear_0_1 = (data_of_linear_temp3_0_1 + data_of_linear_temp4_0_1);
  double data_of_linear_0_2 = (data_of_linear_temp3_0_2 + data_of_linear_temp4_0_2);
  double data_of_angular_0_0 = (data_of_angular_temp3_0_0 + data_of_angular_temp6_0_0);
  double data_of_angular_0_1 = (data_of_angular_temp3_0_1 + data_of_angular_temp6_0_1);
  double data_of_angular_0_2 = (data_of_angular_temp3_0_2 + data_of_angular_temp6_0_2);
  double all_of_0_0 = data_of_linear_0_0;
  double all_of_0_1 = data_of_linear_0_1;
  double all_of_0_2 = data_of_linear_0_2;
  double all_of_0_3 = data_of_angular_0_0;
  double all_of_0_4 = data_of_angular_0_1;
  double all_of_0_5 = data_of_angular_0_2;
  double act_constraint_rotation_col_0_0 = limi_rotation_0_0_2;
  double act_constraint_rotation_col_0_1 = limi_rotation_0_1_2;
  double act_constraint_rotation_col_0_2 = limi_rotation_0_2_2;
  double act_constraint_linear_0_0 = ((limi_translation_0_1 * act_constraint_rotation_col_0_2) - (limi_translation_0_2 * act_constraint_rotation_col_0_1));
  double act_constraint_linear_0_1 = ((limi_translation_0_2 * act_constraint_rotation_col_0_0) - (limi_translation_0_0 * act_constraint_rotation_col_0_2));
  double act_constraint_linear_0_2 = ((limi_translation_0_0 * act_constraint_rotation_col_0_1) - (limi_translation_0_1 * act_constraint_rotation_col_0_0));
  double j_cols_0_0 = act_constraint_linear_0_0;
  double j_cols_0_1 = act_constraint_linear_0_1;
  double j_cols_0_2 = act_constraint_linear_0_2;
  double j_cols_0_3 = act_constraint_rotation_col_0_0;
  double j_cols_0_4 = act_constraint_rotation_col_0_1;
  double j_cols_0_5 = act_constraint_rotation_col_0_2;
  double mout_linear_cross_angular_0_0 = ((ov_linear_0_1 * act_constraint_rotation_col_0_2) - (ov_linear_0_2 * act_constraint_rotation_col_0_1));
  double mout_linear_cross_angular_0_1 = ((ov_linear_0_2 * act_constraint_rotation_col_0_0) - (ov_linear_0_0 * act_constraint_rotation_col_0_2));
  double mout_linear_cross_angular_0_2 = ((ov_linear_0_0 * act_constraint_rotation_col_0_1) - (ov_linear_0_1 * act_constraint_rotation_col_0_0));
  double mout_angular_cross_linear_0_0 = ((ov_angular_0_1 * act_constraint_linear_0_2) - (ov_angular_0_2 * act_constraint_linear_0_1));
  double mout_angular_cross_linear_0_1 = ((ov_angular_0_2 * act_constraint_linear_0_0) - (ov_angular_0_0 * act_constraint_linear_0_2));
  double mout_angular_cross_linear_0_2 = ((ov_angular_0_0 * act_constraint_linear_0_1) - (ov_angular_0_1 * act_constraint_linear_0_0));
  double mout_linear_0_0 = (mout_linear_cross_angular_0_0 + mout_angular_cross_linear_0_0);
  double mout_linear_0_1 = (mout_linear_cross_angular_0_1 + mout_angular_cross_linear_0_1);
  double mout_linear_0_2 = (mout_linear_cross_angular_0_2 + mout_angular_cross_linear_0_2);
  double mout_angular_0_0 = ((ov_angular_0_1 * act_constraint_rotation_col_0_2) - (ov_angular_0_2 * act_constraint_rotation_col_0_1));
  double mout_angular_0_1 = ((ov_angular_0_2 * act_constraint_rotation_col_0_0) - (ov_angular_0_0 * act_constraint_rotation_col_0_2));
  double mout_angular_0_2 = ((ov_angular_0_0 * act_constraint_rotation_col_0_1) - (ov_angular_0_1 * act_constraint_rotation_col_0_0));
  double dj_cols_0_0 = mout_linear_0_0;
  double dj_cols_0_1 = mout_linear_0_1;
  double dj_cols_0_2 = mout_linear_0_2;
  double dj_cols_0_3 = mout_angular_0_0;
  double dj_cols_0_4 = mout_angular_0_1;
  double dj_cols_0_5 = mout_angular_0_2;
  double oa_gf_parent_linear_0_0 = 0;
  double oa_gf_parent_linear_0_1 = 0;
  double oa_gf_parent_linear_0_2 = 0;
  double oa_gf_parent_angular_0_0 = 0;
  double oa_gf_parent_angular_0_1 = 0;
  double oa_gf_parent_angular_0_2 = 9.81;
  double r_31_mout_linear_cross_angular_0_0 = ((oa_gf_parent_linear_0_1 * act_constraint_rotation_col_0_2) - (oa_gf_parent_linear_0_2 * act_constraint_rotation_col_0_1));
  double r_31_mout_linear_cross_angular_0_1 = ((oa_gf_parent_linear_0_2 * act_constraint_rotation_col_0_0) - (oa_gf_parent_linear_0_0 * act_constraint_rotation_col_0_2));
  double r_31_mout_linear_cross_angular_0_2 = ((oa_gf_parent_linear_0_0 * act_constraint_rotation_col_0_1) - (oa_gf_parent_linear_0_1 * act_constraint_rotation_col_0_0));
  double r_32_mout_angular_cross_linear_0_0 = ((oa_gf_parent_angular_0_1 * act_constraint_linear_0_2) - (oa_gf_parent_angular_0_2 * act_constraint_linear_0_1));
  double r_32_mout_angular_cross_linear_0_1 = ((oa_gf_parent_angular_0_2 * act_constraint_linear_0_0) - (oa_gf_parent_angular_0_0 * act_constraint_linear_0_2));
  double r_32_mout_angular_cross_linear_0_2 = ((oa_gf_parent_angular_0_0 * act_constraint_linear_0_1) - (oa_gf_parent_angular_0_1 * act_constraint_linear_0_0));
  double r_33_mout_linear_0_0 = (r_31_mout_linear_cross_angular_0_0 + r_32_mout_angular_cross_linear_0_0);
  double r_33_mout_linear_0_1 = (r_31_mout_linear_cross_angular_0_1 + r_32_mout_angular_cross_linear_0_1);
  double r_33_mout_linear_0_2 = (r_31_mout_linear_cross_angular_0_2 + r_32_mout_angular_cross_linear_0_2);
  double r_34_mout_angular_0_0 = ((oa_gf_parent_angular_0_1 * act_constraint_rotation_col_0_2) - (oa_gf_parent_angular_0_2 * act_constraint_rotation_col_0_1));
  double r_34_mout_angular_0_1 = ((oa_gf_parent_angular_0_2 * act_constraint_rotation_col_0_0) - (oa_gf_parent_angular_0_0 * act_constraint_rotation_col_0_2));
  double r_34_mout_angular_0_2 = ((oa_gf_parent_angular_0_0 * act_constraint_rotation_col_0_1) - (oa_gf_parent_angular_0_1 * act_constraint_rotation_col_0_0));
  double dAdv_cols_linear_0_0 = mout_linear_0_0;
  double dAdv_cols_linear_0_1 = mout_linear_0_1;
  double dAdv_cols_linear_0_2 = mout_linear_0_2;
  double dAdv_cols_angular_0_0 = mout_angular_0_0;
  double dAdv_cols_angular_0_1 = mout_angular_0_1;
  double dAdv_cols_angular_0_2 = mout_angular_0_2;
  double dvdq_cols_linear_0_0 = 0;
  double dvdq_cols_linear_0_1 = 0;
  double dvdq_cols_linear_0_2 = 0;
  double dvdq_cols_angular_0_0 = 0;
  double dvdq_cols_angular_0_1 = 0;
  double dvdq_cols_angular_0_2 = 0;
  double dAdq_cols_0_0 = r_33_mout_linear_0_0;
  double dAdq_cols_0_1 = r_33_mout_linear_0_1;
  double dAdq_cols_0_2 = r_33_mout_linear_0_2;
  double dAdq_cols_0_3 = r_34_mout_angular_0_0;
  double dAdq_cols_0_4 = r_34_mout_angular_0_1;
  double dAdq_cols_0_5 = r_34_mout_angular_0_2;
  double dAdv_cols_0_0 = dAdv_cols_linear_0_0;
  double dAdv_cols_0_1 = dAdv_cols_linear_0_1;
  double dAdv_cols_0_2 = dAdv_cols_linear_0_2;
  double dAdv_cols_0_3 = dAdv_cols_angular_0_0;
  double dAdv_cols_0_4 = dAdv_cols_angular_0_1;
  double dAdv_cols_0_5 = dAdv_cols_angular_0_2;
  double dVdq_cols_0_0 = dvdq_cols_linear_0_0;
  double dVdq_cols_0_1 = dvdq_cols_linear_0_1;
  double dVdq_cols_0_2 = dvdq_cols_linear_0_2;
  double dVdq_cols_0_3 = dvdq_cols_angular_0_0;
  double dVdq_cols_0_4 = dvdq_cols_angular_0_1;
  double dVdq_cols_0_5 = dvdq_cols_angular_0_2;
  double mv_linear_0 = (masses_0 * ov_linear_0_0);
  double mv_linear_1 = (masses_0 * ov_linear_0_1);
  double mv_linear_2 = (masses_0 * ov_linear_0_2);
  double mv_angular_0 = (masses_0 * ov_angular_0_0);
  double mv_angular_1 = (masses_0 * ov_angular_0_1);
  double mv_angular_2 = (masses_0 * ov_angular_0_2);
  double skew_vec3d_0_0 = 0;
  double skew_vec3d_0_1 = -(mv_linear_2);
  double skew_vec3d_0_2 = mv_linear_1;
  double skew_vec3d_1_0 = mv_linear_2;
  double skew_vec3d_1_1 = 0;
  double skew_vec3d_1_2 = -(mv_linear_0);
  double skew_vec3d_2_0 = -(mv_linear_1);
  double skew_vec3d_2_1 = mv_linear_0;
  double skew_vec3d_2_2 = 0;
  double skew_square_c1_0_0 = (mv_angular_0 * new_translation_0);
  double skew_square_c1_0_1 = (mv_angular_1 * new_translation_0);
  double skew_square_c1_0_2 = (mv_angular_2 * new_translation_0);
  double skew_square_c1_1_0 = (mv_angular_0 * new_translation_1);
  double skew_square_c1_1_1 = (mv_angular_1 * new_translation_1);
  double skew_square_c1_1_2 = (mv_angular_2 * new_translation_1);
  double skew_square_c1_2_0 = (mv_angular_0 * new_translation_2);
  double skew_square_c1_2_1 = (mv_angular_1 * new_translation_2);
  double skew_square_c1_2_2 = (mv_angular_2 * new_translation_2);
  double skew_square_udotv = (((new_translation_0 * mv_angular_0) + (new_translation_1 * mv_angular_1)) + (new_translation_2 * mv_angular_2));
  double skew_square_c2_0_0 = (skew_square_c1_0_0 - skew_square_udotv);
  double skew_square_c2_0_1 = skew_square_c1_0_1;
  double skew_square_c2_0_2 = skew_square_c1_0_2;
  double skew_square_c2_1_0 = skew_square_c1_1_0;
  double skew_square_c2_1_1 = (skew_square_c1_1_1 - skew_square_udotv);
  double skew_square_c2_1_2 = skew_square_c1_1_2;
  double skew_square_c2_2_0 = skew_square_c1_2_0;
  double skew_square_c2_2_1 = skew_square_c1_2_1;
  double skew_square_c2_2_2 = (skew_square_c1_2_2 - skew_square_udotv);
  double r_35_skew_square_c1_0_0 = (new_translation_0 * mv_angular_0);
  double r_35_skew_square_c1_0_1 = (new_translation_1 * mv_angular_0);
  double r_35_skew_square_c1_0_2 = (new_translation_2 * mv_angular_0);
  double r_35_skew_square_c1_1_0 = (new_translation_0 * mv_angular_1);
  double r_35_skew_square_c1_1_1 = (new_translation_1 * mv_angular_1);
  double r_35_skew_square_c1_1_2 = (new_translation_2 * mv_angular_1);
  double r_35_skew_square_c1_2_0 = (new_translation_0 * mv_angular_2);
  double r_35_skew_square_c1_2_1 = (new_translation_1 * mv_angular_2);
  double r_35_skew_square_c1_2_2 = (new_translation_2 * mv_angular_2);
  double r_36_skew_square_udotv = (((mv_angular_0 * new_translation_0) + (mv_angular_1 * new_translation_1)) + (mv_angular_2 * new_translation_2));
  double r_37_skew_square_c2_0_0 = (r_35_skew_square_c1_0_0 - r_36_skew_square_udotv);
  double r_37_skew_square_c2_0_1 = r_35_skew_square_c1_0_1;
  double r_37_skew_square_c2_0_2 = r_35_skew_square_c1_0_2;
  double r_37_skew_square_c2_1_0 = r_35_skew_square_c1_1_0;
  double r_37_skew_square_c2_1_1 = (r_35_skew_square_c1_1_1 - r_36_skew_square_udotv);
  double r_37_skew_square_c2_1_2 = r_35_skew_square_c1_1_2;
  double r_37_skew_square_c2_2_0 = r_35_skew_square_c1_2_0;
  double r_37_skew_square_c2_2_1 = r_35_skew_square_c1_2_1;
  double r_37_skew_square_c2_2_2 = (r_35_skew_square_c1_2_2 - r_36_skew_square_udotv);
  double res_first_temp_0_0 = (r_37_skew_square_c2_0_0 - skew_square_c2_0_0);
  double res_first_temp_0_1 = (r_37_skew_square_c2_0_1 - skew_square_c2_0_1);
  double res_first_temp_0_2 = (r_37_skew_square_c2_0_2 - skew_square_c2_0_2);
  double res_first_temp_1_0 = (r_37_skew_square_c2_1_0 - skew_square_c2_1_0);
  double res_first_temp_1_1 = (r_37_skew_square_c2_1_1 - skew_square_c2_1_1);
  double res_first_temp_1_2 = (r_37_skew_square_c2_1_2 - skew_square_c2_1_2);
  double res_first_temp_2_0 = (r_37_skew_square_c2_2_0 - skew_square_c2_2_0);
  double res_first_temp_2_1 = (r_37_skew_square_c2_2_1 - skew_square_c2_2_1);
  double res_first_temp_2_2 = (r_37_skew_square_c2_2_2 - skew_square_c2_2_2);
  double res_first_0_0 = (res_first_temp_0_0 - skew_vec3d_0_0);
  double res_first_0_1 = (res_first_temp_0_1 - skew_vec3d_0_1);
  double res_first_0_2 = (res_first_temp_0_2 - skew_vec3d_0_2);
  double res_first_1_0 = (res_first_temp_1_0 - skew_vec3d_1_0);
  double res_first_1_1 = (res_first_temp_1_1 - skew_vec3d_1_1);
  double res_first_1_2 = (res_first_temp_1_2 - skew_vec3d_1_2);
  double res_first_2_0 = (res_first_temp_2_0 - skew_vec3d_2_0);
  double res_first_2_1 = (res_first_temp_2_1 - skew_vec3d_2_1);
  double res_first_2_2 = (res_first_temp_2_2 - skew_vec3d_2_2);
  double r_38_skew_square_c1_0_0 = (mv_linear_0 * new_translation_0);
  double r_38_skew_square_c1_0_1 = (mv_linear_1 * new_translation_0);
  double r_38_skew_square_c1_0_2 = (mv_linear_2 * new_translation_0);
  double r_38_skew_square_c1_1_0 = (mv_linear_0 * new_translation_1);
  double r_38_skew_square_c1_1_1 = (mv_linear_1 * new_translation_1);
  double r_38_skew_square_c1_1_2 = (mv_linear_2 * new_translation_1);
  double r_38_skew_square_c1_2_0 = (mv_linear_0 * new_translation_2);
  double r_38_skew_square_c1_2_1 = (mv_linear_1 * new_translation_2);
  double r_38_skew_square_c1_2_2 = (mv_linear_2 * new_translation_2);
  double r_39_skew_square_udotv = (((new_translation_0 * mv_linear_0) + (new_translation_1 * mv_linear_1)) + (new_translation_2 * mv_linear_2));
  double r_40_skew_square_c2_0_0 = (r_38_skew_square_c1_0_0 - r_39_skew_square_udotv);
  double r_40_skew_square_c2_0_1 = r_38_skew_square_c1_0_1;
  double r_40_skew_square_c2_0_2 = r_38_skew_square_c1_0_2;
  double r_40_skew_square_c2_1_0 = r_38_skew_square_c1_1_0;
  double r_40_skew_square_c2_1_1 = (r_38_skew_square_c1_1_1 - r_39_skew_square_udotv);
  double r_40_skew_square_c2_1_2 = r_38_skew_square_c1_1_2;
  double r_40_skew_square_c2_2_0 = r_38_skew_square_c1_2_0;
  double r_40_skew_square_c2_2_1 = r_38_skew_square_c1_2_1;
  double r_40_skew_square_c2_2_2 = (r_38_skew_square_c1_2_2 - r_39_skew_square_udotv);
  double r_41_skew_square_c1_0_0 = (new_translation_0 * mv_linear_0);
  double r_41_skew_square_c1_0_1 = (new_translation_1 * mv_linear_0);
  double r_41_skew_square_c1_0_2 = (new_translation_2 * mv_linear_0);
  double r_41_skew_square_c1_1_0 = (new_translation_0 * mv_linear_1);
  double r_41_skew_square_c1_1_1 = (new_translation_1 * mv_linear_1);
  double r_41_skew_square_c1_1_2 = (new_translation_2 * mv_linear_1);
  double r_41_skew_square_c1_2_0 = (new_translation_0 * mv_linear_2);
  double r_41_skew_square_c1_2_1 = (new_translation_1 * mv_linear_2);
  double r_41_skew_square_c1_2_2 = (new_translation_2 * mv_linear_2);
  double r_42_skew_square_udotv = (((mv_linear_0 * new_translation_0) + (mv_linear_1 * new_translation_1)) + (mv_linear_2 * new_translation_2));
  double r_43_skew_square_c2_0_0 = (r_41_skew_square_c1_0_0 - r_42_skew_square_udotv);
  double r_43_skew_square_c2_0_1 = r_41_skew_square_c1_0_1;
  double r_43_skew_square_c2_0_2 = r_41_skew_square_c1_0_2;
  double r_43_skew_square_c2_1_0 = r_41_skew_square_c1_1_0;
  double r_43_skew_square_c2_1_1 = (r_41_skew_square_c1_1_1 - r_42_skew_square_udotv);
  double r_43_skew_square_c2_1_2 = r_41_skew_square_c1_1_2;
  double r_43_skew_square_c2_2_0 = r_41_skew_square_c1_2_0;
  double r_43_skew_square_c2_2_1 = r_41_skew_square_c1_2_1;
  double r_43_skew_square_c2_2_2 = (r_41_skew_square_c1_2_2 - r_42_skew_square_udotv);
  double skew_second_second_neg_0_0 = -(r_40_skew_square_c2_0_0);
  double skew_second_second_neg_0_1 = -(r_40_skew_square_c2_0_1);
  double skew_second_second_neg_0_2 = -(r_40_skew_square_c2_0_2);
  double skew_second_second_neg_1_0 = -(r_40_skew_square_c2_1_0);
  double skew_second_second_neg_1_1 = -(r_40_skew_square_c2_1_1);
  double skew_second_second_neg_1_2 = -(r_40_skew_square_c2_1_2);
  double skew_second_second_neg_2_0 = -(r_40_skew_square_c2_2_0);
  double skew_second_second_neg_2_1 = -(r_40_skew_square_c2_2_1);
  double skew_second_second_neg_2_2 = -(r_40_skew_square_c2_2_2);
  double res_second_0_0 = (skew_second_second_neg_0_0 - r_43_skew_square_c2_0_0);
  double res_second_0_1 = (skew_second_second_neg_0_1 - r_43_skew_square_c2_0_1);
  double res_second_0_2 = (skew_second_second_neg_0_2 - r_43_skew_square_c2_0_2);
  double res_second_1_0 = (skew_second_second_neg_1_0 - r_43_skew_square_c2_1_0);
  double res_second_1_1 = (skew_second_second_neg_1_1 - r_43_skew_square_c2_1_1);
  double res_second_1_2 = (skew_second_second_neg_1_2 - r_43_skew_square_c2_1_2);
  double res_second_2_0 = (skew_second_second_neg_2_0 - r_43_skew_square_c2_2_0);
  double res_second_2_1 = (skew_second_second_neg_2_1 - r_43_skew_square_c2_2_1);
  double res_second_2_2 = (skew_second_second_neg_2_2 - r_43_skew_square_c2_2_2);
  double alpha_skew_square_0_0 = (((new_translation_1 * new_translation_1) + (new_translation_2 * new_translation_2)) * -(masses_0));
  double alpha_skew_square_0_1 = (new_translation_1 * (new_translation_0 * masses_0));
  double alpha_skew_square_0_2 = (new_translation_2 * (new_translation_0 * masses_0));
  double alpha_skew_square_1_0 = (new_translation_1 * (new_translation_0 * masses_0));
  double alpha_skew_square_1_1 = (((new_translation_0 * new_translation_0) + (new_translation_2 * new_translation_2)) * -(masses_0));
  double alpha_skew_square_1_2 = (new_translation_2 * (new_translation_1 * masses_0));
  double alpha_skew_square_2_0 = (new_translation_2 * (new_translation_0 * masses_0));
  double alpha_skew_square_2_1 = (new_translation_2 * (new_translation_1 * masses_0));
  double alpha_skew_square_2_2 = (((new_translation_0 * new_translation_0) + (new_translation_1 * new_translation_1)) * -(masses_0));
  double res_third_0_0 = (symmetric3_rotate_0_0 - alpha_skew_square_0_0);
  double res_third_0_1 = (symmetric3_rotate_0_1 - alpha_skew_square_0_1);
  double res_third_0_2 = (symmetric3_rotate_0_2 - alpha_skew_square_0_2);
  double res_third_1_0 = (symmetric3_rotate_1_0 - alpha_skew_square_1_0);
  double res_third_1_1 = (symmetric3_rotate_1_1 - alpha_skew_square_1_1);
  double res_third_1_2 = (symmetric3_rotate_1_2 - alpha_skew_square_1_2);
  double res_third_2_0 = (symmetric3_rotate_2_0 - alpha_skew_square_2_0);
  double res_third_2_1 = (symmetric3_rotate_2_1 - alpha_skew_square_2_1);
  double res_third_2_2 = (symmetric3_rotate_2_2 - alpha_skew_square_2_2);
  double r_44_skew_vec3d_0_0 = 0;
  double r_44_skew_vec3d_0_1 = -(ov_angular_0_2);
  double r_44_skew_vec3d_0_2 = ov_angular_0_1;
  double r_44_skew_vec3d_1_0 = ov_angular_0_2;
  double r_44_skew_vec3d_1_1 = 0;
  double r_44_skew_vec3d_1_2 = -(ov_angular_0_0);
  double r_44_skew_vec3d_2_0 = -(ov_angular_0_1);
  double r_44_skew_vec3d_2_1 = ov_angular_0_0;
  double r_44_skew_vec3d_2_2 = 0;
  double res_fourth_0_0 = (((res_third_0_0 * r_44_skew_vec3d_0_0) + (res_third_0_1 * r_44_skew_vec3d_1_0)) + (res_third_0_2 * r_44_skew_vec3d_2_0));
  double res_fourth_0_1 = (((res_third_0_0 * r_44_skew_vec3d_0_1) + (res_third_0_1 * r_44_skew_vec3d_1_1)) + (res_third_0_2 * r_44_skew_vec3d_2_1));
  double res_fourth_0_2 = (((res_third_0_0 * r_44_skew_vec3d_0_2) + (res_third_0_1 * r_44_skew_vec3d_1_2)) + (res_third_0_2 * r_44_skew_vec3d_2_2));
  double res_fourth_1_0 = (((res_third_1_0 * r_44_skew_vec3d_0_0) + (res_third_1_1 * r_44_skew_vec3d_1_0)) + (res_third_1_2 * r_44_skew_vec3d_2_0));
  double res_fourth_1_1 = (((res_third_1_0 * r_44_skew_vec3d_0_1) + (res_third_1_1 * r_44_skew_vec3d_1_1)) + (res_third_1_2 * r_44_skew_vec3d_2_1));
  double res_fourth_1_2 = (((res_third_1_0 * r_44_skew_vec3d_0_2) + (res_third_1_1 * r_44_skew_vec3d_1_2)) + (res_third_1_2 * r_44_skew_vec3d_2_2));
  double res_fourth_2_0 = (((res_third_2_0 * r_44_skew_vec3d_0_0) + (res_third_2_1 * r_44_skew_vec3d_1_0)) + (res_third_2_2 * r_44_skew_vec3d_2_0));
  double res_fourth_2_1 = (((res_third_2_0 * r_44_skew_vec3d_0_1) + (res_third_2_1 * r_44_skew_vec3d_1_1)) + (res_third_2_2 * r_44_skew_vec3d_2_1));
  double res_fourth_2_2 = (((res_third_2_0 * r_44_skew_vec3d_0_2) + (res_third_2_1 * r_44_skew_vec3d_1_2)) + (res_third_2_2 * r_44_skew_vec3d_2_2));
  double res_fifth_0_0 = (res_second_0_0 - res_fourth_0_0);
  double res_fifth_0_1 = (res_second_0_1 - res_fourth_0_1);
  double res_fifth_0_2 = (res_second_0_2 - res_fourth_0_2);
  double res_fifth_1_0 = (res_second_1_0 - res_fourth_1_0);
  double res_fifth_1_1 = (res_second_1_1 - res_fourth_1_1);
  double res_fifth_1_2 = (res_second_1_2 - res_fourth_1_2);
  double res_fifth_2_0 = (res_second_2_0 - res_fourth_2_0);
  double res_fifth_2_1 = (res_second_2_1 - res_fourth_2_1);
  double res_fifth_2_2 = (res_second_2_2 - res_fourth_2_2);
  double res_third_first_col_0 = res_third_0_0;
  double res_third_first_col_1 = res_third_1_0;
  double res_third_first_col_2 = res_third_2_0;
  double res_third_second_col_0 = res_third_0_1;
  double res_third_second_col_1 = res_third_1_1;
  double res_third_second_col_2 = res_third_2_1;
  double res_third_third_col_0 = res_third_0_2;
  double res_third_third_col_1 = res_third_1_2;
  double res_third_third_col_2 = res_third_2_2;
  double res_sixth_first_col_0 = ((ov_angular_0_1 * res_third_first_col_2) - (ov_angular_0_2 * res_third_first_col_1));
  double res_sixth_first_col_1 = ((ov_angular_0_2 * res_third_first_col_0) - (ov_angular_0_0 * res_third_first_col_2));
  double res_sixth_first_col_2 = ((ov_angular_0_0 * res_third_first_col_1) - (ov_angular_0_1 * res_third_first_col_0));
  double res_sixth_second_col_0 = ((ov_angular_0_1 * res_third_second_col_2) - (ov_angular_0_2 * res_third_second_col_1));
  double res_sixth_second_col_1 = ((ov_angular_0_2 * res_third_second_col_0) - (ov_angular_0_0 * res_third_second_col_2));
  double res_sixth_second_col_2 = ((ov_angular_0_0 * res_third_second_col_1) - (ov_angular_0_1 * res_third_second_col_0));
  double res_sixth_third_col_0 = ((ov_angular_0_1 * res_third_third_col_2) - (ov_angular_0_2 * res_third_third_col_1));
  double res_sixth_third_col_1 = ((ov_angular_0_2 * res_third_third_col_0) - (ov_angular_0_0 * res_third_third_col_2));
  double res_sixth_third_col_2 = ((ov_angular_0_0 * res_third_third_col_1) - (ov_angular_0_1 * res_third_third_col_0));
  double res_sixth_0_0 = (res_fifth_0_0 + res_sixth_first_col_0);
  double res_sixth_0_1 = (res_fifth_0_1 + res_sixth_second_col_0);
  double res_sixth_0_2 = (res_fifth_0_2 + res_sixth_third_col_0);
  double res_sixth_1_0 = (res_fifth_1_0 + res_sixth_first_col_1);
  double res_sixth_1_1 = (res_fifth_1_1 + res_sixth_second_col_1);
  double res_sixth_1_2 = (res_fifth_1_2 + res_sixth_third_col_1);
  double res_sixth_2_0 = (res_fifth_2_0 + res_sixth_first_col_2);
  double res_sixth_2_1 = (res_fifth_2_1 + res_sixth_second_col_2);
  double res_sixth_2_2 = (res_fifth_2_2 + res_sixth_third_col_2);
  double inertia_variation_0_0_0 = 0;
  double inertia_variation_0_0_1 = 0;
  double inertia_variation_0_0_2 = 0;
  double inertia_variation_0_0_3 = res_first_0_0;
  double inertia_variation_0_0_4 = res_first_0_1;
  double inertia_variation_0_0_5 = res_first_0_2;
  double inertia_variation_0_1_0 = 0;
  double inertia_variation_0_1_1 = 0;
  double inertia_variation_0_1_2 = 0;
  double inertia_variation_0_1_3 = res_first_1_0;
  double inertia_variation_0_1_4 = res_first_1_1;
  double inertia_variation_0_1_5 = res_first_1_2;
  double inertia_variation_0_2_0 = 0;
  double inertia_variation_0_2_1 = 0;
  double inertia_variation_0_2_2 = 0;
  double inertia_variation_0_2_3 = res_first_2_0;
  double inertia_variation_0_2_4 = res_first_2_1;
  double inertia_variation_0_2_5 = res_first_2_2;
  double inertia_variation_0_3_0 = res_first_0_0;
  double inertia_variation_0_3_1 = res_first_1_0;
  double inertia_variation_0_3_2 = res_first_2_0;
  double inertia_variation_0_3_3 = res_sixth_0_0;
  double inertia_variation_0_3_4 = res_sixth_0_1;
  double inertia_variation_0_3_5 = res_sixth_0_2;
  double inertia_variation_0_4_0 = res_first_0_1;
  double inertia_variation_0_4_1 = res_first_1_1;
  double inertia_variation_0_4_2 = res_first_2_1;
  double inertia_variation_0_4_3 = res_sixth_1_0;
  double inertia_variation_0_4_4 = res_sixth_1_1;
  double inertia_variation_0_4_5 = res_sixth_1_2;
  double inertia_variation_0_5_0 = res_first_0_2;
  double inertia_variation_0_5_1 = res_first_1_2;
  double inertia_variation_0_5_2 = res_first_2_2;
  double inertia_variation_0_5_3 = res_sixth_2_0;
  double inertia_variation_0_5_4 = res_sixth_2_1;
  double inertia_variation_0_5_5 = res_sixth_2_2;
  double add_force_cross_linear_angular_0_0 = inertia_variation_0_0_3;
  double add_force_cross_linear_angular_0_1 = inertia_variation_0_0_4;
  double add_force_cross_linear_angular_0_2 = inertia_variation_0_0_5;
  double add_force_cross_linear_angular_1_0 = inertia_variation_0_1_3;
  double add_force_cross_linear_angular_1_1 = inertia_variation_0_1_4;
  double add_force_cross_linear_angular_1_2 = inertia_variation_0_1_5;
  double add_force_cross_linear_angular_2_0 = inertia_variation_0_2_3;
  double add_force_cross_linear_angular_2_1 = inertia_variation_0_2_4;
  double add_force_cross_linear_angular_2_2 = inertia_variation_0_2_5;
  double add_force_cross_angular_linear_0_0 = inertia_variation_0_3_0;
  double add_force_cross_angular_linear_0_1 = inertia_variation_0_3_1;
  double add_force_cross_angular_linear_0_2 = inertia_variation_0_3_2;
  double add_force_cross_angular_linear_1_0 = inertia_variation_0_4_0;
  double add_force_cross_angular_linear_1_1 = inertia_variation_0_4_1;
  double add_force_cross_angular_linear_1_2 = inertia_variation_0_4_2;
  double add_force_cross_angular_linear_2_0 = inertia_variation_0_5_0;
  double add_force_cross_angular_linear_2_1 = inertia_variation_0_5_1;
  double add_force_cross_angular_linear_2_2 = inertia_variation_0_5_2;
  double add_force_cross_angular_angular_0_0 = inertia_variation_0_3_3;
  double add_force_cross_angular_angular_0_1 = inertia_variation_0_3_4;
  double add_force_cross_angular_angular_0_2 = inertia_variation_0_3_5;
  double add_force_cross_angular_angular_1_0 = inertia_variation_0_4_3;
  double add_force_cross_angular_angular_1_1 = inertia_variation_0_4_4;
  double add_force_cross_angular_angular_1_2 = inertia_variation_0_4_5;
  double add_force_cross_angular_angular_2_0 = inertia_variation_0_5_3;
  double add_force_cross_angular_angular_2_1 = inertia_variation_0_5_4;
  double add_force_cross_angular_angular_2_2 = inertia_variation_0_5_5;
  double minus_f_linear_0 = -(data_oh_linear_0_0);
  double minus_f_linear_1 = -(data_oh_linear_0_1);
  double minus_f_linear_2 = -(data_oh_linear_0_2);
  double minus_f_angular_0 = -(data_oh_angular_0_0);
  double minus_f_angular_1 = -(data_oh_angular_0_1);
  double minus_f_angular_2 = -(data_oh_angular_0_2);
  double add_skew_0_0 = add_force_cross_linear_angular_0_0;
  double add_skew_0_1 = (add_force_cross_linear_angular_0_1 - minus_f_linear_2);
  double add_skew_0_2 = (add_force_cross_linear_angular_0_2 + minus_f_linear_1);
  double add_skew_1_0 = (add_force_cross_linear_angular_1_0 + minus_f_linear_2);
  double add_skew_1_1 = add_force_cross_linear_angular_1_1;
  double add_skew_1_2 = (add_force_cross_linear_angular_1_2 - minus_f_linear_0);
  double add_skew_2_0 = (add_force_cross_linear_angular_2_0 - minus_f_linear_1);
  double add_skew_2_1 = (add_force_cross_linear_angular_2_1 + minus_f_linear_0);
  double add_skew_2_2 = add_force_cross_linear_angular_2_2;
  double res_linear_angular_0_0 = add_skew_0_0;
  double res_linear_angular_0_1 = add_skew_0_1;
  double res_linear_angular_0_2 = add_skew_0_2;
  double res_linear_angular_1_0 = add_skew_1_0;
  double res_linear_angular_1_1 = add_skew_1_1;
  double res_linear_angular_1_2 = add_skew_1_2;
  double res_linear_angular_2_0 = add_skew_2_0;
  double res_linear_angular_2_1 = add_skew_2_1;
  double res_linear_angular_2_2 = add_skew_2_2;
  double r_45_add_skew_0_0 = add_force_cross_angular_linear_0_0;
  double r_45_add_skew_0_1 = (add_force_cross_angular_linear_0_1 - minus_f_linear_2);
  double r_45_add_skew_0_2 = (add_force_cross_angular_linear_0_2 + minus_f_linear_1);
  double r_45_add_skew_1_0 = (add_force_cross_angular_linear_1_0 + minus_f_linear_2);
  double r_45_add_skew_1_1 = add_force_cross_angular_linear_1_1;
  double r_45_add_skew_1_2 = (add_force_cross_angular_linear_1_2 - minus_f_linear_0);
  double r_45_add_skew_2_0 = (add_force_cross_angular_linear_2_0 - minus_f_linear_1);
  double r_45_add_skew_2_1 = (add_force_cross_angular_linear_2_1 + minus_f_linear_0);
  double r_45_add_skew_2_2 = add_force_cross_angular_linear_2_2;
  double res_angular_linear_0_0 = r_45_add_skew_0_0;
  double res_angular_linear_0_1 = r_45_add_skew_0_1;
  double res_angular_linear_0_2 = r_45_add_skew_0_2;
  double res_angular_linear_1_0 = r_45_add_skew_1_0;
  double res_angular_linear_1_1 = r_45_add_skew_1_1;
  double res_angular_linear_1_2 = r_45_add_skew_1_2;
  double res_angular_linear_2_0 = r_45_add_skew_2_0;
  double res_angular_linear_2_1 = r_45_add_skew_2_1;
  double res_angular_linear_2_2 = r_45_add_skew_2_2;
  double r_46_add_skew_0_0 = add_force_cross_angular_angular_0_0;
  double r_46_add_skew_0_1 = (add_force_cross_angular_angular_0_1 - minus_f_angular_2);
  double r_46_add_skew_0_2 = (add_force_cross_angular_angular_0_2 + minus_f_angular_1);
  double r_46_add_skew_1_0 = (add_force_cross_angular_angular_1_0 + minus_f_angular_2);
  double r_46_add_skew_1_1 = add_force_cross_angular_angular_1_1;
  double r_46_add_skew_1_2 = (add_force_cross_angular_angular_1_2 - minus_f_angular_0);
  double r_46_add_skew_2_0 = (add_force_cross_angular_angular_2_0 - minus_f_angular_1);
  double r_46_add_skew_2_1 = (add_force_cross_angular_angular_2_1 + minus_f_angular_0);
  double r_46_add_skew_2_2 = add_force_cross_angular_angular_2_2;
  double res_angular_angular_0_0 = r_46_add_skew_0_0;
  double res_angular_angular_0_1 = r_46_add_skew_0_1;
  double res_angular_angular_0_2 = r_46_add_skew_0_2;
  double res_angular_angular_1_0 = r_46_add_skew_1_0;
  double res_angular_angular_1_1 = r_46_add_skew_1_1;
  double res_angular_angular_1_2 = r_46_add_skew_1_2;
  double res_angular_angular_2_0 = r_46_add_skew_2_0;
  double res_angular_angular_2_1 = r_46_add_skew_2_1;
  double res_angular_angular_2_2 = r_46_add_skew_2_2;
  double add_force_cross_matrix_0_0_0 = inertia_variation_0_0_0;
  double add_force_cross_matrix_0_0_1 = inertia_variation_0_0_1;
  double add_force_cross_matrix_0_0_2 = inertia_variation_0_0_2;
  double add_force_cross_matrix_0_0_3 = res_linear_angular_0_0;
  double add_force_cross_matrix_0_0_4 = res_linear_angular_0_1;
  double add_force_cross_matrix_0_0_5 = res_linear_angular_0_2;
  double add_force_cross_matrix_0_1_0 = inertia_variation_0_1_0;
  double add_force_cross_matrix_0_1_1 = inertia_variation_0_1_1;
  double add_force_cross_matrix_0_1_2 = inertia_variation_0_1_2;
  double add_force_cross_matrix_0_1_3 = res_linear_angular_1_0;
  double add_force_cross_matrix_0_1_4 = res_linear_angular_1_1;
  double add_force_cross_matrix_0_1_5 = res_linear_angular_1_2;
  double add_force_cross_matrix_0_2_0 = inertia_variation_0_2_0;
  double add_force_cross_matrix_0_2_1 = inertia_variation_0_2_1;
  double add_force_cross_matrix_0_2_2 = inertia_variation_0_2_2;
  double add_force_cross_matrix_0_2_3 = res_linear_angular_2_0;
  double add_force_cross_matrix_0_2_4 = res_linear_angular_2_1;
  double add_force_cross_matrix_0_2_5 = res_linear_angular_2_2;
  double add_force_cross_matrix_0_3_0 = res_angular_linear_0_0;
  double add_force_cross_matrix_0_3_1 = res_angular_linear_0_1;
  double add_force_cross_matrix_0_3_2 = res_angular_linear_0_2;
  double add_force_cross_matrix_0_3_3 = res_angular_angular_0_0;
  double add_force_cross_matrix_0_3_4 = res_angular_angular_0_1;
  double add_force_cross_matrix_0_3_5 = res_angular_angular_0_2;
  double add_force_cross_matrix_0_4_0 = res_angular_linear_1_0;
  double add_force_cross_matrix_0_4_1 = res_angular_linear_1_1;
  double add_force_cross_matrix_0_4_2 = res_angular_linear_1_2;
  double add_force_cross_matrix_0_4_3 = res_angular_angular_1_0;
  double add_force_cross_matrix_0_4_4 = res_angular_angular_1_1;
  double add_force_cross_matrix_0_4_5 = res_angular_angular_1_2;
  double add_force_cross_matrix_0_5_0 = res_angular_linear_2_0;
  double add_force_cross_matrix_0_5_1 = res_angular_linear_2_1;
  double add_force_cross_matrix_0_5_2 = res_angular_linear_2_2;
  double add_force_cross_matrix_0_5_3 = res_angular_angular_2_0;
  double add_force_cross_matrix_0_5_4 = res_angular_angular_2_1;
  double add_force_cross_matrix_0_5_5 = res_angular_angular_2_2;
  double rotation_matrix_1_0_0 = qcos_1;
  double rotation_matrix_1_0_1 = -(qsin_1);
  double rotation_matrix_1_0_2 = 0;
  double rotation_matrix_1_1_0 = qsin_1;
  double rotation_matrix_1_1_1 = qcos_1;
  double rotation_matrix_1_1_2 = 0;
  double rotation_matrix_1_2_0 = 0;
  double rotation_matrix_1_2_1 = 0;
  double rotation_matrix_1_2_2 = 1;
  double limi_rotation_1_0_0 = rotation_matrix_1_0_0;
  double limi_rotation_1_0_1 = rotation_matrix_1_0_1;
  double limi_rotation_1_0_2 = 0;
  double limi_rotation_1_1_0 = 0;
  double limi_rotation_1_1_1 = 0;
  double limi_rotation_1_1_2 = 1;
  double limi_rotation_1_2_0 = -(rotation_matrix_1_1_0);
  double limi_rotation_1_2_1 = -(rotation_matrix_1_1_1);
  double limi_rotation_1_2_2 = 0;
  double v_linear_1_0 = data_v_1_0;
  double v_linear_1_1 = data_v_1_1;
  double v_linear_1_2 = data_v_1_2;
  double v_angular_1_0 = data_v_1_3;
  double v_angular_1_1 = data_v_1_4;
  double v_angular_1_2 = v_1;
  double parent_v_linear_1_0 = all_v_0_0;
  double parent_v_linear_1_1 = all_v_0_1;
  double parent_v_linear_1_2 = all_v_0_2;
  double parent_v_angular_1_0 = all_v_0_3;
  double parent_v_angular_1_1 = all_v_0_4;
  double parent_v_angular_1_2 = all_v_0_5;
  double parent_a_linear_1_0 = new_data_a_0_0;
  double parent_a_linear_1_1 = new_data_a_0_1;
  double parent_a_linear_1_2 = new_data_a_0_2;
  double parent_a_angular_1_0 = new_data_a_0_3;
  double parent_a_angular_1_1 = new_data_a_0_4;
  double parent_a_angular_1_2 = new_data_a_0_5;
  double oMi_rotation_1_0_0 = (((limi_rotation_0_0_0 * limi_rotation_1_0_0) + (limi_rotation_0_0_1 * limi_rotation_1_1_0)) + (limi_rotation_0_0_2 * limi_rotation_1_2_0));
  double oMi_rotation_1_0_1 = (((limi_rotation_0_0_0 * limi_rotation_1_0_1) + (limi_rotation_0_0_1 * limi_rotation_1_1_1)) + (limi_rotation_0_0_2 * limi_rotation_1_2_1));
  double oMi_rotation_1_0_2 = (((limi_rotation_0_0_0 * limi_rotation_1_0_2) + (limi_rotation_0_0_1 * limi_rotation_1_1_2)) + (limi_rotation_0_0_2 * limi_rotation_1_2_2));
  double oMi_rotation_1_1_0 = (((limi_rotation_0_1_0 * limi_rotation_1_0_0) + (limi_rotation_0_1_1 * limi_rotation_1_1_0)) + (limi_rotation_0_1_2 * limi_rotation_1_2_0));
  double oMi_rotation_1_1_1 = (((limi_rotation_0_1_0 * limi_rotation_1_0_1) + (limi_rotation_0_1_1 * limi_rotation_1_1_1)) + (limi_rotation_0_1_2 * limi_rotation_1_2_1));
  double oMi_rotation_1_1_2 = (((limi_rotation_0_1_0 * limi_rotation_1_0_2) + (limi_rotation_0_1_1 * limi_rotation_1_1_2)) + (limi_rotation_0_1_2 * limi_rotation_1_2_2));
  double oMi_rotation_1_2_0 = (((limi_rotation_0_2_0 * limi_rotation_1_0_0) + (limi_rotation_0_2_1 * limi_rotation_1_1_0)) + (limi_rotation_0_2_2 * limi_rotation_1_2_0));
  double oMi_rotation_1_2_1 = (((limi_rotation_0_2_0 * limi_rotation_1_0_1) + (limi_rotation_0_2_1 * limi_rotation_1_1_1)) + (limi_rotation_0_2_2 * limi_rotation_1_2_1));
  double oMi_rotation_1_2_2 = (((limi_rotation_0_2_0 * limi_rotation_1_0_2) + (limi_rotation_0_2_1 * limi_rotation_1_1_2)) + (limi_rotation_0_2_2 * limi_rotation_1_2_2));
  double oMi_translation_to_add_1_0 = (((limi_rotation_0_0_0 * limi_translation_1_0) + (limi_rotation_0_0_1 * limi_translation_1_1)) + (limi_rotation_0_0_2 * limi_translation_1_2));
  double oMi_translation_to_add_1_1 = (((limi_rotation_0_1_0 * limi_translation_1_0) + (limi_rotation_0_1_1 * limi_translation_1_1)) + (limi_rotation_0_1_2 * limi_translation_1_2));
  double oMi_translation_to_add_1_2 = (((limi_rotation_0_2_0 * limi_translation_1_0) + (limi_rotation_0_2_1 * limi_translation_1_1)) + (limi_rotation_0_2_2 * limi_translation_1_2));
  double oMi_translation_1_0 = (limi_translation_0_0 + oMi_translation_to_add_1_0);
  double oMi_translation_1_1 = (limi_translation_0_1 + oMi_translation_to_add_1_1);
  double oMi_translation_1_2 = (limi_translation_0_2 + oMi_translation_to_add_1_2);
  double actInv1_1_0 = ((limi_translation_1_1 * parent_v_angular_1_2) - (limi_translation_1_2 * parent_v_angular_1_1));
  double actInv1_1_1 = ((limi_translation_1_2 * parent_v_angular_1_0) - (limi_translation_1_0 * parent_v_angular_1_2));
  double actInv1_1_2 = ((limi_translation_1_0 * parent_v_angular_1_1) - (limi_translation_1_1 * parent_v_angular_1_0));
  double actInv2_1_0 = (parent_v_linear_1_0 - actInv1_1_0);
  double actInv2_1_1 = (parent_v_linear_1_1 - actInv1_1_1);
  double actInv2_1_2 = (parent_v_linear_1_2 - actInv1_1_2);
  double actInv3_1_0_0 = limi_rotation_1_0_0;
  double actInv3_1_1_0 = limi_rotation_1_0_1;
  double actInv3_1_2_0 = limi_rotation_1_0_2;
  double actInv3_1_0_1 = limi_rotation_1_1_0;
  double actInv3_1_1_1 = limi_rotation_1_1_1;
  double actInv3_1_2_1 = limi_rotation_1_1_2;
  double actInv3_1_0_2 = limi_rotation_1_2_0;
  double actInv3_1_1_2 = limi_rotation_1_2_1;
  double actInv3_1_2_2 = limi_rotation_1_2_2;
  double actInv4_1_0 = (((actInv3_1_0_0 * actInv2_1_0) + (actInv3_1_0_1 * actInv2_1_1)) + (actInv3_1_0_2 * actInv2_1_2));
  double actInv4_1_1 = (((actInv3_1_1_0 * actInv2_1_0) + (actInv3_1_1_1 * actInv2_1_1)) + (actInv3_1_1_2 * actInv2_1_2));
  double actInv4_1_2 = (((actInv3_1_2_0 * actInv2_1_0) + (actInv3_1_2_1 * actInv2_1_1)) + (actInv3_1_2_2 * actInv2_1_2));
  double act_inv_linear_1_0 = (v_linear_1_0 + actInv4_1_0);
  double act_inv_linear_1_1 = (v_linear_1_1 + actInv4_1_1);
  double act_inv_linear_1_2 = (v_linear_1_2 + actInv4_1_2);
  double actInv5_1_0 = (((actInv3_1_0_0 * parent_v_angular_1_0) + (actInv3_1_0_1 * parent_v_angular_1_1)) + (actInv3_1_0_2 * parent_v_angular_1_2));
  double actInv5_1_1 = (((actInv3_1_1_0 * parent_v_angular_1_0) + (actInv3_1_1_1 * parent_v_angular_1_1)) + (actInv3_1_1_2 * parent_v_angular_1_2));
  double actInv5_1_2 = (((actInv3_1_2_0 * parent_v_angular_1_0) + (actInv3_1_2_1 * parent_v_angular_1_1)) + (actInv3_1_2_2 * parent_v_angular_1_2));
  double act_inv_angular_1_0 = (v_angular_1_0 + actInv5_1_0);
  double act_inv_angular_1_1 = (v_angular_1_1 + actInv5_1_1);
  double act_inv_angular_1_2 = (v_angular_1_2 + actInv5_1_2);
  double all_v_1_0 = act_inv_linear_1_0;
  double all_v_1_1 = act_inv_linear_1_1;
  double all_v_1_2 = act_inv_linear_1_2;
  double all_v_1_3 = act_inv_angular_1_0;
  double all_v_1_4 = act_inv_angular_1_1;
  double all_v_1_5 = act_inv_angular_1_2;
  double minus_m_w_1 = -(v_1);
  double alpha_cross1_linear_1 = (-(minus_m_w_1) * act_inv_linear_1_1);
  double alpha_cross2_linear_1 = (minus_m_w_1 * act_inv_linear_1_0);
  double alpha_cross_linear_1_0 = alpha_cross1_linear_1;
  double alpha_cross_linear_1_1 = alpha_cross2_linear_1;
  double alpha_cross_linear_1_2 = 0;
  double alpha_cross1_angular_1 = (-(minus_m_w_1) * act_inv_angular_1_1);
  double alpha_cross2_angular_1 = (minus_m_w_1 * act_inv_angular_1_0);
  double alpha_cross_angular_1_0 = alpha_cross1_angular_1;
  double alpha_cross_angular_1_1 = alpha_cross2_angular_1;
  double alpha_cross_angular_1_2 = 0;
  double new_data_a_1_0 = alpha_cross_linear_1_0;
  double new_data_a_1_1 = alpha_cross_linear_1_1;
  double new_data_a_1_2 = alpha_cross_linear_1_2;
  double new_data_a_1_3 = alpha_cross_angular_1_0;
  double new_data_a_1_4 = alpha_cross_angular_1_1;
  double new_data_a_1_5 = a_1;
  double temp_a_linear_1_0 = new_data_a_1_0;
  double temp_a_linear_1_1 = new_data_a_1_1;
  double temp_a_linear_1_2 = new_data_a_1_2;
  double temp_a_angular_1_0 = new_data_a_1_3;
  double temp_a_angular_1_1 = new_data_a_1_4;
  double temp_a_angular_1_2 = new_data_a_1_5;
  double r_47_actInv1_1_0 = ((limi_translation_1_1 * parent_a_angular_1_2) - (limi_translation_1_2 * parent_a_angular_1_1));
  double r_47_actInv1_1_1 = ((limi_translation_1_2 * parent_a_angular_1_0) - (limi_translation_1_0 * parent_a_angular_1_2));
  double r_47_actInv1_1_2 = ((limi_translation_1_0 * parent_a_angular_1_1) - (limi_translation_1_1 * parent_a_angular_1_0));
  double r_48_actInv2_1_0 = (parent_a_linear_1_0 - r_47_actInv1_1_0);
  double r_48_actInv2_1_1 = (parent_a_linear_1_1 - r_47_actInv1_1_1);
  double r_48_actInv2_1_2 = (parent_a_linear_1_2 - r_47_actInv1_1_2);
  double r_49_actInv3_1_0_0 = limi_rotation_1_0_0;
  double r_49_actInv3_1_1_0 = limi_rotation_1_0_1;
  double r_49_actInv3_1_2_0 = limi_rotation_1_0_2;
  double r_49_actInv3_1_0_1 = limi_rotation_1_1_0;
  double r_49_actInv3_1_1_1 = limi_rotation_1_1_1;
  double r_49_actInv3_1_2_1 = limi_rotation_1_1_2;
  double r_49_actInv3_1_0_2 = limi_rotation_1_2_0;
  double r_49_actInv3_1_1_2 = limi_rotation_1_2_1;
  double r_49_actInv3_1_2_2 = limi_rotation_1_2_2;
  double r_50_actInv4_1_0 = (((r_49_actInv3_1_0_0 * r_48_actInv2_1_0) + (r_49_actInv3_1_0_1 * r_48_actInv2_1_1)) + (r_49_actInv3_1_0_2 * r_48_actInv2_1_2));
  double r_50_actInv4_1_1 = (((r_49_actInv3_1_1_0 * r_48_actInv2_1_0) + (r_49_actInv3_1_1_1 * r_48_actInv2_1_1)) + (r_49_actInv3_1_1_2 * r_48_actInv2_1_2));
  double r_50_actInv4_1_2 = (((r_49_actInv3_1_2_0 * r_48_actInv2_1_0) + (r_49_actInv3_1_2_1 * r_48_actInv2_1_1)) + (r_49_actInv3_1_2_2 * r_48_actInv2_1_2));
  double r_51_act_inv_linear_1_0 = (temp_a_linear_1_0 + r_50_actInv4_1_0);
  double r_51_act_inv_linear_1_1 = (temp_a_linear_1_1 + r_50_actInv4_1_1);
  double r_51_act_inv_linear_1_2 = (temp_a_linear_1_2 + r_50_actInv4_1_2);
  double r_52_actInv5_1_0 = (((r_49_actInv3_1_0_0 * parent_a_angular_1_0) + (r_49_actInv3_1_0_1 * parent_a_angular_1_1)) + (r_49_actInv3_1_0_2 * parent_a_angular_1_2));
  double r_52_actInv5_1_1 = (((r_49_actInv3_1_1_0 * parent_a_angular_1_0) + (r_49_actInv3_1_1_1 * parent_a_angular_1_1)) + (r_49_actInv3_1_1_2 * parent_a_angular_1_2));
  double r_52_actInv5_1_2 = (((r_49_actInv3_1_2_0 * parent_a_angular_1_0) + (r_49_actInv3_1_2_1 * parent_a_angular_1_1)) + (r_49_actInv3_1_2_2 * parent_a_angular_1_2));
  double r_53_act_inv_angular_1_0 = (temp_a_angular_1_0 + r_52_actInv5_1_0);
  double r_53_act_inv_angular_1_1 = (temp_a_angular_1_1 + r_52_actInv5_1_1);
  double r_53_act_inv_angular_1_2 = (temp_a_angular_1_2 + r_52_actInv5_1_2);
  double a_final_1_0 = r_51_act_inv_linear_1_0;
  double a_final_1_1 = r_51_act_inv_linear_1_1;
  double a_final_1_2 = r_51_act_inv_linear_1_2;
  double a_final_1_3 = r_53_act_inv_angular_1_0;
  double a_final_1_4 = r_53_act_inv_angular_1_1;
  double a_final_1_5 = r_53_act_inv_angular_1_2;
  double r_54_new_translation_temp_0 = (((oMi_rotation_1_0_0 * lever_1_0) + (oMi_rotation_1_0_1 * lever_1_1)) + (oMi_rotation_1_0_2 * lever_1_2));
  double r_54_new_translation_temp_1 = (((oMi_rotation_1_1_0 * lever_1_0) + (oMi_rotation_1_1_1 * lever_1_1)) + (oMi_rotation_1_1_2 * lever_1_2));
  double r_54_new_translation_temp_2 = (((oMi_rotation_1_2_0 * lever_1_0) + (oMi_rotation_1_2_1 * lever_1_1)) + (oMi_rotation_1_2_2 * lever_1_2));
  double r_55_new_translation_0 = (oMi_translation_1_0 + r_54_new_translation_temp_0);
  double r_55_new_translation_1 = (oMi_translation_1_1 + r_54_new_translation_temp_1);
  double r_55_new_translation_2 = (oMi_translation_1_2 + r_54_new_translation_temp_2);
  double r_56_decompose_it_i_0_0 = (inertia_1_0_0 - inertia_1_2_2);
  double r_56_decompose_it_i_0_1 = inertia_1_0_1;
  double r_56_decompose_it_i_1_0 = inertia_1_0_1;
  double r_56_decompose_it_i_1_1 = (inertia_1_1_1 - inertia_1_2_2);
  double r_56_decompose_it_i_2_0 = (inertia_1_0_2 * 2);
  double r_56_decompose_it_i_2_1 = (inertia_1_1_2 + inertia_1_1_2);
  double r_57_rotate_bottom_r_0_0 = oMi_rotation_1_1_0;
  double r_57_rotate_bottom_r_0_1 = oMi_rotation_1_1_1;
  double r_57_rotate_bottom_r_0_2 = oMi_rotation_1_1_2;
  double r_57_rotate_bottom_r_1_0 = oMi_rotation_1_2_0;
  double r_57_rotate_bottom_r_1_1 = oMi_rotation_1_2_1;
  double r_57_rotate_bottom_r_1_2 = oMi_rotation_1_2_2;
  double r_58_rotate_y_0_0 = (((r_57_rotate_bottom_r_0_0 * r_56_decompose_it_i_0_0) + (r_57_rotate_bottom_r_0_1 * r_56_decompose_it_i_1_0)) + (r_57_rotate_bottom_r_0_2 * r_56_decompose_it_i_2_0));
  double r_58_rotate_y_0_1 = (((r_57_rotate_bottom_r_0_0 * r_56_decompose_it_i_0_1) + (r_57_rotate_bottom_r_0_1 * r_56_decompose_it_i_1_1)) + (r_57_rotate_bottom_r_0_2 * r_56_decompose_it_i_2_1));
  double r_58_rotate_y_1_0 = (((r_57_rotate_bottom_r_1_0 * r_56_decompose_it_i_0_0) + (r_57_rotate_bottom_r_1_1 * r_56_decompose_it_i_1_0)) + (r_57_rotate_bottom_r_1_2 * r_56_decompose_it_i_2_0));
  double r_58_rotate_y_1_1 = (((r_57_rotate_bottom_r_1_0 * r_56_decompose_it_i_0_1) + (r_57_rotate_bottom_r_1_1 * r_56_decompose_it_i_1_1)) + (r_57_rotate_bottom_r_1_2 * r_56_decompose_it_i_2_1));
  double r_59_sres_first_1 = ((oMi_rotation_1_0_0 * r_58_rotate_y_0_0) + (oMi_rotation_1_0_1 * r_58_rotate_y_0_1));
  double r_60_sres_first_2 = ((oMi_rotation_1_1_0 * r_58_rotate_y_0_0) + (oMi_rotation_1_1_1 * r_58_rotate_y_0_1));
  double r_61_sres_first_3 = ((oMi_rotation_1_0_0 * r_58_rotate_y_1_0) + (oMi_rotation_1_0_1 * r_58_rotate_y_1_1));
  double r_62_sres_first_4 = ((oMi_rotation_1_1_0 * r_58_rotate_y_1_0) + (oMi_rotation_1_1_1 * r_58_rotate_y_1_1));
  double r_63_sres_first_5 = ((oMi_rotation_1_2_0 * r_58_rotate_y_1_0) + (oMi_rotation_1_2_1 * r_58_rotate_y_1_1));
  double r_64_const_r_0 = ((-(inertia_1_1_2) * oMi_rotation_1_0_0) + (inertia_1_0_2 * oMi_rotation_1_0_1));
  double r_64_const_r_1 = ((-(inertia_1_1_2) * oMi_rotation_1_1_0) + (inertia_1_0_2 * oMi_rotation_1_1_1));
  double r_64_const_r_2 = ((-(inertia_1_1_2) * oMi_rotation_1_2_0) + (inertia_1_0_2 * oMi_rotation_1_2_1));
  double r_65_sres_update_0_tmp1 = (r_56_decompose_it_i_0_0 + r_56_decompose_it_i_1_1);
  double r_66_sres_update_0_tmp2 = (r_60_sres_first_2 + r_63_sres_first_5);
  double r_67_sres_update_0 = (r_65_sres_update_0_tmp1 - r_66_sres_update_0_tmp2);
  double r_68_symmetric3_rotate_0_0 = (r_67_sres_update_0 + inertia_1_2_2);
  double r_68_symmetric3_rotate_0_1 = (r_59_sres_first_1 + r_64_const_r_2);
  double r_68_symmetric3_rotate_0_2 = (r_61_sres_first_3 - r_64_const_r_1);
  double r_68_symmetric3_rotate_1_0 = (r_59_sres_first_1 + r_64_const_r_2);
  double r_68_symmetric3_rotate_1_1 = (r_60_sres_first_2 + inertia_1_2_2);
  double r_68_symmetric3_rotate_1_2 = (r_62_sres_first_4 + r_64_const_r_0);
  double r_68_symmetric3_rotate_2_0 = (r_61_sres_first_3 - r_64_const_r_1);
  double r_68_symmetric3_rotate_2_1 = (r_62_sres_first_4 + r_64_const_r_0);
  double r_68_symmetric3_rotate_2_2 = (r_63_sres_first_5 + inertia_1_2_2);
  double data_oinertias_trans_1_0 = r_55_new_translation_0;
  double data_oinertias_trans_1_1 = r_55_new_translation_1;
  double data_oinertias_trans_1_2 = r_55_new_translation_2;
  double data_oinertias_rot_1_0_0 = r_68_symmetric3_rotate_0_0;
  double data_oinertias_rot_1_0_1 = r_68_symmetric3_rotate_0_1;
  double data_oinertias_rot_1_0_2 = r_68_symmetric3_rotate_0_2;
  double data_oinertias_rot_1_1_0 = r_68_symmetric3_rotate_1_0;
  double data_oinertias_rot_1_1_1 = r_68_symmetric3_rotate_1_1;
  double data_oinertias_rot_1_1_2 = r_68_symmetric3_rotate_1_2;
  double data_oinertias_rot_1_2_0 = r_68_symmetric3_rotate_2_0;
  double data_oinertias_rot_1_2_1 = r_68_symmetric3_rotate_2_1;
  double data_oinertias_rot_1_2_2 = r_68_symmetric3_rotate_2_2;
  double motion_act_linear_1_0 = (((oMi_rotation_1_0_0 * act_inv_linear_1_0) + (oMi_rotation_1_0_1 * act_inv_linear_1_1)) + (oMi_rotation_1_0_2 * act_inv_linear_1_2));
  double motion_act_linear_1_1 = (((oMi_rotation_1_1_0 * act_inv_linear_1_0) + (oMi_rotation_1_1_1 * act_inv_linear_1_1)) + (oMi_rotation_1_1_2 * act_inv_linear_1_2));
  double motion_act_linear_1_2 = (((oMi_rotation_1_2_0 * act_inv_linear_1_0) + (oMi_rotation_1_2_1 * act_inv_linear_1_1)) + (oMi_rotation_1_2_2 * act_inv_linear_1_2));
  double motion_act_angular_1_0 = (((oMi_rotation_1_0_0 * act_inv_angular_1_0) + (oMi_rotation_1_0_1 * act_inv_angular_1_1)) + (oMi_rotation_1_0_2 * act_inv_angular_1_2));
  double motion_act_angular_1_1 = (((oMi_rotation_1_1_0 * act_inv_angular_1_0) + (oMi_rotation_1_1_1 * act_inv_angular_1_1)) + (oMi_rotation_1_1_2 * act_inv_angular_1_2));
  double motion_act_angular_1_2 = (((oMi_rotation_1_2_0 * act_inv_angular_1_0) + (oMi_rotation_1_2_1 * act_inv_angular_1_1)) + (oMi_rotation_1_2_2 * act_inv_angular_1_2));
  double motion_act_cross_1_0 = ((oMi_translation_1_1 * motion_act_angular_1_2) - (oMi_translation_1_2 * motion_act_angular_1_1));
  double motion_act_cross_1_1 = ((oMi_translation_1_2 * motion_act_angular_1_0) - (oMi_translation_1_0 * motion_act_angular_1_2));
  double motion_act_cross_1_2 = ((oMi_translation_1_0 * motion_act_angular_1_1) - (oMi_translation_1_1 * motion_act_angular_1_0));
  double motion_act_linear2_1_0 = (motion_act_linear_1_0 + motion_act_cross_1_0);
  double motion_act_linear2_1_1 = (motion_act_linear_1_1 + motion_act_cross_1_1);
  double motion_act_linear2_1_2 = (motion_act_linear_1_2 + motion_act_cross_1_2);
  double act_motion_res_1_0 = motion_act_linear2_1_0;
  double act_motion_res_1_1 = motion_act_linear2_1_1;
  double act_motion_res_1_2 = motion_act_linear2_1_2;
  double act_motion_res_1_3 = motion_act_angular_1_0;
  double act_motion_res_1_4 = motion_act_angular_1_1;
  double act_motion_res_1_5 = motion_act_angular_1_2;
  double ov_1_0 = act_motion_res_1_0;
  double ov_1_1 = act_motion_res_1_1;
  double ov_1_2 = act_motion_res_1_2;
  double ov_1_3 = act_motion_res_1_3;
  double ov_1_4 = act_motion_res_1_4;
  double ov_1_5 = act_motion_res_1_5;
  double t_linear_1_0 = a_final_1_0;
  double t_linear_1_1 = a_final_1_1;
  double t_linear_1_2 = a_final_1_2;
  double t_angular_1_0 = a_final_1_3;
  double t_angular_1_1 = a_final_1_4;
  double t_angular_1_2 = a_final_1_5;
  double r_69_motion_act_linear_1_0 = (((oMi_rotation_1_0_0 * t_linear_1_0) + (oMi_rotation_1_0_1 * t_linear_1_1)) + (oMi_rotation_1_0_2 * t_linear_1_2));
  double r_69_motion_act_linear_1_1 = (((oMi_rotation_1_1_0 * t_linear_1_0) + (oMi_rotation_1_1_1 * t_linear_1_1)) + (oMi_rotation_1_1_2 * t_linear_1_2));
  double r_69_motion_act_linear_1_2 = (((oMi_rotation_1_2_0 * t_linear_1_0) + (oMi_rotation_1_2_1 * t_linear_1_1)) + (oMi_rotation_1_2_2 * t_linear_1_2));
  double r_70_motion_act_angular_1_0 = (((oMi_rotation_1_0_0 * t_angular_1_0) + (oMi_rotation_1_0_1 * t_angular_1_1)) + (oMi_rotation_1_0_2 * t_angular_1_2));
  double r_70_motion_act_angular_1_1 = (((oMi_rotation_1_1_0 * t_angular_1_0) + (oMi_rotation_1_1_1 * t_angular_1_1)) + (oMi_rotation_1_1_2 * t_angular_1_2));
  double r_70_motion_act_angular_1_2 = (((oMi_rotation_1_2_0 * t_angular_1_0) + (oMi_rotation_1_2_1 * t_angular_1_1)) + (oMi_rotation_1_2_2 * t_angular_1_2));
  double r_71_motion_act_cross_1_0 = ((oMi_translation_1_1 * r_70_motion_act_angular_1_2) - (oMi_translation_1_2 * r_70_motion_act_angular_1_1));
  double r_71_motion_act_cross_1_1 = ((oMi_translation_1_2 * r_70_motion_act_angular_1_0) - (oMi_translation_1_0 * r_70_motion_act_angular_1_2));
  double r_71_motion_act_cross_1_2 = ((oMi_translation_1_0 * r_70_motion_act_angular_1_1) - (oMi_translation_1_1 * r_70_motion_act_angular_1_0));
  double r_72_motion_act_linear2_1_0 = (r_69_motion_act_linear_1_0 + r_71_motion_act_cross_1_0);
  double r_72_motion_act_linear2_1_1 = (r_69_motion_act_linear_1_1 + r_71_motion_act_cross_1_1);
  double r_72_motion_act_linear2_1_2 = (r_69_motion_act_linear_1_2 + r_71_motion_act_cross_1_2);
  double r_73_act_motion_res_1_0 = r_72_motion_act_linear2_1_0;
  double r_73_act_motion_res_1_1 = r_72_motion_act_linear2_1_1;
  double r_73_act_motion_res_1_2 = r_72_motion_act_linear2_1_2;
  double r_73_act_motion_res_1_3 = r_70_motion_act_angular_1_0;
  double r_73_act_motion_res_1_4 = r_70_motion_act_angular_1_1;
  double r_73_act_motion_res_1_5 = r_70_motion_act_angular_1_2;
  double oa_1_0 = r_73_act_motion_res_1_0;
  double oa_1_1 = r_73_act_motion_res_1_1;
  double oa_1_2 = r_73_act_motion_res_1_2;
  double oa_1_3 = r_73_act_motion_res_1_3;
  double oa_1_4 = r_73_act_motion_res_1_4;
  double oa_1_5 = r_73_act_motion_res_1_5;
  double r_74_model_gravity_0 = 0;
  double r_74_model_gravity_1 = 0;
  double r_74_model_gravity_2 = -9.81;
  double r_74_model_gravity_3 = 0;
  double r_74_model_gravity_4 = 0;
  double r_74_model_gravity_5 = 0;
  double oa_gf_1_0 = (oa_1_0 - r_74_model_gravity_0);
  double oa_gf_1_1 = (oa_1_1 - r_74_model_gravity_1);
  double oa_gf_1_2 = (oa_1_2 - r_74_model_gravity_2);
  double oa_gf_1_3 = (oa_1_3 - r_74_model_gravity_3);
  double oa_gf_1_4 = (oa_1_4 - r_74_model_gravity_4);
  double oa_gf_1_5 = (oa_1_5 - r_74_model_gravity_5);
  double ov_linear_1_0 = ov_1_0;
  double ov_linear_1_1 = ov_1_1;
  double ov_linear_1_2 = ov_1_2;
  double ov_angular_1_0 = ov_1_3;
  double ov_angular_1_1 = ov_1_4;
  double ov_angular_1_2 = ov_1_5;
  double data_oh_linear_temp1_1_0 = ((r_55_new_translation_1 * ov_angular_1_2) - (r_55_new_translation_2 * ov_angular_1_1));
  double data_oh_linear_temp1_1_1 = ((r_55_new_translation_2 * ov_angular_1_0) - (r_55_new_translation_0 * ov_angular_1_2));
  double data_oh_linear_temp1_1_2 = ((r_55_new_translation_0 * ov_angular_1_1) - (r_55_new_translation_1 * ov_angular_1_0));
  double data_oh_linear_temp2_1_0 = (ov_linear_1_0 - data_oh_linear_temp1_1_0);
  double data_oh_linear_temp2_1_1 = (ov_linear_1_1 - data_oh_linear_temp1_1_1);
  double data_oh_linear_temp2_1_2 = (ov_linear_1_2 - data_oh_linear_temp1_1_2);
  double data_oh_linear_1_0 = (masses_1 * data_oh_linear_temp2_1_0);
  double data_oh_linear_1_1 = (masses_1 * data_oh_linear_temp2_1_1);
  double data_oh_linear_1_2 = (masses_1 * data_oh_linear_temp2_1_2);
  double r_75_ = (r_68_symmetric3_rotate_0_0 * ov_angular_1_0);
  double r_76_ = (r_68_symmetric3_rotate_0_1 * ov_angular_1_1);
  double r_77_ = (r_68_symmetric3_rotate_0_2 * ov_angular_1_2);
  double r_78_ = (r_68_symmetric3_rotate_0_1 * ov_angular_1_0);
  double r_79_ = (r_68_symmetric3_rotate_1_1 * ov_angular_1_1);
  double r_80_ = (r_68_symmetric3_rotate_1_2 * ov_angular_1_2);
  double r_81_ = (r_68_symmetric3_rotate_0_2 * ov_angular_1_0);
  double r_82_ = (r_68_symmetric3_rotate_1_2 * ov_angular_1_1);
  double r_83_ = (r_68_symmetric3_rotate_2_2 * ov_angular_1_2);
  double rhsMult1_temp_1 = (r_75_ + r_76_);
  double rhsMult1_1 = (rhsMult1_temp_1 + r_77_);
  double rhsMult2_temp_1 = (r_78_ + r_79_);
  double rhsMult2_1 = (rhsMult2_temp_1 + r_80_);
  double rhsMult3_temp_1 = (r_81_ + r_82_);
  double rhsMult3_1 = (rhsMult3_temp_1 + r_83_);
  double rhsMult_1_0 = rhsMult1_1;
  double rhsMult_1_1 = rhsMult2_1;
  double rhsMult_1_2 = rhsMult3_1;
  double data_oh_angular_temp2_1_0 = ((r_55_new_translation_1 * data_oh_linear_1_2) - (r_55_new_translation_2 * data_oh_linear_1_1));
  double data_oh_angular_temp2_1_1 = ((r_55_new_translation_2 * data_oh_linear_1_0) - (r_55_new_translation_0 * data_oh_linear_1_2));
  double data_oh_angular_temp2_1_2 = ((r_55_new_translation_0 * data_oh_linear_1_1) - (r_55_new_translation_1 * data_oh_linear_1_0));
  double data_oh_angular_1_0 = (rhsMult_1_0 + data_oh_angular_temp2_1_0);
  double data_oh_angular_1_1 = (rhsMult_1_1 + data_oh_angular_temp2_1_1);
  double data_oh_angular_1_2 = (rhsMult_1_2 + data_oh_angular_temp2_1_2);
  double all_oh_1_0 = data_oh_linear_1_0;
  double all_oh_1_1 = data_oh_linear_1_1;
  double all_oh_1_2 = data_oh_linear_1_2;
  double all_oh_1_3 = data_oh_angular_1_0;
  double all_oh_1_4 = data_oh_angular_1_1;
  double all_oh_1_5 = data_oh_angular_1_2;
  double oa_gf_linear_1_0 = oa_gf_1_0;
  double oa_gf_linear_1_1 = oa_gf_1_1;
  double oa_gf_linear_1_2 = oa_gf_1_2;
  double oa_gf_angular_1_0 = oa_gf_1_3;
  double oa_gf_angular_1_1 = oa_gf_1_4;
  double oa_gf_angular_1_2 = oa_gf_1_5;
  double data_of_linear_temp1_1_0 = ((r_55_new_translation_1 * oa_gf_angular_1_2) - (r_55_new_translation_2 * oa_gf_angular_1_1));
  double data_of_linear_temp1_1_1 = ((r_55_new_translation_2 * oa_gf_angular_1_0) - (r_55_new_translation_0 * oa_gf_angular_1_2));
  double data_of_linear_temp1_1_2 = ((r_55_new_translation_0 * oa_gf_angular_1_1) - (r_55_new_translation_1 * oa_gf_angular_1_0));
  double data_of_linear_temp2_1_0 = (oa_gf_linear_1_0 - data_of_linear_temp1_1_0);
  double data_of_linear_temp2_1_1 = (oa_gf_linear_1_1 - data_of_linear_temp1_1_1);
  double data_of_linear_temp2_1_2 = (oa_gf_linear_1_2 - data_of_linear_temp1_1_2);
  double data_of_linear_temp3_1_0 = (masses_1 * data_of_linear_temp2_1_0);
  double data_of_linear_temp3_1_1 = (masses_1 * data_of_linear_temp2_1_1);
  double data_of_linear_temp3_1_2 = (masses_1 * data_of_linear_temp2_1_2);
  double r_84_ = (r_68_symmetric3_rotate_0_0 * oa_gf_angular_1_0);
  double r_85_ = (r_68_symmetric3_rotate_0_1 * oa_gf_angular_1_1);
  double r_86_ = (r_68_symmetric3_rotate_0_2 * oa_gf_angular_1_2);
  double r_87_ = (r_68_symmetric3_rotate_0_1 * oa_gf_angular_1_0);
  double r_88_ = (r_68_symmetric3_rotate_1_1 * oa_gf_angular_1_1);
  double r_89_ = (r_68_symmetric3_rotate_1_2 * oa_gf_angular_1_2);
  double r_90_ = (r_68_symmetric3_rotate_0_2 * oa_gf_angular_1_0);
  double r_91_ = (r_68_symmetric3_rotate_1_2 * oa_gf_angular_1_1);
  double r_92_ = (r_68_symmetric3_rotate_2_2 * oa_gf_angular_1_2);
  double r_93_rhsMult1_temp_1 = (r_84_ + r_85_);
  double r_94_rhsMult1_1 = (r_93_rhsMult1_temp_1 + r_86_);
  double r_95_rhsMult2_temp_1 = (r_87_ + r_88_);
  double r_96_rhsMult2_1 = (r_95_rhsMult2_temp_1 + r_89_);
  double r_97_rhsMult3_temp_1 = (r_90_ + r_91_);
  double r_98_rhsMult3_1 = (r_97_rhsMult3_temp_1 + r_92_);
  double r_99_rhsMult_1_0 = r_94_rhsMult1_1;
  double r_99_rhsMult_1_1 = r_96_rhsMult2_1;
  double r_99_rhsMult_1_2 = r_98_rhsMult3_1;
  double data_of_angular_temp2_1_0 = ((r_55_new_translation_1 * data_of_linear_temp3_1_2) - (r_55_new_translation_2 * data_of_linear_temp3_1_1));
  double data_of_angular_temp2_1_1 = ((r_55_new_translation_2 * data_of_linear_temp3_1_0) - (r_55_new_translation_0 * data_of_linear_temp3_1_2));
  double data_of_angular_temp2_1_2 = ((r_55_new_translation_0 * data_of_linear_temp3_1_1) - (r_55_new_translation_1 * data_of_linear_temp3_1_0));
  double data_of_angular_temp3_1_0 = (r_99_rhsMult_1_0 + data_of_angular_temp2_1_0);
  double data_of_angular_temp3_1_1 = (r_99_rhsMult_1_1 + data_of_angular_temp2_1_1);
  double data_of_angular_temp3_1_2 = (r_99_rhsMult_1_2 + data_of_angular_temp2_1_2);
  double data_of_linear_temp4_1_0 = ((ov_angular_1_1 * data_oh_linear_1_2) - (ov_angular_1_2 * data_oh_linear_1_1));
  double data_of_linear_temp4_1_1 = ((ov_angular_1_2 * data_oh_linear_1_0) - (ov_angular_1_0 * data_oh_linear_1_2));
  double data_of_linear_temp4_1_2 = ((ov_angular_1_0 * data_oh_linear_1_1) - (ov_angular_1_1 * data_oh_linear_1_0));
  double data_of_angular_temp4_1_0 = ((ov_angular_1_1 * data_oh_angular_1_2) - (ov_angular_1_2 * data_oh_angular_1_1));
  double data_of_angular_temp4_1_1 = ((ov_angular_1_2 * data_oh_angular_1_0) - (ov_angular_1_0 * data_oh_angular_1_2));
  double data_of_angular_temp4_1_2 = ((ov_angular_1_0 * data_oh_angular_1_1) - (ov_angular_1_1 * data_oh_angular_1_0));
  double data_of_angular_temp5_1_0 = ((ov_linear_1_1 * data_oh_linear_1_2) - (ov_linear_1_2 * data_oh_linear_1_1));
  double data_of_angular_temp5_1_1 = ((ov_linear_1_2 * data_oh_linear_1_0) - (ov_linear_1_0 * data_oh_linear_1_2));
  double data_of_angular_temp5_1_2 = ((ov_linear_1_0 * data_oh_linear_1_1) - (ov_linear_1_1 * data_oh_linear_1_0));
  double data_of_angular_temp6_1_0 = (data_of_angular_temp4_1_0 + data_of_angular_temp5_1_0);
  double data_of_angular_temp6_1_1 = (data_of_angular_temp4_1_1 + data_of_angular_temp5_1_1);
  double data_of_angular_temp6_1_2 = (data_of_angular_temp4_1_2 + data_of_angular_temp5_1_2);
  double data_of_linear_1_0 = (data_of_linear_temp3_1_0 + data_of_linear_temp4_1_0);
  double data_of_linear_1_1 = (data_of_linear_temp3_1_1 + data_of_linear_temp4_1_1);
  double data_of_linear_1_2 = (data_of_linear_temp3_1_2 + data_of_linear_temp4_1_2);
  double data_of_angular_1_0 = (data_of_angular_temp3_1_0 + data_of_angular_temp6_1_0);
  double data_of_angular_1_1 = (data_of_angular_temp3_1_1 + data_of_angular_temp6_1_1);
  double data_of_angular_1_2 = (data_of_angular_temp3_1_2 + data_of_angular_temp6_1_2);
  double all_of_1_0 = data_of_linear_1_0;
  double all_of_1_1 = data_of_linear_1_1;
  double all_of_1_2 = data_of_linear_1_2;
  double all_of_1_3 = data_of_angular_1_0;
  double all_of_1_4 = data_of_angular_1_1;
  double all_of_1_5 = data_of_angular_1_2;
  double act_constraint_rotation_col_1_0 = oMi_rotation_1_0_2;
  double act_constraint_rotation_col_1_1 = oMi_rotation_1_1_2;
  double act_constraint_rotation_col_1_2 = oMi_rotation_1_2_2;
  double act_constraint_linear_1_0 = ((oMi_translation_1_1 * act_constraint_rotation_col_1_2) - (oMi_translation_1_2 * act_constraint_rotation_col_1_1));
  double act_constraint_linear_1_1 = ((oMi_translation_1_2 * act_constraint_rotation_col_1_0) - (oMi_translation_1_0 * act_constraint_rotation_col_1_2));
  double act_constraint_linear_1_2 = ((oMi_translation_1_0 * act_constraint_rotation_col_1_1) - (oMi_translation_1_1 * act_constraint_rotation_col_1_0));
  double j_cols_1_0 = act_constraint_linear_1_0;
  double j_cols_1_1 = act_constraint_linear_1_1;
  double j_cols_1_2 = act_constraint_linear_1_2;
  double j_cols_1_3 = act_constraint_rotation_col_1_0;
  double j_cols_1_4 = act_constraint_rotation_col_1_1;
  double j_cols_1_5 = act_constraint_rotation_col_1_2;
  double mout_linear_cross_angular_1_0 = ((ov_linear_1_1 * act_constraint_rotation_col_1_2) - (ov_linear_1_2 * act_constraint_rotation_col_1_1));
  double mout_linear_cross_angular_1_1 = ((ov_linear_1_2 * act_constraint_rotation_col_1_0) - (ov_linear_1_0 * act_constraint_rotation_col_1_2));
  double mout_linear_cross_angular_1_2 = ((ov_linear_1_0 * act_constraint_rotation_col_1_1) - (ov_linear_1_1 * act_constraint_rotation_col_1_0));
  double mout_angular_cross_linear_1_0 = ((ov_angular_1_1 * act_constraint_linear_1_2) - (ov_angular_1_2 * act_constraint_linear_1_1));
  double mout_angular_cross_linear_1_1 = ((ov_angular_1_2 * act_constraint_linear_1_0) - (ov_angular_1_0 * act_constraint_linear_1_2));
  double mout_angular_cross_linear_1_2 = ((ov_angular_1_0 * act_constraint_linear_1_1) - (ov_angular_1_1 * act_constraint_linear_1_0));
  double mout_linear_1_0 = (mout_linear_cross_angular_1_0 + mout_angular_cross_linear_1_0);
  double mout_linear_1_1 = (mout_linear_cross_angular_1_1 + mout_angular_cross_linear_1_1);
  double mout_linear_1_2 = (mout_linear_cross_angular_1_2 + mout_angular_cross_linear_1_2);
  double mout_angular_1_0 = ((ov_angular_1_1 * act_constraint_rotation_col_1_2) - (ov_angular_1_2 * act_constraint_rotation_col_1_1));
  double mout_angular_1_1 = ((ov_angular_1_2 * act_constraint_rotation_col_1_0) - (ov_angular_1_0 * act_constraint_rotation_col_1_2));
  double mout_angular_1_2 = ((ov_angular_1_0 * act_constraint_rotation_col_1_1) - (ov_angular_1_1 * act_constraint_rotation_col_1_0));
  double dj_cols_1_0 = mout_linear_1_0;
  double dj_cols_1_1 = mout_linear_1_1;
  double dj_cols_1_2 = mout_linear_1_2;
  double dj_cols_1_3 = mout_angular_1_0;
  double dj_cols_1_4 = mout_angular_1_1;
  double dj_cols_1_5 = mout_angular_1_2;
  double oa_gf_parent_linear_1_0 = oa_gf_0_0;
  double oa_gf_parent_linear_1_1 = oa_gf_0_1;
  double oa_gf_parent_linear_1_2 = oa_gf_0_2;
  double oa_gf_parent_angular_1_0 = oa_gf_0_3;
  double oa_gf_parent_angular_1_1 = oa_gf_0_4;
  double oa_gf_parent_angular_1_2 = oa_gf_0_5;
  double r_100_mout_linear_cross_angular_1_0 = ((oa_gf_parent_linear_1_1 * act_constraint_rotation_col_1_2) - (oa_gf_parent_linear_1_2 * act_constraint_rotation_col_1_1));
  double r_100_mout_linear_cross_angular_1_1 = ((oa_gf_parent_linear_1_2 * act_constraint_rotation_col_1_0) - (oa_gf_parent_linear_1_0 * act_constraint_rotation_col_1_2));
  double r_100_mout_linear_cross_angular_1_2 = ((oa_gf_parent_linear_1_0 * act_constraint_rotation_col_1_1) - (oa_gf_parent_linear_1_1 * act_constraint_rotation_col_1_0));
  double r_101_mout_angular_cross_linear_1_0 = ((oa_gf_parent_angular_1_1 * act_constraint_linear_1_2) - (oa_gf_parent_angular_1_2 * act_constraint_linear_1_1));
  double r_101_mout_angular_cross_linear_1_1 = ((oa_gf_parent_angular_1_2 * act_constraint_linear_1_0) - (oa_gf_parent_angular_1_0 * act_constraint_linear_1_2));
  double r_101_mout_angular_cross_linear_1_2 = ((oa_gf_parent_angular_1_0 * act_constraint_linear_1_1) - (oa_gf_parent_angular_1_1 * act_constraint_linear_1_0));
  double r_102_mout_linear_1_0 = (r_100_mout_linear_cross_angular_1_0 + r_101_mout_angular_cross_linear_1_0);
  double r_102_mout_linear_1_1 = (r_100_mout_linear_cross_angular_1_1 + r_101_mout_angular_cross_linear_1_1);
  double r_102_mout_linear_1_2 = (r_100_mout_linear_cross_angular_1_2 + r_101_mout_angular_cross_linear_1_2);
  double r_103_mout_angular_1_0 = ((oa_gf_parent_angular_1_1 * act_constraint_rotation_col_1_2) - (oa_gf_parent_angular_1_2 * act_constraint_rotation_col_1_1));
  double r_103_mout_angular_1_1 = ((oa_gf_parent_angular_1_2 * act_constraint_rotation_col_1_0) - (oa_gf_parent_angular_1_0 * act_constraint_rotation_col_1_2));
  double r_103_mout_angular_1_2 = ((oa_gf_parent_angular_1_0 * act_constraint_rotation_col_1_1) - (oa_gf_parent_angular_1_1 * act_constraint_rotation_col_1_0));
  double dAdv_cols_linear_1_0 = mout_linear_1_0;
  double dAdv_cols_linear_1_1 = mout_linear_1_1;
  double dAdv_cols_linear_1_2 = mout_linear_1_2;
  double dAdv_cols_angular_1_0 = mout_angular_1_0;
  double dAdv_cols_angular_1_1 = mout_angular_1_1;
  double dAdv_cols_angular_1_2 = mout_angular_1_2;
  double data_ov_parent_linear_1_0 = ov_0_0;
  double data_ov_parent_linear_1_1 = ov_0_1;
  double data_ov_parent_linear_1_2 = ov_0_2;
  double data_ov_parent_angular_1_0 = ov_0_3;
  double data_ov_parent_angular_1_1 = ov_0_4;
  double data_ov_parent_angular_1_2 = ov_0_5;
  double r_104_mout_linear_cross_angular_1_0 = ((data_ov_parent_linear_1_1 * act_constraint_rotation_col_1_2) - (data_ov_parent_linear_1_2 * act_constraint_rotation_col_1_1));
  double r_104_mout_linear_cross_angular_1_1 = ((data_ov_parent_linear_1_2 * act_constraint_rotation_col_1_0) - (data_ov_parent_linear_1_0 * act_constraint_rotation_col_1_2));
  double r_104_mout_linear_cross_angular_1_2 = ((data_ov_parent_linear_1_0 * act_constraint_rotation_col_1_1) - (data_ov_parent_linear_1_1 * act_constraint_rotation_col_1_0));
  double r_105_mout_angular_cross_linear_1_0 = ((data_ov_parent_angular_1_1 * act_constraint_linear_1_2) - (data_ov_parent_angular_1_2 * act_constraint_linear_1_1));
  double r_105_mout_angular_cross_linear_1_1 = ((data_ov_parent_angular_1_2 * act_constraint_linear_1_0) - (data_ov_parent_angular_1_0 * act_constraint_linear_1_2));
  double r_105_mout_angular_cross_linear_1_2 = ((data_ov_parent_angular_1_0 * act_constraint_linear_1_1) - (data_ov_parent_angular_1_1 * act_constraint_linear_1_0));
  double r_106_mout_linear_1_0 = (r_104_mout_linear_cross_angular_1_0 + r_105_mout_angular_cross_linear_1_0);
  double r_106_mout_linear_1_1 = (r_104_mout_linear_cross_angular_1_1 + r_105_mout_angular_cross_linear_1_1);
  double r_106_mout_linear_1_2 = (r_104_mout_linear_cross_angular_1_2 + r_105_mout_angular_cross_linear_1_2);
  double r_107_mout_angular_1_0 = ((data_ov_parent_angular_1_1 * act_constraint_rotation_col_1_2) - (data_ov_parent_angular_1_2 * act_constraint_rotation_col_1_1));
  double r_107_mout_angular_1_1 = ((data_ov_parent_angular_1_2 * act_constraint_rotation_col_1_0) - (data_ov_parent_angular_1_0 * act_constraint_rotation_col_1_2));
  double r_107_mout_angular_1_2 = ((data_ov_parent_angular_1_0 * act_constraint_rotation_col_1_1) - (data_ov_parent_angular_1_1 * act_constraint_rotation_col_1_0));
  double r_108_data_ov_parent_linear_1_0 = ov_0_0;
  double r_108_data_ov_parent_linear_1_1 = ov_0_1;
  double r_108_data_ov_parent_linear_1_2 = ov_0_2;
  double r_109_data_ov_parent_angular_1_0 = ov_0_3;
  double r_109_data_ov_parent_angular_1_1 = ov_0_4;
  double r_109_data_ov_parent_angular_1_2 = ov_0_5;
  double r_110_mout_linear_cross_angular_1_0 = ((r_108_data_ov_parent_linear_1_1 * r_107_mout_angular_1_2) - (r_108_data_ov_parent_linear_1_2 * r_107_mout_angular_1_1));
  double r_110_mout_linear_cross_angular_1_1 = ((r_108_data_ov_parent_linear_1_2 * r_107_mout_angular_1_0) - (r_108_data_ov_parent_linear_1_0 * r_107_mout_angular_1_2));
  double r_110_mout_linear_cross_angular_1_2 = ((r_108_data_ov_parent_linear_1_0 * r_107_mout_angular_1_1) - (r_108_data_ov_parent_linear_1_1 * r_107_mout_angular_1_0));
  double r_111_mout_angular_cross_linear_1_0 = ((r_109_data_ov_parent_angular_1_1 * r_106_mout_linear_1_2) - (r_109_data_ov_parent_angular_1_2 * r_106_mout_linear_1_1));
  double r_111_mout_angular_cross_linear_1_1 = ((r_109_data_ov_parent_angular_1_2 * r_106_mout_linear_1_0) - (r_109_data_ov_parent_angular_1_0 * r_106_mout_linear_1_2));
  double r_111_mout_angular_cross_linear_1_2 = ((r_109_data_ov_parent_angular_1_0 * r_106_mout_linear_1_1) - (r_109_data_ov_parent_angular_1_1 * r_106_mout_linear_1_0));
  double r_112_mout_linear_1_0 = (r_110_mout_linear_cross_angular_1_0 + r_111_mout_angular_cross_linear_1_0);
  double r_112_mout_linear_1_1 = (r_110_mout_linear_cross_angular_1_1 + r_111_mout_angular_cross_linear_1_1);
  double r_112_mout_linear_1_2 = (r_110_mout_linear_cross_angular_1_2 + r_111_mout_angular_cross_linear_1_2);
  double r_113_mout_angular_1_0 = ((r_109_data_ov_parent_angular_1_1 * r_107_mout_angular_1_2) - (r_109_data_ov_parent_angular_1_2 * r_107_mout_angular_1_1));
  double r_113_mout_angular_1_1 = ((r_109_data_ov_parent_angular_1_2 * r_107_mout_angular_1_0) - (r_109_data_ov_parent_angular_1_0 * r_107_mout_angular_1_2));
  double r_113_mout_angular_1_2 = ((r_109_data_ov_parent_angular_1_0 * r_107_mout_angular_1_1) - (r_109_data_ov_parent_angular_1_1 * r_107_mout_angular_1_0));
  double dAdq_cols_linear_1_0 = (r_102_mout_linear_1_0 + r_112_mout_linear_1_0);
  double dAdq_cols_linear_1_1 = (r_102_mout_linear_1_1 + r_112_mout_linear_1_1);
  double dAdq_cols_linear_1_2 = (r_102_mout_linear_1_2 + r_112_mout_linear_1_2);
  double dAdq_cols_angular_1_0 = (r_103_mout_angular_1_0 + r_113_mout_angular_1_0);
  double dAdq_cols_angular_1_1 = (r_103_mout_angular_1_1 + r_113_mout_angular_1_1);
  double dAdq_cols_angular_1_2 = (r_103_mout_angular_1_2 + r_113_mout_angular_1_2);
  double dAdv_cols_linear_updated_1_0 = (dAdv_cols_linear_1_0 + r_106_mout_linear_1_0);
  double dAdv_cols_linear_updated_1_1 = (dAdv_cols_linear_1_1 + r_106_mout_linear_1_1);
  double dAdv_cols_linear_updated_1_2 = (dAdv_cols_linear_1_2 + r_106_mout_linear_1_2);
  double dAdv_cols_angular_updated_1_0 = (dAdv_cols_angular_1_0 + r_107_mout_angular_1_0);
  double dAdv_cols_angular_updated_1_1 = (dAdv_cols_angular_1_1 + r_107_mout_angular_1_1);
  double dAdv_cols_angular_updated_1_2 = (dAdv_cols_angular_1_2 + r_107_mout_angular_1_2);
  double dAdq_cols_1_0 = dAdq_cols_linear_1_0;
  double dAdq_cols_1_1 = dAdq_cols_linear_1_1;
  double dAdq_cols_1_2 = dAdq_cols_linear_1_2;
  double dAdq_cols_1_3 = dAdq_cols_angular_1_0;
  double dAdq_cols_1_4 = dAdq_cols_angular_1_1;
  double dAdq_cols_1_5 = dAdq_cols_angular_1_2;
  double dAdv_cols_1_0 = dAdv_cols_linear_updated_1_0;
  double dAdv_cols_1_1 = dAdv_cols_linear_updated_1_1;
  double dAdv_cols_1_2 = dAdv_cols_linear_updated_1_2;
  double dAdv_cols_1_3 = dAdv_cols_angular_updated_1_0;
  double dAdv_cols_1_4 = dAdv_cols_angular_updated_1_1;
  double dAdv_cols_1_5 = dAdv_cols_angular_updated_1_2;
  double dVdq_cols_1_0 = r_106_mout_linear_1_0;
  double dVdq_cols_1_1 = r_106_mout_linear_1_1;
  double dVdq_cols_1_2 = r_106_mout_linear_1_2;
  double dVdq_cols_1_3 = r_107_mout_angular_1_0;
  double dVdq_cols_1_4 = r_107_mout_angular_1_1;
  double dVdq_cols_1_5 = r_107_mout_angular_1_2;
  double r_114_mv_linear_0 = (masses_1 * ov_linear_1_0);
  double r_114_mv_linear_1 = (masses_1 * ov_linear_1_1);
  double r_114_mv_linear_2 = (masses_1 * ov_linear_1_2);
  double r_115_mv_angular_0 = (masses_1 * ov_angular_1_0);
  double r_115_mv_angular_1 = (masses_1 * ov_angular_1_1);
  double r_115_mv_angular_2 = (masses_1 * ov_angular_1_2);
  double r_116_skew_vec3d_0_0 = 0;
  double r_116_skew_vec3d_0_1 = -(r_114_mv_linear_2);
  double r_116_skew_vec3d_0_2 = r_114_mv_linear_1;
  double r_116_skew_vec3d_1_0 = r_114_mv_linear_2;
  double r_116_skew_vec3d_1_1 = 0;
  double r_116_skew_vec3d_1_2 = -(r_114_mv_linear_0);
  double r_116_skew_vec3d_2_0 = -(r_114_mv_linear_1);
  double r_116_skew_vec3d_2_1 = r_114_mv_linear_0;
  double r_116_skew_vec3d_2_2 = 0;
  double r_117_skew_square_c1_0_0 = (r_115_mv_angular_0 * r_55_new_translation_0);
  double r_117_skew_square_c1_0_1 = (r_115_mv_angular_1 * r_55_new_translation_0);
  double r_117_skew_square_c1_0_2 = (r_115_mv_angular_2 * r_55_new_translation_0);
  double r_117_skew_square_c1_1_0 = (r_115_mv_angular_0 * r_55_new_translation_1);
  double r_117_skew_square_c1_1_1 = (r_115_mv_angular_1 * r_55_new_translation_1);
  double r_117_skew_square_c1_1_2 = (r_115_mv_angular_2 * r_55_new_translation_1);
  double r_117_skew_square_c1_2_0 = (r_115_mv_angular_0 * r_55_new_translation_2);
  double r_117_skew_square_c1_2_1 = (r_115_mv_angular_1 * r_55_new_translation_2);
  double r_117_skew_square_c1_2_2 = (r_115_mv_angular_2 * r_55_new_translation_2);
  double r_118_skew_square_udotv = (((r_55_new_translation_0 * r_115_mv_angular_0) + (r_55_new_translation_1 * r_115_mv_angular_1)) + (r_55_new_translation_2 * r_115_mv_angular_2));
  double r_119_skew_square_c2_0_0 = (r_117_skew_square_c1_0_0 - r_118_skew_square_udotv);
  double r_119_skew_square_c2_0_1 = r_117_skew_square_c1_0_1;
  double r_119_skew_square_c2_0_2 = r_117_skew_square_c1_0_2;
  double r_119_skew_square_c2_1_0 = r_117_skew_square_c1_1_0;
  double r_119_skew_square_c2_1_1 = (r_117_skew_square_c1_1_1 - r_118_skew_square_udotv);
  double r_119_skew_square_c2_1_2 = r_117_skew_square_c1_1_2;
  double r_119_skew_square_c2_2_0 = r_117_skew_square_c1_2_0;
  double r_119_skew_square_c2_2_1 = r_117_skew_square_c1_2_1;
  double r_119_skew_square_c2_2_2 = (r_117_skew_square_c1_2_2 - r_118_skew_square_udotv);
  double r_120_skew_square_c1_0_0 = (r_55_new_translation_0 * r_115_mv_angular_0);
  double r_120_skew_square_c1_0_1 = (r_55_new_translation_1 * r_115_mv_angular_0);
  double r_120_skew_square_c1_0_2 = (r_55_new_translation_2 * r_115_mv_angular_0);
  double r_120_skew_square_c1_1_0 = (r_55_new_translation_0 * r_115_mv_angular_1);
  double r_120_skew_square_c1_1_1 = (r_55_new_translation_1 * r_115_mv_angular_1);
  double r_120_skew_square_c1_1_2 = (r_55_new_translation_2 * r_115_mv_angular_1);
  double r_120_skew_square_c1_2_0 = (r_55_new_translation_0 * r_115_mv_angular_2);
  double r_120_skew_square_c1_2_1 = (r_55_new_translation_1 * r_115_mv_angular_2);
  double r_120_skew_square_c1_2_2 = (r_55_new_translation_2 * r_115_mv_angular_2);
  double r_121_skew_square_udotv = (((r_115_mv_angular_0 * r_55_new_translation_0) + (r_115_mv_angular_1 * r_55_new_translation_1)) + (r_115_mv_angular_2 * r_55_new_translation_2));
  double r_122_skew_square_c2_0_0 = (r_120_skew_square_c1_0_0 - r_121_skew_square_udotv);
  double r_122_skew_square_c2_0_1 = r_120_skew_square_c1_0_1;
  double r_122_skew_square_c2_0_2 = r_120_skew_square_c1_0_2;
  double r_122_skew_square_c2_1_0 = r_120_skew_square_c1_1_0;
  double r_122_skew_square_c2_1_1 = (r_120_skew_square_c1_1_1 - r_121_skew_square_udotv);
  double r_122_skew_square_c2_1_2 = r_120_skew_square_c1_1_2;
  double r_122_skew_square_c2_2_0 = r_120_skew_square_c1_2_0;
  double r_122_skew_square_c2_2_1 = r_120_skew_square_c1_2_1;
  double r_122_skew_square_c2_2_2 = (r_120_skew_square_c1_2_2 - r_121_skew_square_udotv);
  double r_123_res_first_temp_0_0 = (r_122_skew_square_c2_0_0 - r_119_skew_square_c2_0_0);
  double r_123_res_first_temp_0_1 = (r_122_skew_square_c2_0_1 - r_119_skew_square_c2_0_1);
  double r_123_res_first_temp_0_2 = (r_122_skew_square_c2_0_2 - r_119_skew_square_c2_0_2);
  double r_123_res_first_temp_1_0 = (r_122_skew_square_c2_1_0 - r_119_skew_square_c2_1_0);
  double r_123_res_first_temp_1_1 = (r_122_skew_square_c2_1_1 - r_119_skew_square_c2_1_1);
  double r_123_res_first_temp_1_2 = (r_122_skew_square_c2_1_2 - r_119_skew_square_c2_1_2);
  double r_123_res_first_temp_2_0 = (r_122_skew_square_c2_2_0 - r_119_skew_square_c2_2_0);
  double r_123_res_first_temp_2_1 = (r_122_skew_square_c2_2_1 - r_119_skew_square_c2_2_1);
  double r_123_res_first_temp_2_2 = (r_122_skew_square_c2_2_2 - r_119_skew_square_c2_2_2);
  double r_124_res_first_0_0 = (r_123_res_first_temp_0_0 - r_116_skew_vec3d_0_0);
  double r_124_res_first_0_1 = (r_123_res_first_temp_0_1 - r_116_skew_vec3d_0_1);
  double r_124_res_first_0_2 = (r_123_res_first_temp_0_2 - r_116_skew_vec3d_0_2);
  double r_124_res_first_1_0 = (r_123_res_first_temp_1_0 - r_116_skew_vec3d_1_0);
  double r_124_res_first_1_1 = (r_123_res_first_temp_1_1 - r_116_skew_vec3d_1_1);
  double r_124_res_first_1_2 = (r_123_res_first_temp_1_2 - r_116_skew_vec3d_1_2);
  double r_124_res_first_2_0 = (r_123_res_first_temp_2_0 - r_116_skew_vec3d_2_0);
  double r_124_res_first_2_1 = (r_123_res_first_temp_2_1 - r_116_skew_vec3d_2_1);
  double r_124_res_first_2_2 = (r_123_res_first_temp_2_2 - r_116_skew_vec3d_2_2);
  double r_125_skew_square_c1_0_0 = (r_114_mv_linear_0 * r_55_new_translation_0);
  double r_125_skew_square_c1_0_1 = (r_114_mv_linear_1 * r_55_new_translation_0);
  double r_125_skew_square_c1_0_2 = (r_114_mv_linear_2 * r_55_new_translation_0);
  double r_125_skew_square_c1_1_0 = (r_114_mv_linear_0 * r_55_new_translation_1);
  double r_125_skew_square_c1_1_1 = (r_114_mv_linear_1 * r_55_new_translation_1);
  double r_125_skew_square_c1_1_2 = (r_114_mv_linear_2 * r_55_new_translation_1);
  double r_125_skew_square_c1_2_0 = (r_114_mv_linear_0 * r_55_new_translation_2);
  double r_125_skew_square_c1_2_1 = (r_114_mv_linear_1 * r_55_new_translation_2);
  double r_125_skew_square_c1_2_2 = (r_114_mv_linear_2 * r_55_new_translation_2);
  double r_126_skew_square_udotv = (((r_55_new_translation_0 * r_114_mv_linear_0) + (r_55_new_translation_1 * r_114_mv_linear_1)) + (r_55_new_translation_2 * r_114_mv_linear_2));
  double r_127_skew_square_c2_0_0 = (r_125_skew_square_c1_0_0 - r_126_skew_square_udotv);
  double r_127_skew_square_c2_0_1 = r_125_skew_square_c1_0_1;
  double r_127_skew_square_c2_0_2 = r_125_skew_square_c1_0_2;
  double r_127_skew_square_c2_1_0 = r_125_skew_square_c1_1_0;
  double r_127_skew_square_c2_1_1 = (r_125_skew_square_c1_1_1 - r_126_skew_square_udotv);
  double r_127_skew_square_c2_1_2 = r_125_skew_square_c1_1_2;
  double r_127_skew_square_c2_2_0 = r_125_skew_square_c1_2_0;
  double r_127_skew_square_c2_2_1 = r_125_skew_square_c1_2_1;
  double r_127_skew_square_c2_2_2 = (r_125_skew_square_c1_2_2 - r_126_skew_square_udotv);
  double r_128_skew_square_c1_0_0 = (r_55_new_translation_0 * r_114_mv_linear_0);
  double r_128_skew_square_c1_0_1 = (r_55_new_translation_1 * r_114_mv_linear_0);
  double r_128_skew_square_c1_0_2 = (r_55_new_translation_2 * r_114_mv_linear_0);
  double r_128_skew_square_c1_1_0 = (r_55_new_translation_0 * r_114_mv_linear_1);
  double r_128_skew_square_c1_1_1 = (r_55_new_translation_1 * r_114_mv_linear_1);
  double r_128_skew_square_c1_1_2 = (r_55_new_translation_2 * r_114_mv_linear_1);
  double r_128_skew_square_c1_2_0 = (r_55_new_translation_0 * r_114_mv_linear_2);
  double r_128_skew_square_c1_2_1 = (r_55_new_translation_1 * r_114_mv_linear_2);
  double r_128_skew_square_c1_2_2 = (r_55_new_translation_2 * r_114_mv_linear_2);
  double r_129_skew_square_udotv = (((r_114_mv_linear_0 * r_55_new_translation_0) + (r_114_mv_linear_1 * r_55_new_translation_1)) + (r_114_mv_linear_2 * r_55_new_translation_2));
  double r_130_skew_square_c2_0_0 = (r_128_skew_square_c1_0_0 - r_129_skew_square_udotv);
  double r_130_skew_square_c2_0_1 = r_128_skew_square_c1_0_1;
  double r_130_skew_square_c2_0_2 = r_128_skew_square_c1_0_2;
  double r_130_skew_square_c2_1_0 = r_128_skew_square_c1_1_0;
  double r_130_skew_square_c2_1_1 = (r_128_skew_square_c1_1_1 - r_129_skew_square_udotv);
  double r_130_skew_square_c2_1_2 = r_128_skew_square_c1_1_2;
  double r_130_skew_square_c2_2_0 = r_128_skew_square_c1_2_0;
  double r_130_skew_square_c2_2_1 = r_128_skew_square_c1_2_1;
  double r_130_skew_square_c2_2_2 = (r_128_skew_square_c1_2_2 - r_129_skew_square_udotv);
  double r_131_skew_second_second_neg_0_0 = -(r_127_skew_square_c2_0_0);
  double r_131_skew_second_second_neg_0_1 = -(r_127_skew_square_c2_0_1);
  double r_131_skew_second_second_neg_0_2 = -(r_127_skew_square_c2_0_2);
  double r_131_skew_second_second_neg_1_0 = -(r_127_skew_square_c2_1_0);
  double r_131_skew_second_second_neg_1_1 = -(r_127_skew_square_c2_1_1);
  double r_131_skew_second_second_neg_1_2 = -(r_127_skew_square_c2_1_2);
  double r_131_skew_second_second_neg_2_0 = -(r_127_skew_square_c2_2_0);
  double r_131_skew_second_second_neg_2_1 = -(r_127_skew_square_c2_2_1);
  double r_131_skew_second_second_neg_2_2 = -(r_127_skew_square_c2_2_2);
  double r_132_res_second_0_0 = (r_131_skew_second_second_neg_0_0 - r_130_skew_square_c2_0_0);
  double r_132_res_second_0_1 = (r_131_skew_second_second_neg_0_1 - r_130_skew_square_c2_0_1);
  double r_132_res_second_0_2 = (r_131_skew_second_second_neg_0_2 - r_130_skew_square_c2_0_2);
  double r_132_res_second_1_0 = (r_131_skew_second_second_neg_1_0 - r_130_skew_square_c2_1_0);
  double r_132_res_second_1_1 = (r_131_skew_second_second_neg_1_1 - r_130_skew_square_c2_1_1);
  double r_132_res_second_1_2 = (r_131_skew_second_second_neg_1_2 - r_130_skew_square_c2_1_2);
  double r_132_res_second_2_0 = (r_131_skew_second_second_neg_2_0 - r_130_skew_square_c2_2_0);
  double r_132_res_second_2_1 = (r_131_skew_second_second_neg_2_1 - r_130_skew_square_c2_2_1);
  double r_132_res_second_2_2 = (r_131_skew_second_second_neg_2_2 - r_130_skew_square_c2_2_2);
  double r_133_alpha_skew_square_0_0 = (((r_55_new_translation_1 * r_55_new_translation_1) + (r_55_new_translation_2 * r_55_new_translation_2)) * -(masses_1));
  double r_133_alpha_skew_square_0_1 = (r_55_new_translation_1 * (r_55_new_translation_0 * masses_1));
  double r_133_alpha_skew_square_0_2 = (r_55_new_translation_2 * (r_55_new_translation_0 * masses_1));
  double r_133_alpha_skew_square_1_0 = (r_55_new_translation_1 * (r_55_new_translation_0 * masses_1));
  double r_133_alpha_skew_square_1_1 = (((r_55_new_translation_0 * r_55_new_translation_0) + (r_55_new_translation_2 * r_55_new_translation_2)) * -(masses_1));
  double r_133_alpha_skew_square_1_2 = (r_55_new_translation_2 * (r_55_new_translation_1 * masses_1));
  double r_133_alpha_skew_square_2_0 = (r_55_new_translation_2 * (r_55_new_translation_0 * masses_1));
  double r_133_alpha_skew_square_2_1 = (r_55_new_translation_2 * (r_55_new_translation_1 * masses_1));
  double r_133_alpha_skew_square_2_2 = (((r_55_new_translation_0 * r_55_new_translation_0) + (r_55_new_translation_1 * r_55_new_translation_1)) * -(masses_1));
  double r_134_res_third_0_0 = (r_68_symmetric3_rotate_0_0 - r_133_alpha_skew_square_0_0);
  double r_134_res_third_0_1 = (r_68_symmetric3_rotate_0_1 - r_133_alpha_skew_square_0_1);
  double r_134_res_third_0_2 = (r_68_symmetric3_rotate_0_2 - r_133_alpha_skew_square_0_2);
  double r_134_res_third_1_0 = (r_68_symmetric3_rotate_1_0 - r_133_alpha_skew_square_1_0);
  double r_134_res_third_1_1 = (r_68_symmetric3_rotate_1_1 - r_133_alpha_skew_square_1_1);
  double r_134_res_third_1_2 = (r_68_symmetric3_rotate_1_2 - r_133_alpha_skew_square_1_2);
  double r_134_res_third_2_0 = (r_68_symmetric3_rotate_2_0 - r_133_alpha_skew_square_2_0);
  double r_134_res_third_2_1 = (r_68_symmetric3_rotate_2_1 - r_133_alpha_skew_square_2_1);
  double r_134_res_third_2_2 = (r_68_symmetric3_rotate_2_2 - r_133_alpha_skew_square_2_2);
  double r_135_skew_vec3d_0_0 = 0;
  double r_135_skew_vec3d_0_1 = -(ov_angular_1_2);
  double r_135_skew_vec3d_0_2 = ov_angular_1_1;
  double r_135_skew_vec3d_1_0 = ov_angular_1_2;
  double r_135_skew_vec3d_1_1 = 0;
  double r_135_skew_vec3d_1_2 = -(ov_angular_1_0);
  double r_135_skew_vec3d_2_0 = -(ov_angular_1_1);
  double r_135_skew_vec3d_2_1 = ov_angular_1_0;
  double r_135_skew_vec3d_2_2 = 0;
  double r_136_res_fourth_0_0 = (((r_134_res_third_0_0 * r_135_skew_vec3d_0_0) + (r_134_res_third_0_1 * r_135_skew_vec3d_1_0)) + (r_134_res_third_0_2 * r_135_skew_vec3d_2_0));
  double r_136_res_fourth_0_1 = (((r_134_res_third_0_0 * r_135_skew_vec3d_0_1) + (r_134_res_third_0_1 * r_135_skew_vec3d_1_1)) + (r_134_res_third_0_2 * r_135_skew_vec3d_2_1));
  double r_136_res_fourth_0_2 = (((r_134_res_third_0_0 * r_135_skew_vec3d_0_2) + (r_134_res_third_0_1 * r_135_skew_vec3d_1_2)) + (r_134_res_third_0_2 * r_135_skew_vec3d_2_2));
  double r_136_res_fourth_1_0 = (((r_134_res_third_1_0 * r_135_skew_vec3d_0_0) + (r_134_res_third_1_1 * r_135_skew_vec3d_1_0)) + (r_134_res_third_1_2 * r_135_skew_vec3d_2_0));
  double r_136_res_fourth_1_1 = (((r_134_res_third_1_0 * r_135_skew_vec3d_0_1) + (r_134_res_third_1_1 * r_135_skew_vec3d_1_1)) + (r_134_res_third_1_2 * r_135_skew_vec3d_2_1));
  double r_136_res_fourth_1_2 = (((r_134_res_third_1_0 * r_135_skew_vec3d_0_2) + (r_134_res_third_1_1 * r_135_skew_vec3d_1_2)) + (r_134_res_third_1_2 * r_135_skew_vec3d_2_2));
  double r_136_res_fourth_2_0 = (((r_134_res_third_2_0 * r_135_skew_vec3d_0_0) + (r_134_res_third_2_1 * r_135_skew_vec3d_1_0)) + (r_134_res_third_2_2 * r_135_skew_vec3d_2_0));
  double r_136_res_fourth_2_1 = (((r_134_res_third_2_0 * r_135_skew_vec3d_0_1) + (r_134_res_third_2_1 * r_135_skew_vec3d_1_1)) + (r_134_res_third_2_2 * r_135_skew_vec3d_2_1));
  double r_136_res_fourth_2_2 = (((r_134_res_third_2_0 * r_135_skew_vec3d_0_2) + (r_134_res_third_2_1 * r_135_skew_vec3d_1_2)) + (r_134_res_third_2_2 * r_135_skew_vec3d_2_2));
  double r_137_res_fifth_0_0 = (r_132_res_second_0_0 - r_136_res_fourth_0_0);
  double r_137_res_fifth_0_1 = (r_132_res_second_0_1 - r_136_res_fourth_0_1);
  double r_137_res_fifth_0_2 = (r_132_res_second_0_2 - r_136_res_fourth_0_2);
  double r_137_res_fifth_1_0 = (r_132_res_second_1_0 - r_136_res_fourth_1_0);
  double r_137_res_fifth_1_1 = (r_132_res_second_1_1 - r_136_res_fourth_1_1);
  double r_137_res_fifth_1_2 = (r_132_res_second_1_2 - r_136_res_fourth_1_2);
  double r_137_res_fifth_2_0 = (r_132_res_second_2_0 - r_136_res_fourth_2_0);
  double r_137_res_fifth_2_1 = (r_132_res_second_2_1 - r_136_res_fourth_2_1);
  double r_137_res_fifth_2_2 = (r_132_res_second_2_2 - r_136_res_fourth_2_2);
  double r_138_res_third_first_col_0 = r_134_res_third_0_0;
  double r_138_res_third_first_col_1 = r_134_res_third_1_0;
  double r_138_res_third_first_col_2 = r_134_res_third_2_0;
  double r_139_res_third_second_col_0 = r_134_res_third_0_1;
  double r_139_res_third_second_col_1 = r_134_res_third_1_1;
  double r_139_res_third_second_col_2 = r_134_res_third_2_1;
  double r_140_res_third_third_col_0 = r_134_res_third_0_2;
  double r_140_res_third_third_col_1 = r_134_res_third_1_2;
  double r_140_res_third_third_col_2 = r_134_res_third_2_2;
  double r_141_res_sixth_first_col_0 = ((ov_angular_1_1 * r_138_res_third_first_col_2) - (ov_angular_1_2 * r_138_res_third_first_col_1));
  double r_141_res_sixth_first_col_1 = ((ov_angular_1_2 * r_138_res_third_first_col_0) - (ov_angular_1_0 * r_138_res_third_first_col_2));
  double r_141_res_sixth_first_col_2 = ((ov_angular_1_0 * r_138_res_third_first_col_1) - (ov_angular_1_1 * r_138_res_third_first_col_0));
  double r_142_res_sixth_second_col_0 = ((ov_angular_1_1 * r_139_res_third_second_col_2) - (ov_angular_1_2 * r_139_res_third_second_col_1));
  double r_142_res_sixth_second_col_1 = ((ov_angular_1_2 * r_139_res_third_second_col_0) - (ov_angular_1_0 * r_139_res_third_second_col_2));
  double r_142_res_sixth_second_col_2 = ((ov_angular_1_0 * r_139_res_third_second_col_1) - (ov_angular_1_1 * r_139_res_third_second_col_0));
  double r_143_res_sixth_third_col_0 = ((ov_angular_1_1 * r_140_res_third_third_col_2) - (ov_angular_1_2 * r_140_res_third_third_col_1));
  double r_143_res_sixth_third_col_1 = ((ov_angular_1_2 * r_140_res_third_third_col_0) - (ov_angular_1_0 * r_140_res_third_third_col_2));
  double r_143_res_sixth_third_col_2 = ((ov_angular_1_0 * r_140_res_third_third_col_1) - (ov_angular_1_1 * r_140_res_third_third_col_0));
  double r_144_res_sixth_0_0 = (r_137_res_fifth_0_0 + r_141_res_sixth_first_col_0);
  double r_144_res_sixth_0_1 = (r_137_res_fifth_0_1 + r_142_res_sixth_second_col_0);
  double r_144_res_sixth_0_2 = (r_137_res_fifth_0_2 + r_143_res_sixth_third_col_0);
  double r_144_res_sixth_1_0 = (r_137_res_fifth_1_0 + r_141_res_sixth_first_col_1);
  double r_144_res_sixth_1_1 = (r_137_res_fifth_1_1 + r_142_res_sixth_second_col_1);
  double r_144_res_sixth_1_2 = (r_137_res_fifth_1_2 + r_143_res_sixth_third_col_1);
  double r_144_res_sixth_2_0 = (r_137_res_fifth_2_0 + r_141_res_sixth_first_col_2);
  double r_144_res_sixth_2_1 = (r_137_res_fifth_2_1 + r_142_res_sixth_second_col_2);
  double r_144_res_sixth_2_2 = (r_137_res_fifth_2_2 + r_143_res_sixth_third_col_2);
  double inertia_variation_1_0_0 = 0;
  double inertia_variation_1_0_1 = 0;
  double inertia_variation_1_0_2 = 0;
  double inertia_variation_1_0_3 = r_124_res_first_0_0;
  double inertia_variation_1_0_4 = r_124_res_first_0_1;
  double inertia_variation_1_0_5 = r_124_res_first_0_2;
  double inertia_variation_1_1_0 = 0;
  double inertia_variation_1_1_1 = 0;
  double inertia_variation_1_1_2 = 0;
  double inertia_variation_1_1_3 = r_124_res_first_1_0;
  double inertia_variation_1_1_4 = r_124_res_first_1_1;
  double inertia_variation_1_1_5 = r_124_res_first_1_2;
  double inertia_variation_1_2_0 = 0;
  double inertia_variation_1_2_1 = 0;
  double inertia_variation_1_2_2 = 0;
  double inertia_variation_1_2_3 = r_124_res_first_2_0;
  double inertia_variation_1_2_4 = r_124_res_first_2_1;
  double inertia_variation_1_2_5 = r_124_res_first_2_2;
  double inertia_variation_1_3_0 = r_124_res_first_0_0;
  double inertia_variation_1_3_1 = r_124_res_first_1_0;
  double inertia_variation_1_3_2 = r_124_res_first_2_0;
  double inertia_variation_1_3_3 = r_144_res_sixth_0_0;
  double inertia_variation_1_3_4 = r_144_res_sixth_0_1;
  double inertia_variation_1_3_5 = r_144_res_sixth_0_2;
  double inertia_variation_1_4_0 = r_124_res_first_0_1;
  double inertia_variation_1_4_1 = r_124_res_first_1_1;
  double inertia_variation_1_4_2 = r_124_res_first_2_1;
  double inertia_variation_1_4_3 = r_144_res_sixth_1_0;
  double inertia_variation_1_4_4 = r_144_res_sixth_1_1;
  double inertia_variation_1_4_5 = r_144_res_sixth_1_2;
  double inertia_variation_1_5_0 = r_124_res_first_0_2;
  double inertia_variation_1_5_1 = r_124_res_first_1_2;
  double inertia_variation_1_5_2 = r_124_res_first_2_2;
  double inertia_variation_1_5_3 = r_144_res_sixth_2_0;
  double inertia_variation_1_5_4 = r_144_res_sixth_2_1;
  double inertia_variation_1_5_5 = r_144_res_sixth_2_2;
  double r_145_add_force_cross_linear_angular_0_0 = inertia_variation_1_0_3;
  double r_145_add_force_cross_linear_angular_0_1 = inertia_variation_1_0_4;
  double r_145_add_force_cross_linear_angular_0_2 = inertia_variation_1_0_5;
  double r_145_add_force_cross_linear_angular_1_0 = inertia_variation_1_1_3;
  double r_145_add_force_cross_linear_angular_1_1 = inertia_variation_1_1_4;
  double r_145_add_force_cross_linear_angular_1_2 = inertia_variation_1_1_5;
  double r_145_add_force_cross_linear_angular_2_0 = inertia_variation_1_2_3;
  double r_145_add_force_cross_linear_angular_2_1 = inertia_variation_1_2_4;
  double r_145_add_force_cross_linear_angular_2_2 = inertia_variation_1_2_5;
  double r_146_add_force_cross_angular_linear_0_0 = inertia_variation_1_3_0;
  double r_146_add_force_cross_angular_linear_0_1 = inertia_variation_1_3_1;
  double r_146_add_force_cross_angular_linear_0_2 = inertia_variation_1_3_2;
  double r_146_add_force_cross_angular_linear_1_0 = inertia_variation_1_4_0;
  double r_146_add_force_cross_angular_linear_1_1 = inertia_variation_1_4_1;
  double r_146_add_force_cross_angular_linear_1_2 = inertia_variation_1_4_2;
  double r_146_add_force_cross_angular_linear_2_0 = inertia_variation_1_5_0;
  double r_146_add_force_cross_angular_linear_2_1 = inertia_variation_1_5_1;
  double r_146_add_force_cross_angular_linear_2_2 = inertia_variation_1_5_2;
  double r_147_add_force_cross_angular_angular_0_0 = inertia_variation_1_3_3;
  double r_147_add_force_cross_angular_angular_0_1 = inertia_variation_1_3_4;
  double r_147_add_force_cross_angular_angular_0_2 = inertia_variation_1_3_5;
  double r_147_add_force_cross_angular_angular_1_0 = inertia_variation_1_4_3;
  double r_147_add_force_cross_angular_angular_1_1 = inertia_variation_1_4_4;
  double r_147_add_force_cross_angular_angular_1_2 = inertia_variation_1_4_5;
  double r_147_add_force_cross_angular_angular_2_0 = inertia_variation_1_5_3;
  double r_147_add_force_cross_angular_angular_2_1 = inertia_variation_1_5_4;
  double r_147_add_force_cross_angular_angular_2_2 = inertia_variation_1_5_5;
  double r_148_minus_f_linear_0 = -(data_oh_linear_1_0);
  double r_148_minus_f_linear_1 = -(data_oh_linear_1_1);
  double r_148_minus_f_linear_2 = -(data_oh_linear_1_2);
  double r_149_minus_f_angular_0 = -(data_oh_angular_1_0);
  double r_149_minus_f_angular_1 = -(data_oh_angular_1_1);
  double r_149_minus_f_angular_2 = -(data_oh_angular_1_2);
  double r_150_add_skew_0_0 = r_145_add_force_cross_linear_angular_0_0;
  double r_150_add_skew_0_1 = (r_145_add_force_cross_linear_angular_0_1 - r_148_minus_f_linear_2);
  double r_150_add_skew_0_2 = (r_145_add_force_cross_linear_angular_0_2 + r_148_minus_f_linear_1);
  double r_150_add_skew_1_0 = (r_145_add_force_cross_linear_angular_1_0 + r_148_minus_f_linear_2);
  double r_150_add_skew_1_1 = r_145_add_force_cross_linear_angular_1_1;
  double r_150_add_skew_1_2 = (r_145_add_force_cross_linear_angular_1_2 - r_148_minus_f_linear_0);
  double r_150_add_skew_2_0 = (r_145_add_force_cross_linear_angular_2_0 - r_148_minus_f_linear_1);
  double r_150_add_skew_2_1 = (r_145_add_force_cross_linear_angular_2_1 + r_148_minus_f_linear_0);
  double r_150_add_skew_2_2 = r_145_add_force_cross_linear_angular_2_2;
  double r_151_res_linear_angular_0_0 = r_150_add_skew_0_0;
  double r_151_res_linear_angular_0_1 = r_150_add_skew_0_1;
  double r_151_res_linear_angular_0_2 = r_150_add_skew_0_2;
  double r_151_res_linear_angular_1_0 = r_150_add_skew_1_0;
  double r_151_res_linear_angular_1_1 = r_150_add_skew_1_1;
  double r_151_res_linear_angular_1_2 = r_150_add_skew_1_2;
  double r_151_res_linear_angular_2_0 = r_150_add_skew_2_0;
  double r_151_res_linear_angular_2_1 = r_150_add_skew_2_1;
  double r_151_res_linear_angular_2_2 = r_150_add_skew_2_2;
  double r_152_add_skew_0_0 = r_146_add_force_cross_angular_linear_0_0;
  double r_152_add_skew_0_1 = (r_146_add_force_cross_angular_linear_0_1 - r_148_minus_f_linear_2);
  double r_152_add_skew_0_2 = (r_146_add_force_cross_angular_linear_0_2 + r_148_minus_f_linear_1);
  double r_152_add_skew_1_0 = (r_146_add_force_cross_angular_linear_1_0 + r_148_minus_f_linear_2);
  double r_152_add_skew_1_1 = r_146_add_force_cross_angular_linear_1_1;
  double r_152_add_skew_1_2 = (r_146_add_force_cross_angular_linear_1_2 - r_148_minus_f_linear_0);
  double r_152_add_skew_2_0 = (r_146_add_force_cross_angular_linear_2_0 - r_148_minus_f_linear_1);
  double r_152_add_skew_2_1 = (r_146_add_force_cross_angular_linear_2_1 + r_148_minus_f_linear_0);
  double r_152_add_skew_2_2 = r_146_add_force_cross_angular_linear_2_2;
  double r_153_res_angular_linear_0_0 = r_152_add_skew_0_0;
  double r_153_res_angular_linear_0_1 = r_152_add_skew_0_1;
  double r_153_res_angular_linear_0_2 = r_152_add_skew_0_2;
  double r_153_res_angular_linear_1_0 = r_152_add_skew_1_0;
  double r_153_res_angular_linear_1_1 = r_152_add_skew_1_1;
  double r_153_res_angular_linear_1_2 = r_152_add_skew_1_2;
  double r_153_res_angular_linear_2_0 = r_152_add_skew_2_0;
  double r_153_res_angular_linear_2_1 = r_152_add_skew_2_1;
  double r_153_res_angular_linear_2_2 = r_152_add_skew_2_2;
  double r_154_add_skew_0_0 = r_147_add_force_cross_angular_angular_0_0;
  double r_154_add_skew_0_1 = (r_147_add_force_cross_angular_angular_0_1 - r_149_minus_f_angular_2);
  double r_154_add_skew_0_2 = (r_147_add_force_cross_angular_angular_0_2 + r_149_minus_f_angular_1);
  double r_154_add_skew_1_0 = (r_147_add_force_cross_angular_angular_1_0 + r_149_minus_f_angular_2);
  double r_154_add_skew_1_1 = r_147_add_force_cross_angular_angular_1_1;
  double r_154_add_skew_1_2 = (r_147_add_force_cross_angular_angular_1_2 - r_149_minus_f_angular_0);
  double r_154_add_skew_2_0 = (r_147_add_force_cross_angular_angular_2_0 - r_149_minus_f_angular_1);
  double r_154_add_skew_2_1 = (r_147_add_force_cross_angular_angular_2_1 + r_149_minus_f_angular_0);
  double r_154_add_skew_2_2 = r_147_add_force_cross_angular_angular_2_2;
  double r_155_res_angular_angular_0_0 = r_154_add_skew_0_0;
  double r_155_res_angular_angular_0_1 = r_154_add_skew_0_1;
  double r_155_res_angular_angular_0_2 = r_154_add_skew_0_2;
  double r_155_res_angular_angular_1_0 = r_154_add_skew_1_0;
  double r_155_res_angular_angular_1_1 = r_154_add_skew_1_1;
  double r_155_res_angular_angular_1_2 = r_154_add_skew_1_2;
  double r_155_res_angular_angular_2_0 = r_154_add_skew_2_0;
  double r_155_res_angular_angular_2_1 = r_154_add_skew_2_1;
  double r_155_res_angular_angular_2_2 = r_154_add_skew_2_2;
  double add_force_cross_matrix_1_0_0 = inertia_variation_1_0_0;
  double add_force_cross_matrix_1_0_1 = inertia_variation_1_0_1;
  double add_force_cross_matrix_1_0_2 = inertia_variation_1_0_2;
  double add_force_cross_matrix_1_0_3 = r_151_res_linear_angular_0_0;
  double add_force_cross_matrix_1_0_4 = r_151_res_linear_angular_0_1;
  double add_force_cross_matrix_1_0_5 = r_151_res_linear_angular_0_2;
  double add_force_cross_matrix_1_1_0 = inertia_variation_1_1_0;
  double add_force_cross_matrix_1_1_1 = inertia_variation_1_1_1;
  double add_force_cross_matrix_1_1_2 = inertia_variation_1_1_2;
  double add_force_cross_matrix_1_1_3 = r_151_res_linear_angular_1_0;
  double add_force_cross_matrix_1_1_4 = r_151_res_linear_angular_1_1;
  double add_force_cross_matrix_1_1_5 = r_151_res_linear_angular_1_2;
  double add_force_cross_matrix_1_2_0 = inertia_variation_1_2_0;
  double add_force_cross_matrix_1_2_1 = inertia_variation_1_2_1;
  double add_force_cross_matrix_1_2_2 = inertia_variation_1_2_2;
  double add_force_cross_matrix_1_2_3 = r_151_res_linear_angular_2_0;
  double add_force_cross_matrix_1_2_4 = r_151_res_linear_angular_2_1;
  double add_force_cross_matrix_1_2_5 = r_151_res_linear_angular_2_2;
  double add_force_cross_matrix_1_3_0 = r_153_res_angular_linear_0_0;
  double add_force_cross_matrix_1_3_1 = r_153_res_angular_linear_0_1;
  double add_force_cross_matrix_1_3_2 = r_153_res_angular_linear_0_2;
  double add_force_cross_matrix_1_3_3 = r_155_res_angular_angular_0_0;
  double add_force_cross_matrix_1_3_4 = r_155_res_angular_angular_0_1;
  double add_force_cross_matrix_1_3_5 = r_155_res_angular_angular_0_2;
  double add_force_cross_matrix_1_4_0 = r_153_res_angular_linear_1_0;
  double add_force_cross_matrix_1_4_1 = r_153_res_angular_linear_1_1;
  double add_force_cross_matrix_1_4_2 = r_153_res_angular_linear_1_2;
  double add_force_cross_matrix_1_4_3 = r_155_res_angular_angular_1_0;
  double add_force_cross_matrix_1_4_4 = r_155_res_angular_angular_1_1;
  double add_force_cross_matrix_1_4_5 = r_155_res_angular_angular_1_2;
  double add_force_cross_matrix_1_5_0 = r_153_res_angular_linear_2_0;
  double add_force_cross_matrix_1_5_1 = r_153_res_angular_linear_2_1;
  double add_force_cross_matrix_1_5_2 = r_153_res_angular_linear_2_2;
  double add_force_cross_matrix_1_5_3 = r_155_res_angular_angular_2_0;
  double add_force_cross_matrix_1_5_4 = r_155_res_angular_angular_2_1;
  double add_force_cross_matrix_1_5_5 = r_155_res_angular_angular_2_2;
  double rotation_matrix_2_0_0 = qcos_2;
  double rotation_matrix_2_0_1 = -(qsin_2);
  double rotation_matrix_2_0_2 = 0;
  double rotation_matrix_2_1_0 = qsin_2;
  double rotation_matrix_2_1_1 = qcos_2;
  double rotation_matrix_2_1_2 = 0;
  double rotation_matrix_2_2_0 = 0;
  double rotation_matrix_2_2_1 = 0;
  double rotation_matrix_2_2_2 = 1;
  double limi_rotation_2_0_0 = rotation_matrix_2_0_0;
  double limi_rotation_2_0_1 = rotation_matrix_2_0_1;
  double limi_rotation_2_0_2 = 0;
  double limi_rotation_2_1_0 = 0;
  double limi_rotation_2_1_1 = 0;
  double limi_rotation_2_1_2 = -1;
  double limi_rotation_2_2_0 = rotation_matrix_2_1_0;
  double limi_rotation_2_2_1 = rotation_matrix_2_1_1;
  double limi_rotation_2_2_2 = 0;
  double v_linear_2_0 = data_v_2_0;
  double v_linear_2_1 = data_v_2_1;
  double v_linear_2_2 = data_v_2_2;
  double v_angular_2_0 = data_v_2_3;
  double v_angular_2_1 = data_v_2_4;
  double v_angular_2_2 = v_2;
  double parent_v_linear_2_0 = all_v_1_0;
  double parent_v_linear_2_1 = all_v_1_1;
  double parent_v_linear_2_2 = all_v_1_2;
  double parent_v_angular_2_0 = all_v_1_3;
  double parent_v_angular_2_1 = all_v_1_4;
  double parent_v_angular_2_2 = all_v_1_5;
  double parent_a_linear_2_0 = a_final_1_0;
  double parent_a_linear_2_1 = a_final_1_1;
  double parent_a_linear_2_2 = a_final_1_2;
  double parent_a_angular_2_0 = a_final_1_3;
  double parent_a_angular_2_1 = a_final_1_4;
  double parent_a_angular_2_2 = a_final_1_5;
  double oMi_rotation_2_0_0 = (((oMi_rotation_1_0_0 * limi_rotation_2_0_0) + (oMi_rotation_1_0_1 * limi_rotation_2_1_0)) + (oMi_rotation_1_0_2 * limi_rotation_2_2_0));
  double oMi_rotation_2_0_1 = (((oMi_rotation_1_0_0 * limi_rotation_2_0_1) + (oMi_rotation_1_0_1 * limi_rotation_2_1_1)) + (oMi_rotation_1_0_2 * limi_rotation_2_2_1));
  double oMi_rotation_2_0_2 = (((oMi_rotation_1_0_0 * limi_rotation_2_0_2) + (oMi_rotation_1_0_1 * limi_rotation_2_1_2)) + (oMi_rotation_1_0_2 * limi_rotation_2_2_2));
  double oMi_rotation_2_1_0 = (((oMi_rotation_1_1_0 * limi_rotation_2_0_0) + (oMi_rotation_1_1_1 * limi_rotation_2_1_0)) + (oMi_rotation_1_1_2 * limi_rotation_2_2_0));
  double oMi_rotation_2_1_1 = (((oMi_rotation_1_1_0 * limi_rotation_2_0_1) + (oMi_rotation_1_1_1 * limi_rotation_2_1_1)) + (oMi_rotation_1_1_2 * limi_rotation_2_2_1));
  double oMi_rotation_2_1_2 = (((oMi_rotation_1_1_0 * limi_rotation_2_0_2) + (oMi_rotation_1_1_1 * limi_rotation_2_1_2)) + (oMi_rotation_1_1_2 * limi_rotation_2_2_2));
  double oMi_rotation_2_2_0 = (((oMi_rotation_1_2_0 * limi_rotation_2_0_0) + (oMi_rotation_1_2_1 * limi_rotation_2_1_0)) + (oMi_rotation_1_2_2 * limi_rotation_2_2_0));
  double oMi_rotation_2_2_1 = (((oMi_rotation_1_2_0 * limi_rotation_2_0_1) + (oMi_rotation_1_2_1 * limi_rotation_2_1_1)) + (oMi_rotation_1_2_2 * limi_rotation_2_2_1));
  double oMi_rotation_2_2_2 = (((oMi_rotation_1_2_0 * limi_rotation_2_0_2) + (oMi_rotation_1_2_1 * limi_rotation_2_1_2)) + (oMi_rotation_1_2_2 * limi_rotation_2_2_2));
  double oMi_translation_to_add_2_0 = (((oMi_rotation_1_0_0 * limi_translation_2_0) + (oMi_rotation_1_0_1 * limi_translation_2_1)) + (oMi_rotation_1_0_2 * limi_translation_2_2));
  double oMi_translation_to_add_2_1 = (((oMi_rotation_1_1_0 * limi_translation_2_0) + (oMi_rotation_1_1_1 * limi_translation_2_1)) + (oMi_rotation_1_1_2 * limi_translation_2_2));
  double oMi_translation_to_add_2_2 = (((oMi_rotation_1_2_0 * limi_translation_2_0) + (oMi_rotation_1_2_1 * limi_translation_2_1)) + (oMi_rotation_1_2_2 * limi_translation_2_2));
  double oMi_translation_2_0 = (oMi_translation_1_0 + oMi_translation_to_add_2_0);
  double oMi_translation_2_1 = (oMi_translation_1_1 + oMi_translation_to_add_2_1);
  double oMi_translation_2_2 = (oMi_translation_1_2 + oMi_translation_to_add_2_2);
  double actInv1_2_0 = ((limi_translation_2_1 * parent_v_angular_2_2) - (limi_translation_2_2 * parent_v_angular_2_1));
  double actInv1_2_1 = ((limi_translation_2_2 * parent_v_angular_2_0) - (limi_translation_2_0 * parent_v_angular_2_2));
  double actInv1_2_2 = ((limi_translation_2_0 * parent_v_angular_2_1) - (limi_translation_2_1 * parent_v_angular_2_0));
  double actInv2_2_0 = (parent_v_linear_2_0 - actInv1_2_0);
  double actInv2_2_1 = (parent_v_linear_2_1 - actInv1_2_1);
  double actInv2_2_2 = (parent_v_linear_2_2 - actInv1_2_2);
  double actInv3_2_0_0 = limi_rotation_2_0_0;
  double actInv3_2_1_0 = limi_rotation_2_0_1;
  double actInv3_2_2_0 = limi_rotation_2_0_2;
  double actInv3_2_0_1 = limi_rotation_2_1_0;
  double actInv3_2_1_1 = limi_rotation_2_1_1;
  double actInv3_2_2_1 = limi_rotation_2_1_2;
  double actInv3_2_0_2 = limi_rotation_2_2_0;
  double actInv3_2_1_2 = limi_rotation_2_2_1;
  double actInv3_2_2_2 = limi_rotation_2_2_2;
  double actInv4_2_0 = (((actInv3_2_0_0 * actInv2_2_0) + (actInv3_2_0_1 * actInv2_2_1)) + (actInv3_2_0_2 * actInv2_2_2));
  double actInv4_2_1 = (((actInv3_2_1_0 * actInv2_2_0) + (actInv3_2_1_1 * actInv2_2_1)) + (actInv3_2_1_2 * actInv2_2_2));
  double actInv4_2_2 = (((actInv3_2_2_0 * actInv2_2_0) + (actInv3_2_2_1 * actInv2_2_1)) + (actInv3_2_2_2 * actInv2_2_2));
  double act_inv_linear_2_0 = (v_linear_2_0 + actInv4_2_0);
  double act_inv_linear_2_1 = (v_linear_2_1 + actInv4_2_1);
  double act_inv_linear_2_2 = (v_linear_2_2 + actInv4_2_2);
  double actInv5_2_0 = (((actInv3_2_0_0 * parent_v_angular_2_0) + (actInv3_2_0_1 * parent_v_angular_2_1)) + (actInv3_2_0_2 * parent_v_angular_2_2));
  double actInv5_2_1 = (((actInv3_2_1_0 * parent_v_angular_2_0) + (actInv3_2_1_1 * parent_v_angular_2_1)) + (actInv3_2_1_2 * parent_v_angular_2_2));
  double actInv5_2_2 = (((actInv3_2_2_0 * parent_v_angular_2_0) + (actInv3_2_2_1 * parent_v_angular_2_1)) + (actInv3_2_2_2 * parent_v_angular_2_2));
  double act_inv_angular_2_0 = (v_angular_2_0 + actInv5_2_0);
  double act_inv_angular_2_1 = (v_angular_2_1 + actInv5_2_1);
  double act_inv_angular_2_2 = (v_angular_2_2 + actInv5_2_2);
  double all_v_2_0 = act_inv_linear_2_0;
  double all_v_2_1 = act_inv_linear_2_1;
  double all_v_2_2 = act_inv_linear_2_2;
  double all_v_2_3 = act_inv_angular_2_0;
  double all_v_2_4 = act_inv_angular_2_1;
  double all_v_2_5 = act_inv_angular_2_2;
  double minus_m_w_2 = -(v_2);
  double alpha_cross1_linear_2 = (-(minus_m_w_2) * act_inv_linear_2_1);
  double alpha_cross2_linear_2 = (minus_m_w_2 * act_inv_linear_2_0);
  double alpha_cross_linear_2_0 = alpha_cross1_linear_2;
  double alpha_cross_linear_2_1 = alpha_cross2_linear_2;
  double alpha_cross_linear_2_2 = 0;
  double alpha_cross1_angular_2 = (-(minus_m_w_2) * act_inv_angular_2_1);
  double alpha_cross2_angular_2 = (minus_m_w_2 * act_inv_angular_2_0);
  double alpha_cross_angular_2_0 = alpha_cross1_angular_2;
  double alpha_cross_angular_2_1 = alpha_cross2_angular_2;
  double alpha_cross_angular_2_2 = 0;
  double new_data_a_2_0 = alpha_cross_linear_2_0;
  double new_data_a_2_1 = alpha_cross_linear_2_1;
  double new_data_a_2_2 = alpha_cross_linear_2_2;
  double new_data_a_2_3 = alpha_cross_angular_2_0;
  double new_data_a_2_4 = alpha_cross_angular_2_1;
  double new_data_a_2_5 = a_2;
  double temp_a_linear_2_0 = new_data_a_2_0;
  double temp_a_linear_2_1 = new_data_a_2_1;
  double temp_a_linear_2_2 = new_data_a_2_2;
  double temp_a_angular_2_0 = new_data_a_2_3;
  double temp_a_angular_2_1 = new_data_a_2_4;
  double temp_a_angular_2_2 = new_data_a_2_5;
  double r_156_actInv1_2_0 = ((limi_translation_2_1 * parent_a_angular_2_2) - (limi_translation_2_2 * parent_a_angular_2_1));
  double r_156_actInv1_2_1 = ((limi_translation_2_2 * parent_a_angular_2_0) - (limi_translation_2_0 * parent_a_angular_2_2));
  double r_156_actInv1_2_2 = ((limi_translation_2_0 * parent_a_angular_2_1) - (limi_translation_2_1 * parent_a_angular_2_0));
  double r_157_actInv2_2_0 = (parent_a_linear_2_0 - r_156_actInv1_2_0);
  double r_157_actInv2_2_1 = (parent_a_linear_2_1 - r_156_actInv1_2_1);
  double r_157_actInv2_2_2 = (parent_a_linear_2_2 - r_156_actInv1_2_2);
  double r_158_actInv3_2_0_0 = limi_rotation_2_0_0;
  double r_158_actInv3_2_1_0 = limi_rotation_2_0_1;
  double r_158_actInv3_2_2_0 = limi_rotation_2_0_2;
  double r_158_actInv3_2_0_1 = limi_rotation_2_1_0;
  double r_158_actInv3_2_1_1 = limi_rotation_2_1_1;
  double r_158_actInv3_2_2_1 = limi_rotation_2_1_2;
  double r_158_actInv3_2_0_2 = limi_rotation_2_2_0;
  double r_158_actInv3_2_1_2 = limi_rotation_2_2_1;
  double r_158_actInv3_2_2_2 = limi_rotation_2_2_2;
  double r_159_actInv4_2_0 = (((r_158_actInv3_2_0_0 * r_157_actInv2_2_0) + (r_158_actInv3_2_0_1 * r_157_actInv2_2_1)) + (r_158_actInv3_2_0_2 * r_157_actInv2_2_2));
  double r_159_actInv4_2_1 = (((r_158_actInv3_2_1_0 * r_157_actInv2_2_0) + (r_158_actInv3_2_1_1 * r_157_actInv2_2_1)) + (r_158_actInv3_2_1_2 * r_157_actInv2_2_2));
  double r_159_actInv4_2_2 = (((r_158_actInv3_2_2_0 * r_157_actInv2_2_0) + (r_158_actInv3_2_2_1 * r_157_actInv2_2_1)) + (r_158_actInv3_2_2_2 * r_157_actInv2_2_2));
  double r_160_act_inv_linear_2_0 = (temp_a_linear_2_0 + r_159_actInv4_2_0);
  double r_160_act_inv_linear_2_1 = (temp_a_linear_2_1 + r_159_actInv4_2_1);
  double r_160_act_inv_linear_2_2 = (temp_a_linear_2_2 + r_159_actInv4_2_2);
  double r_161_actInv5_2_0 = (((r_158_actInv3_2_0_0 * parent_a_angular_2_0) + (r_158_actInv3_2_0_1 * parent_a_angular_2_1)) + (r_158_actInv3_2_0_2 * parent_a_angular_2_2));
  double r_161_actInv5_2_1 = (((r_158_actInv3_2_1_0 * parent_a_angular_2_0) + (r_158_actInv3_2_1_1 * parent_a_angular_2_1)) + (r_158_actInv3_2_1_2 * parent_a_angular_2_2));
  double r_161_actInv5_2_2 = (((r_158_actInv3_2_2_0 * parent_a_angular_2_0) + (r_158_actInv3_2_2_1 * parent_a_angular_2_1)) + (r_158_actInv3_2_2_2 * parent_a_angular_2_2));
  double r_162_act_inv_angular_2_0 = (temp_a_angular_2_0 + r_161_actInv5_2_0);
  double r_162_act_inv_angular_2_1 = (temp_a_angular_2_1 + r_161_actInv5_2_1);
  double r_162_act_inv_angular_2_2 = (temp_a_angular_2_2 + r_161_actInv5_2_2);
  double a_final_2_0 = r_160_act_inv_linear_2_0;
  double a_final_2_1 = r_160_act_inv_linear_2_1;
  double a_final_2_2 = r_160_act_inv_linear_2_2;
  double a_final_2_3 = r_162_act_inv_angular_2_0;
  double a_final_2_4 = r_162_act_inv_angular_2_1;
  double a_final_2_5 = r_162_act_inv_angular_2_2;
  double r_163_new_translation_temp_0 = (((oMi_rotation_2_0_0 * lever_2_0) + (oMi_rotation_2_0_1 * lever_2_1)) + (oMi_rotation_2_0_2 * lever_2_2));
  double r_163_new_translation_temp_1 = (((oMi_rotation_2_1_0 * lever_2_0) + (oMi_rotation_2_1_1 * lever_2_1)) + (oMi_rotation_2_1_2 * lever_2_2));
  double r_163_new_translation_temp_2 = (((oMi_rotation_2_2_0 * lever_2_0) + (oMi_rotation_2_2_1 * lever_2_1)) + (oMi_rotation_2_2_2 * lever_2_2));
  double r_164_new_translation_0 = (oMi_translation_2_0 + r_163_new_translation_temp_0);
  double r_164_new_translation_1 = (oMi_translation_2_1 + r_163_new_translation_temp_1);
  double r_164_new_translation_2 = (oMi_translation_2_2 + r_163_new_translation_temp_2);
  double r_165_decompose_it_i_0_0 = (inertia_2_0_0 - inertia_2_2_2);
  double r_165_decompose_it_i_0_1 = inertia_2_0_1;
  double r_165_decompose_it_i_1_0 = inertia_2_0_1;
  double r_165_decompose_it_i_1_1 = (inertia_2_1_1 - inertia_2_2_2);
  double r_165_decompose_it_i_2_0 = (inertia_2_0_2 * 2);
  double r_165_decompose_it_i_2_1 = (inertia_2_1_2 + inertia_2_1_2);
  double r_166_rotate_bottom_r_0_0 = oMi_rotation_2_1_0;
  double r_166_rotate_bottom_r_0_1 = oMi_rotation_2_1_1;
  double r_166_rotate_bottom_r_0_2 = oMi_rotation_2_1_2;
  double r_166_rotate_bottom_r_1_0 = oMi_rotation_2_2_0;
  double r_166_rotate_bottom_r_1_1 = oMi_rotation_2_2_1;
  double r_166_rotate_bottom_r_1_2 = oMi_rotation_2_2_2;
  double r_167_rotate_y_0_0 = (((r_166_rotate_bottom_r_0_0 * r_165_decompose_it_i_0_0) + (r_166_rotate_bottom_r_0_1 * r_165_decompose_it_i_1_0)) + (r_166_rotate_bottom_r_0_2 * r_165_decompose_it_i_2_0));
  double r_167_rotate_y_0_1 = (((r_166_rotate_bottom_r_0_0 * r_165_decompose_it_i_0_1) + (r_166_rotate_bottom_r_0_1 * r_165_decompose_it_i_1_1)) + (r_166_rotate_bottom_r_0_2 * r_165_decompose_it_i_2_1));
  double r_167_rotate_y_1_0 = (((r_166_rotate_bottom_r_1_0 * r_165_decompose_it_i_0_0) + (r_166_rotate_bottom_r_1_1 * r_165_decompose_it_i_1_0)) + (r_166_rotate_bottom_r_1_2 * r_165_decompose_it_i_2_0));
  double r_167_rotate_y_1_1 = (((r_166_rotate_bottom_r_1_0 * r_165_decompose_it_i_0_1) + (r_166_rotate_bottom_r_1_1 * r_165_decompose_it_i_1_1)) + (r_166_rotate_bottom_r_1_2 * r_165_decompose_it_i_2_1));
  double r_168_sres_first_1 = ((oMi_rotation_2_0_0 * r_167_rotate_y_0_0) + (oMi_rotation_2_0_1 * r_167_rotate_y_0_1));
  double r_169_sres_first_2 = ((oMi_rotation_2_1_0 * r_167_rotate_y_0_0) + (oMi_rotation_2_1_1 * r_167_rotate_y_0_1));
  double r_170_sres_first_3 = ((oMi_rotation_2_0_0 * r_167_rotate_y_1_0) + (oMi_rotation_2_0_1 * r_167_rotate_y_1_1));
  double r_171_sres_first_4 = ((oMi_rotation_2_1_0 * r_167_rotate_y_1_0) + (oMi_rotation_2_1_1 * r_167_rotate_y_1_1));
  double r_172_sres_first_5 = ((oMi_rotation_2_2_0 * r_167_rotate_y_1_0) + (oMi_rotation_2_2_1 * r_167_rotate_y_1_1));
  double r_173_const_r_0 = ((-(inertia_2_1_2) * oMi_rotation_2_0_0) + (inertia_2_0_2 * oMi_rotation_2_0_1));
  double r_173_const_r_1 = ((-(inertia_2_1_2) * oMi_rotation_2_1_0) + (inertia_2_0_2 * oMi_rotation_2_1_1));
  double r_173_const_r_2 = ((-(inertia_2_1_2) * oMi_rotation_2_2_0) + (inertia_2_0_2 * oMi_rotation_2_2_1));
  double r_174_sres_update_0_tmp1 = (r_165_decompose_it_i_0_0 + r_165_decompose_it_i_1_1);
  double r_175_sres_update_0_tmp2 = (r_169_sres_first_2 + r_172_sres_first_5);
  double r_176_sres_update_0 = (r_174_sres_update_0_tmp1 - r_175_sres_update_0_tmp2);
  double r_177_symmetric3_rotate_0_0 = (r_176_sres_update_0 + inertia_2_2_2);
  double r_177_symmetric3_rotate_0_1 = (r_168_sres_first_1 + r_173_const_r_2);
  double r_177_symmetric3_rotate_0_2 = (r_170_sres_first_3 - r_173_const_r_1);
  double r_177_symmetric3_rotate_1_0 = (r_168_sres_first_1 + r_173_const_r_2);
  double r_177_symmetric3_rotate_1_1 = (r_169_sres_first_2 + inertia_2_2_2);
  double r_177_symmetric3_rotate_1_2 = (r_171_sres_first_4 + r_173_const_r_0);
  double r_177_symmetric3_rotate_2_0 = (r_170_sres_first_3 - r_173_const_r_1);
  double r_177_symmetric3_rotate_2_1 = (r_171_sres_first_4 + r_173_const_r_0);
  double r_177_symmetric3_rotate_2_2 = (r_172_sres_first_5 + inertia_2_2_2);
  double data_oinertias_trans_2_0 = r_164_new_translation_0;
  double data_oinertias_trans_2_1 = r_164_new_translation_1;
  double data_oinertias_trans_2_2 = r_164_new_translation_2;
  double data_oinertias_rot_2_0_0 = r_177_symmetric3_rotate_0_0;
  double data_oinertias_rot_2_0_1 = r_177_symmetric3_rotate_0_1;
  double data_oinertias_rot_2_0_2 = r_177_symmetric3_rotate_0_2;
  double data_oinertias_rot_2_1_0 = r_177_symmetric3_rotate_1_0;
  double data_oinertias_rot_2_1_1 = r_177_symmetric3_rotate_1_1;
  double data_oinertias_rot_2_1_2 = r_177_symmetric3_rotate_1_2;
  double data_oinertias_rot_2_2_0 = r_177_symmetric3_rotate_2_0;
  double data_oinertias_rot_2_2_1 = r_177_symmetric3_rotate_2_1;
  double data_oinertias_rot_2_2_2 = r_177_symmetric3_rotate_2_2;
  double motion_act_linear_2_0 = (((oMi_rotation_2_0_0 * act_inv_linear_2_0) + (oMi_rotation_2_0_1 * act_inv_linear_2_1)) + (oMi_rotation_2_0_2 * act_inv_linear_2_2));
  double motion_act_linear_2_1 = (((oMi_rotation_2_1_0 * act_inv_linear_2_0) + (oMi_rotation_2_1_1 * act_inv_linear_2_1)) + (oMi_rotation_2_1_2 * act_inv_linear_2_2));
  double motion_act_linear_2_2 = (((oMi_rotation_2_2_0 * act_inv_linear_2_0) + (oMi_rotation_2_2_1 * act_inv_linear_2_1)) + (oMi_rotation_2_2_2 * act_inv_linear_2_2));
  double motion_act_angular_2_0 = (((oMi_rotation_2_0_0 * act_inv_angular_2_0) + (oMi_rotation_2_0_1 * act_inv_angular_2_1)) + (oMi_rotation_2_0_2 * act_inv_angular_2_2));
  double motion_act_angular_2_1 = (((oMi_rotation_2_1_0 * act_inv_angular_2_0) + (oMi_rotation_2_1_1 * act_inv_angular_2_1)) + (oMi_rotation_2_1_2 * act_inv_angular_2_2));
  double motion_act_angular_2_2 = (((oMi_rotation_2_2_0 * act_inv_angular_2_0) + (oMi_rotation_2_2_1 * act_inv_angular_2_1)) + (oMi_rotation_2_2_2 * act_inv_angular_2_2));
  double motion_act_cross_2_0 = ((oMi_translation_2_1 * motion_act_angular_2_2) - (oMi_translation_2_2 * motion_act_angular_2_1));
  double motion_act_cross_2_1 = ((oMi_translation_2_2 * motion_act_angular_2_0) - (oMi_translation_2_0 * motion_act_angular_2_2));
  double motion_act_cross_2_2 = ((oMi_translation_2_0 * motion_act_angular_2_1) - (oMi_translation_2_1 * motion_act_angular_2_0));
  double motion_act_linear2_2_0 = (motion_act_linear_2_0 + motion_act_cross_2_0);
  double motion_act_linear2_2_1 = (motion_act_linear_2_1 + motion_act_cross_2_1);
  double motion_act_linear2_2_2 = (motion_act_linear_2_2 + motion_act_cross_2_2);
  double act_motion_res_2_0 = motion_act_linear2_2_0;
  double act_motion_res_2_1 = motion_act_linear2_2_1;
  double act_motion_res_2_2 = motion_act_linear2_2_2;
  double act_motion_res_2_3 = motion_act_angular_2_0;
  double act_motion_res_2_4 = motion_act_angular_2_1;
  double act_motion_res_2_5 = motion_act_angular_2_2;
  double ov_2_0 = act_motion_res_2_0;
  double ov_2_1 = act_motion_res_2_1;
  double ov_2_2 = act_motion_res_2_2;
  double ov_2_3 = act_motion_res_2_3;
  double ov_2_4 = act_motion_res_2_4;
  double ov_2_5 = act_motion_res_2_5;
  double t_linear_2_0 = a_final_2_0;
  double t_linear_2_1 = a_final_2_1;
  double t_linear_2_2 = a_final_2_2;
  double t_angular_2_0 = a_final_2_3;
  double t_angular_2_1 = a_final_2_4;
  double t_angular_2_2 = a_final_2_5;
  double r_178_motion_act_linear_2_0 = (((oMi_rotation_2_0_0 * t_linear_2_0) + (oMi_rotation_2_0_1 * t_linear_2_1)) + (oMi_rotation_2_0_2 * t_linear_2_2));
  double r_178_motion_act_linear_2_1 = (((oMi_rotation_2_1_0 * t_linear_2_0) + (oMi_rotation_2_1_1 * t_linear_2_1)) + (oMi_rotation_2_1_2 * t_linear_2_2));
  double r_178_motion_act_linear_2_2 = (((oMi_rotation_2_2_0 * t_linear_2_0) + (oMi_rotation_2_2_1 * t_linear_2_1)) + (oMi_rotation_2_2_2 * t_linear_2_2));
  double r_179_motion_act_angular_2_0 = (((oMi_rotation_2_0_0 * t_angular_2_0) + (oMi_rotation_2_0_1 * t_angular_2_1)) + (oMi_rotation_2_0_2 * t_angular_2_2));
  double r_179_motion_act_angular_2_1 = (((oMi_rotation_2_1_0 * t_angular_2_0) + (oMi_rotation_2_1_1 * t_angular_2_1)) + (oMi_rotation_2_1_2 * t_angular_2_2));
  double r_179_motion_act_angular_2_2 = (((oMi_rotation_2_2_0 * t_angular_2_0) + (oMi_rotation_2_2_1 * t_angular_2_1)) + (oMi_rotation_2_2_2 * t_angular_2_2));
  double r_180_motion_act_cross_2_0 = ((oMi_translation_2_1 * r_179_motion_act_angular_2_2) - (oMi_translation_2_2 * r_179_motion_act_angular_2_1));
  double r_180_motion_act_cross_2_1 = ((oMi_translation_2_2 * r_179_motion_act_angular_2_0) - (oMi_translation_2_0 * r_179_motion_act_angular_2_2));
  double r_180_motion_act_cross_2_2 = ((oMi_translation_2_0 * r_179_motion_act_angular_2_1) - (oMi_translation_2_1 * r_179_motion_act_angular_2_0));
  double r_181_motion_act_linear2_2_0 = (r_178_motion_act_linear_2_0 + r_180_motion_act_cross_2_0);
  double r_181_motion_act_linear2_2_1 = (r_178_motion_act_linear_2_1 + r_180_motion_act_cross_2_1);
  double r_181_motion_act_linear2_2_2 = (r_178_motion_act_linear_2_2 + r_180_motion_act_cross_2_2);
  double r_182_act_motion_res_2_0 = r_181_motion_act_linear2_2_0;
  double r_182_act_motion_res_2_1 = r_181_motion_act_linear2_2_1;
  double r_182_act_motion_res_2_2 = r_181_motion_act_linear2_2_2;
  double r_182_act_motion_res_2_3 = r_179_motion_act_angular_2_0;
  double r_182_act_motion_res_2_4 = r_179_motion_act_angular_2_1;
  double r_182_act_motion_res_2_5 = r_179_motion_act_angular_2_2;
  double oa_2_0 = r_182_act_motion_res_2_0;
  double oa_2_1 = r_182_act_motion_res_2_1;
  double oa_2_2 = r_182_act_motion_res_2_2;
  double oa_2_3 = r_182_act_motion_res_2_3;
  double oa_2_4 = r_182_act_motion_res_2_4;
  double oa_2_5 = r_182_act_motion_res_2_5;
  double r_183_model_gravity_0 = 0;
  double r_183_model_gravity_1 = 0;
  double r_183_model_gravity_2 = -9.81;
  double r_183_model_gravity_3 = 0;
  double r_183_model_gravity_4 = 0;
  double r_183_model_gravity_5 = 0;
  double oa_gf_2_0 = (oa_2_0 - r_183_model_gravity_0);
  double oa_gf_2_1 = (oa_2_1 - r_183_model_gravity_1);
  double oa_gf_2_2 = (oa_2_2 - r_183_model_gravity_2);
  double oa_gf_2_3 = (oa_2_3 - r_183_model_gravity_3);
  double oa_gf_2_4 = (oa_2_4 - r_183_model_gravity_4);
  double oa_gf_2_5 = (oa_2_5 - r_183_model_gravity_5);
  double ov_linear_2_0 = ov_2_0;
  double ov_linear_2_1 = ov_2_1;
  double ov_linear_2_2 = ov_2_2;
  double ov_angular_2_0 = ov_2_3;
  double ov_angular_2_1 = ov_2_4;
  double ov_angular_2_2 = ov_2_5;
  double data_oh_linear_temp1_2_0 = ((r_164_new_translation_1 * ov_angular_2_2) - (r_164_new_translation_2 * ov_angular_2_1));
  double data_oh_linear_temp1_2_1 = ((r_164_new_translation_2 * ov_angular_2_0) - (r_164_new_translation_0 * ov_angular_2_2));
  double data_oh_linear_temp1_2_2 = ((r_164_new_translation_0 * ov_angular_2_1) - (r_164_new_translation_1 * ov_angular_2_0));
  double data_oh_linear_temp2_2_0 = (ov_linear_2_0 - data_oh_linear_temp1_2_0);
  double data_oh_linear_temp2_2_1 = (ov_linear_2_1 - data_oh_linear_temp1_2_1);
  double data_oh_linear_temp2_2_2 = (ov_linear_2_2 - data_oh_linear_temp1_2_2);
  double data_oh_linear_2_0 = (masses_2 * data_oh_linear_temp2_2_0);
  double data_oh_linear_2_1 = (masses_2 * data_oh_linear_temp2_2_1);
  double data_oh_linear_2_2 = (masses_2 * data_oh_linear_temp2_2_2);
  double r_184_ = (r_177_symmetric3_rotate_0_0 * ov_angular_2_0);
  double r_185_ = (r_177_symmetric3_rotate_0_1 * ov_angular_2_1);
  double r_186_ = (r_177_symmetric3_rotate_0_2 * ov_angular_2_2);
  double r_187_ = (r_177_symmetric3_rotate_0_1 * ov_angular_2_0);
  double r_188_ = (r_177_symmetric3_rotate_1_1 * ov_angular_2_1);
  double r_189_ = (r_177_symmetric3_rotate_1_2 * ov_angular_2_2);
  double r_190_ = (r_177_symmetric3_rotate_0_2 * ov_angular_2_0);
  double r_191_ = (r_177_symmetric3_rotate_1_2 * ov_angular_2_1);
  double r_192_ = (r_177_symmetric3_rotate_2_2 * ov_angular_2_2);
  double rhsMult1_temp_2 = (r_184_ + r_185_);
  double rhsMult1_2 = (rhsMult1_temp_2 + r_186_);
  double rhsMult2_temp_2 = (r_187_ + r_188_);
  double rhsMult2_2 = (rhsMult2_temp_2 + r_189_);
  double rhsMult3_temp_2 = (r_190_ + r_191_);
  double rhsMult3_2 = (rhsMult3_temp_2 + r_192_);
  double rhsMult_2_0 = rhsMult1_2;
  double rhsMult_2_1 = rhsMult2_2;
  double rhsMult_2_2 = rhsMult3_2;
  double data_oh_angular_temp2_2_0 = ((r_164_new_translation_1 * data_oh_linear_2_2) - (r_164_new_translation_2 * data_oh_linear_2_1));
  double data_oh_angular_temp2_2_1 = ((r_164_new_translation_2 * data_oh_linear_2_0) - (r_164_new_translation_0 * data_oh_linear_2_2));
  double data_oh_angular_temp2_2_2 = ((r_164_new_translation_0 * data_oh_linear_2_1) - (r_164_new_translation_1 * data_oh_linear_2_0));
  double data_oh_angular_2_0 = (rhsMult_2_0 + data_oh_angular_temp2_2_0);
  double data_oh_angular_2_1 = (rhsMult_2_1 + data_oh_angular_temp2_2_1);
  double data_oh_angular_2_2 = (rhsMult_2_2 + data_oh_angular_temp2_2_2);
  double all_oh_2_0 = data_oh_linear_2_0;
  double all_oh_2_1 = data_oh_linear_2_1;
  double all_oh_2_2 = data_oh_linear_2_2;
  double all_oh_2_3 = data_oh_angular_2_0;
  double all_oh_2_4 = data_oh_angular_2_1;
  double all_oh_2_5 = data_oh_angular_2_2;
  double oa_gf_linear_2_0 = oa_gf_2_0;
  double oa_gf_linear_2_1 = oa_gf_2_1;
  double oa_gf_linear_2_2 = oa_gf_2_2;
  double oa_gf_angular_2_0 = oa_gf_2_3;
  double oa_gf_angular_2_1 = oa_gf_2_4;
  double oa_gf_angular_2_2 = oa_gf_2_5;
  double data_of_linear_temp1_2_0 = ((r_164_new_translation_1 * oa_gf_angular_2_2) - (r_164_new_translation_2 * oa_gf_angular_2_1));
  double data_of_linear_temp1_2_1 = ((r_164_new_translation_2 * oa_gf_angular_2_0) - (r_164_new_translation_0 * oa_gf_angular_2_2));
  double data_of_linear_temp1_2_2 = ((r_164_new_translation_0 * oa_gf_angular_2_1) - (r_164_new_translation_1 * oa_gf_angular_2_0));
  double data_of_linear_temp2_2_0 = (oa_gf_linear_2_0 - data_of_linear_temp1_2_0);
  double data_of_linear_temp2_2_1 = (oa_gf_linear_2_1 - data_of_linear_temp1_2_1);
  double data_of_linear_temp2_2_2 = (oa_gf_linear_2_2 - data_of_linear_temp1_2_2);
  double data_of_linear_temp3_2_0 = (masses_2 * data_of_linear_temp2_2_0);
  double data_of_linear_temp3_2_1 = (masses_2 * data_of_linear_temp2_2_1);
  double data_of_linear_temp3_2_2 = (masses_2 * data_of_linear_temp2_2_2);
  double r_193_ = (r_177_symmetric3_rotate_0_0 * oa_gf_angular_2_0);
  double r_194_ = (r_177_symmetric3_rotate_0_1 * oa_gf_angular_2_1);
  double r_195_ = (r_177_symmetric3_rotate_0_2 * oa_gf_angular_2_2);
  double r_196_ = (r_177_symmetric3_rotate_0_1 * oa_gf_angular_2_0);
  double r_197_ = (r_177_symmetric3_rotate_1_1 * oa_gf_angular_2_1);
  double r_198_ = (r_177_symmetric3_rotate_1_2 * oa_gf_angular_2_2);
  double r_199_ = (r_177_symmetric3_rotate_0_2 * oa_gf_angular_2_0);
  double r_200_ = (r_177_symmetric3_rotate_1_2 * oa_gf_angular_2_1);
  double r_201_ = (r_177_symmetric3_rotate_2_2 * oa_gf_angular_2_2);
  double r_202_rhsMult1_temp_2 = (r_193_ + r_194_);
  double r_203_rhsMult1_2 = (r_202_rhsMult1_temp_2 + r_195_);
  double r_204_rhsMult2_temp_2 = (r_196_ + r_197_);
  double r_205_rhsMult2_2 = (r_204_rhsMult2_temp_2 + r_198_);
  double r_206_rhsMult3_temp_2 = (r_199_ + r_200_);
  double r_207_rhsMult3_2 = (r_206_rhsMult3_temp_2 + r_201_);
  double r_208_rhsMult_2_0 = r_203_rhsMult1_2;
  double r_208_rhsMult_2_1 = r_205_rhsMult2_2;
  double r_208_rhsMult_2_2 = r_207_rhsMult3_2;
  double data_of_angular_temp2_2_0 = ((r_164_new_translation_1 * data_of_linear_temp3_2_2) - (r_164_new_translation_2 * data_of_linear_temp3_2_1));
  double data_of_angular_temp2_2_1 = ((r_164_new_translation_2 * data_of_linear_temp3_2_0) - (r_164_new_translation_0 * data_of_linear_temp3_2_2));
  double data_of_angular_temp2_2_2 = ((r_164_new_translation_0 * data_of_linear_temp3_2_1) - (r_164_new_translation_1 * data_of_linear_temp3_2_0));
  double data_of_angular_temp3_2_0 = (r_208_rhsMult_2_0 + data_of_angular_temp2_2_0);
  double data_of_angular_temp3_2_1 = (r_208_rhsMult_2_1 + data_of_angular_temp2_2_1);
  double data_of_angular_temp3_2_2 = (r_208_rhsMult_2_2 + data_of_angular_temp2_2_2);
  double data_of_linear_temp4_2_0 = ((ov_angular_2_1 * data_oh_linear_2_2) - (ov_angular_2_2 * data_oh_linear_2_1));
  double data_of_linear_temp4_2_1 = ((ov_angular_2_2 * data_oh_linear_2_0) - (ov_angular_2_0 * data_oh_linear_2_2));
  double data_of_linear_temp4_2_2 = ((ov_angular_2_0 * data_oh_linear_2_1) - (ov_angular_2_1 * data_oh_linear_2_0));
  double data_of_angular_temp4_2_0 = ((ov_angular_2_1 * data_oh_angular_2_2) - (ov_angular_2_2 * data_oh_angular_2_1));
  double data_of_angular_temp4_2_1 = ((ov_angular_2_2 * data_oh_angular_2_0) - (ov_angular_2_0 * data_oh_angular_2_2));
  double data_of_angular_temp4_2_2 = ((ov_angular_2_0 * data_oh_angular_2_1) - (ov_angular_2_1 * data_oh_angular_2_0));
  double data_of_angular_temp5_2_0 = ((ov_linear_2_1 * data_oh_linear_2_2) - (ov_linear_2_2 * data_oh_linear_2_1));
  double data_of_angular_temp5_2_1 = ((ov_linear_2_2 * data_oh_linear_2_0) - (ov_linear_2_0 * data_oh_linear_2_2));
  double data_of_angular_temp5_2_2 = ((ov_linear_2_0 * data_oh_linear_2_1) - (ov_linear_2_1 * data_oh_linear_2_0));
  double data_of_angular_temp6_2_0 = (data_of_angular_temp4_2_0 + data_of_angular_temp5_2_0);
  double data_of_angular_temp6_2_1 = (data_of_angular_temp4_2_1 + data_of_angular_temp5_2_1);
  double data_of_angular_temp6_2_2 = (data_of_angular_temp4_2_2 + data_of_angular_temp5_2_2);
  double data_of_linear_2_0 = (data_of_linear_temp3_2_0 + data_of_linear_temp4_2_0);
  double data_of_linear_2_1 = (data_of_linear_temp3_2_1 + data_of_linear_temp4_2_1);
  double data_of_linear_2_2 = (data_of_linear_temp3_2_2 + data_of_linear_temp4_2_2);
  double data_of_angular_2_0 = (data_of_angular_temp3_2_0 + data_of_angular_temp6_2_0);
  double data_of_angular_2_1 = (data_of_angular_temp3_2_1 + data_of_angular_temp6_2_1);
  double data_of_angular_2_2 = (data_of_angular_temp3_2_2 + data_of_angular_temp6_2_2);
  double all_of_2_0 = data_of_linear_2_0;
  double all_of_2_1 = data_of_linear_2_1;
  double all_of_2_2 = data_of_linear_2_2;
  double all_of_2_3 = data_of_angular_2_0;
  double all_of_2_4 = data_of_angular_2_1;
  double all_of_2_5 = data_of_angular_2_2;
  double act_constraint_rotation_col_2_0 = oMi_rotation_2_0_2;
  double act_constraint_rotation_col_2_1 = oMi_rotation_2_1_2;
  double act_constraint_rotation_col_2_2 = oMi_rotation_2_2_2;
  double act_constraint_linear_2_0 = ((oMi_translation_2_1 * act_constraint_rotation_col_2_2) - (oMi_translation_2_2 * act_constraint_rotation_col_2_1));
  double act_constraint_linear_2_1 = ((oMi_translation_2_2 * act_constraint_rotation_col_2_0) - (oMi_translation_2_0 * act_constraint_rotation_col_2_2));
  double act_constraint_linear_2_2 = ((oMi_translation_2_0 * act_constraint_rotation_col_2_1) - (oMi_translation_2_1 * act_constraint_rotation_col_2_0));
  double j_cols_2_0 = act_constraint_linear_2_0;
  double j_cols_2_1 = act_constraint_linear_2_1;
  double j_cols_2_2 = act_constraint_linear_2_2;
  double j_cols_2_3 = act_constraint_rotation_col_2_0;
  double j_cols_2_4 = act_constraint_rotation_col_2_1;
  double j_cols_2_5 = act_constraint_rotation_col_2_2;
  double mout_linear_cross_angular_2_0 = ((ov_linear_2_1 * act_constraint_rotation_col_2_2) - (ov_linear_2_2 * act_constraint_rotation_col_2_1));
  double mout_linear_cross_angular_2_1 = ((ov_linear_2_2 * act_constraint_rotation_col_2_0) - (ov_linear_2_0 * act_constraint_rotation_col_2_2));
  double mout_linear_cross_angular_2_2 = ((ov_linear_2_0 * act_constraint_rotation_col_2_1) - (ov_linear_2_1 * act_constraint_rotation_col_2_0));
  double mout_angular_cross_linear_2_0 = ((ov_angular_2_1 * act_constraint_linear_2_2) - (ov_angular_2_2 * act_constraint_linear_2_1));
  double mout_angular_cross_linear_2_1 = ((ov_angular_2_2 * act_constraint_linear_2_0) - (ov_angular_2_0 * act_constraint_linear_2_2));
  double mout_angular_cross_linear_2_2 = ((ov_angular_2_0 * act_constraint_linear_2_1) - (ov_angular_2_1 * act_constraint_linear_2_0));
  double mout_linear_2_0 = (mout_linear_cross_angular_2_0 + mout_angular_cross_linear_2_0);
  double mout_linear_2_1 = (mout_linear_cross_angular_2_1 + mout_angular_cross_linear_2_1);
  double mout_linear_2_2 = (mout_linear_cross_angular_2_2 + mout_angular_cross_linear_2_2);
  double mout_angular_2_0 = ((ov_angular_2_1 * act_constraint_rotation_col_2_2) - (ov_angular_2_2 * act_constraint_rotation_col_2_1));
  double mout_angular_2_1 = ((ov_angular_2_2 * act_constraint_rotation_col_2_0) - (ov_angular_2_0 * act_constraint_rotation_col_2_2));
  double mout_angular_2_2 = ((ov_angular_2_0 * act_constraint_rotation_col_2_1) - (ov_angular_2_1 * act_constraint_rotation_col_2_0));
  double dj_cols_2_0 = mout_linear_2_0;
  double dj_cols_2_1 = mout_linear_2_1;
  double dj_cols_2_2 = mout_linear_2_2;
  double dj_cols_2_3 = mout_angular_2_0;
  double dj_cols_2_4 = mout_angular_2_1;
  double dj_cols_2_5 = mout_angular_2_2;
  double oa_gf_parent_linear_2_0 = oa_gf_1_0;
  double oa_gf_parent_linear_2_1 = oa_gf_1_1;
  double oa_gf_parent_linear_2_2 = oa_gf_1_2;
  double oa_gf_parent_angular_2_0 = oa_gf_1_3;
  double oa_gf_parent_angular_2_1 = oa_gf_1_4;
  double oa_gf_parent_angular_2_2 = oa_gf_1_5;
  double r_209_mout_linear_cross_angular_2_0 = ((oa_gf_parent_linear_2_1 * act_constraint_rotation_col_2_2) - (oa_gf_parent_linear_2_2 * act_constraint_rotation_col_2_1));
  double r_209_mout_linear_cross_angular_2_1 = ((oa_gf_parent_linear_2_2 * act_constraint_rotation_col_2_0) - (oa_gf_parent_linear_2_0 * act_constraint_rotation_col_2_2));
  double r_209_mout_linear_cross_angular_2_2 = ((oa_gf_parent_linear_2_0 * act_constraint_rotation_col_2_1) - (oa_gf_parent_linear_2_1 * act_constraint_rotation_col_2_0));
  double r_210_mout_angular_cross_linear_2_0 = ((oa_gf_parent_angular_2_1 * act_constraint_linear_2_2) - (oa_gf_parent_angular_2_2 * act_constraint_linear_2_1));
  double r_210_mout_angular_cross_linear_2_1 = ((oa_gf_parent_angular_2_2 * act_constraint_linear_2_0) - (oa_gf_parent_angular_2_0 * act_constraint_linear_2_2));
  double r_210_mout_angular_cross_linear_2_2 = ((oa_gf_parent_angular_2_0 * act_constraint_linear_2_1) - (oa_gf_parent_angular_2_1 * act_constraint_linear_2_0));
  double r_211_mout_linear_2_0 = (r_209_mout_linear_cross_angular_2_0 + r_210_mout_angular_cross_linear_2_0);
  double r_211_mout_linear_2_1 = (r_209_mout_linear_cross_angular_2_1 + r_210_mout_angular_cross_linear_2_1);
  double r_211_mout_linear_2_2 = (r_209_mout_linear_cross_angular_2_2 + r_210_mout_angular_cross_linear_2_2);
  double r_212_mout_angular_2_0 = ((oa_gf_parent_angular_2_1 * act_constraint_rotation_col_2_2) - (oa_gf_parent_angular_2_2 * act_constraint_rotation_col_2_1));
  double r_212_mout_angular_2_1 = ((oa_gf_parent_angular_2_2 * act_constraint_rotation_col_2_0) - (oa_gf_parent_angular_2_0 * act_constraint_rotation_col_2_2));
  double r_212_mout_angular_2_2 = ((oa_gf_parent_angular_2_0 * act_constraint_rotation_col_2_1) - (oa_gf_parent_angular_2_1 * act_constraint_rotation_col_2_0));
  double dAdv_cols_linear_2_0 = mout_linear_2_0;
  double dAdv_cols_linear_2_1 = mout_linear_2_1;
  double dAdv_cols_linear_2_2 = mout_linear_2_2;
  double dAdv_cols_angular_2_0 = mout_angular_2_0;
  double dAdv_cols_angular_2_1 = mout_angular_2_1;
  double dAdv_cols_angular_2_2 = mout_angular_2_2;
  double data_ov_parent_linear_2_0 = ov_1_0;
  double data_ov_parent_linear_2_1 = ov_1_1;
  double data_ov_parent_linear_2_2 = ov_1_2;
  double data_ov_parent_angular_2_0 = ov_1_3;
  double data_ov_parent_angular_2_1 = ov_1_4;
  double data_ov_parent_angular_2_2 = ov_1_5;
  double r_213_mout_linear_cross_angular_2_0 = ((data_ov_parent_linear_2_1 * act_constraint_rotation_col_2_2) - (data_ov_parent_linear_2_2 * act_constraint_rotation_col_2_1));
  double r_213_mout_linear_cross_angular_2_1 = ((data_ov_parent_linear_2_2 * act_constraint_rotation_col_2_0) - (data_ov_parent_linear_2_0 * act_constraint_rotation_col_2_2));
  double r_213_mout_linear_cross_angular_2_2 = ((data_ov_parent_linear_2_0 * act_constraint_rotation_col_2_1) - (data_ov_parent_linear_2_1 * act_constraint_rotation_col_2_0));
  double r_214_mout_angular_cross_linear_2_0 = ((data_ov_parent_angular_2_1 * act_constraint_linear_2_2) - (data_ov_parent_angular_2_2 * act_constraint_linear_2_1));
  double r_214_mout_angular_cross_linear_2_1 = ((data_ov_parent_angular_2_2 * act_constraint_linear_2_0) - (data_ov_parent_angular_2_0 * act_constraint_linear_2_2));
  double r_214_mout_angular_cross_linear_2_2 = ((data_ov_parent_angular_2_0 * act_constraint_linear_2_1) - (data_ov_parent_angular_2_1 * act_constraint_linear_2_0));
  double r_215_mout_linear_2_0 = (r_213_mout_linear_cross_angular_2_0 + r_214_mout_angular_cross_linear_2_0);
  double r_215_mout_linear_2_1 = (r_213_mout_linear_cross_angular_2_1 + r_214_mout_angular_cross_linear_2_1);
  double r_215_mout_linear_2_2 = (r_213_mout_linear_cross_angular_2_2 + r_214_mout_angular_cross_linear_2_2);
  double r_216_mout_angular_2_0 = ((data_ov_parent_angular_2_1 * act_constraint_rotation_col_2_2) - (data_ov_parent_angular_2_2 * act_constraint_rotation_col_2_1));
  double r_216_mout_angular_2_1 = ((data_ov_parent_angular_2_2 * act_constraint_rotation_col_2_0) - (data_ov_parent_angular_2_0 * act_constraint_rotation_col_2_2));
  double r_216_mout_angular_2_2 = ((data_ov_parent_angular_2_0 * act_constraint_rotation_col_2_1) - (data_ov_parent_angular_2_1 * act_constraint_rotation_col_2_0));
  double r_217_data_ov_parent_linear_2_0 = ov_1_0;
  double r_217_data_ov_parent_linear_2_1 = ov_1_1;
  double r_217_data_ov_parent_linear_2_2 = ov_1_2;
  double r_218_data_ov_parent_angular_2_0 = ov_1_3;
  double r_218_data_ov_parent_angular_2_1 = ov_1_4;
  double r_218_data_ov_parent_angular_2_2 = ov_1_5;
  double r_219_mout_linear_cross_angular_2_0 = ((r_217_data_ov_parent_linear_2_1 * r_216_mout_angular_2_2) - (r_217_data_ov_parent_linear_2_2 * r_216_mout_angular_2_1));
  double r_219_mout_linear_cross_angular_2_1 = ((r_217_data_ov_parent_linear_2_2 * r_216_mout_angular_2_0) - (r_217_data_ov_parent_linear_2_0 * r_216_mout_angular_2_2));
  double r_219_mout_linear_cross_angular_2_2 = ((r_217_data_ov_parent_linear_2_0 * r_216_mout_angular_2_1) - (r_217_data_ov_parent_linear_2_1 * r_216_mout_angular_2_0));
  double r_220_mout_angular_cross_linear_2_0 = ((r_218_data_ov_parent_angular_2_1 * r_215_mout_linear_2_2) - (r_218_data_ov_parent_angular_2_2 * r_215_mout_linear_2_1));
  double r_220_mout_angular_cross_linear_2_1 = ((r_218_data_ov_parent_angular_2_2 * r_215_mout_linear_2_0) - (r_218_data_ov_parent_angular_2_0 * r_215_mout_linear_2_2));
  double r_220_mout_angular_cross_linear_2_2 = ((r_218_data_ov_parent_angular_2_0 * r_215_mout_linear_2_1) - (r_218_data_ov_parent_angular_2_1 * r_215_mout_linear_2_0));
  double r_221_mout_linear_2_0 = (r_219_mout_linear_cross_angular_2_0 + r_220_mout_angular_cross_linear_2_0);
  double r_221_mout_linear_2_1 = (r_219_mout_linear_cross_angular_2_1 + r_220_mout_angular_cross_linear_2_1);
  double r_221_mout_linear_2_2 = (r_219_mout_linear_cross_angular_2_2 + r_220_mout_angular_cross_linear_2_2);
  double r_222_mout_angular_2_0 = ((r_218_data_ov_parent_angular_2_1 * r_216_mout_angular_2_2) - (r_218_data_ov_parent_angular_2_2 * r_216_mout_angular_2_1));
  double r_222_mout_angular_2_1 = ((r_218_data_ov_parent_angular_2_2 * r_216_mout_angular_2_0) - (r_218_data_ov_parent_angular_2_0 * r_216_mout_angular_2_2));
  double r_222_mout_angular_2_2 = ((r_218_data_ov_parent_angular_2_0 * r_216_mout_angular_2_1) - (r_218_data_ov_parent_angular_2_1 * r_216_mout_angular_2_0));
  double dAdq_cols_linear_2_0 = (r_211_mout_linear_2_0 + r_221_mout_linear_2_0);
  double dAdq_cols_linear_2_1 = (r_211_mout_linear_2_1 + r_221_mout_linear_2_1);
  double dAdq_cols_linear_2_2 = (r_211_mout_linear_2_2 + r_221_mout_linear_2_2);
  double dAdq_cols_angular_2_0 = (r_212_mout_angular_2_0 + r_222_mout_angular_2_0);
  double dAdq_cols_angular_2_1 = (r_212_mout_angular_2_1 + r_222_mout_angular_2_1);
  double dAdq_cols_angular_2_2 = (r_212_mout_angular_2_2 + r_222_mout_angular_2_2);
  double dAdv_cols_linear_updated_2_0 = (dAdv_cols_linear_2_0 + r_215_mout_linear_2_0);
  double dAdv_cols_linear_updated_2_1 = (dAdv_cols_linear_2_1 + r_215_mout_linear_2_1);
  double dAdv_cols_linear_updated_2_2 = (dAdv_cols_linear_2_2 + r_215_mout_linear_2_2);
  double dAdv_cols_angular_updated_2_0 = (dAdv_cols_angular_2_0 + r_216_mout_angular_2_0);
  double dAdv_cols_angular_updated_2_1 = (dAdv_cols_angular_2_1 + r_216_mout_angular_2_1);
  double dAdv_cols_angular_updated_2_2 = (dAdv_cols_angular_2_2 + r_216_mout_angular_2_2);
  double dAdq_cols_2_0 = dAdq_cols_linear_2_0;
  double dAdq_cols_2_1 = dAdq_cols_linear_2_1;
  double dAdq_cols_2_2 = dAdq_cols_linear_2_2;
  double dAdq_cols_2_3 = dAdq_cols_angular_2_0;
  double dAdq_cols_2_4 = dAdq_cols_angular_2_1;
  double dAdq_cols_2_5 = dAdq_cols_angular_2_2;
  double dAdv_cols_2_0 = dAdv_cols_linear_updated_2_0;
  double dAdv_cols_2_1 = dAdv_cols_linear_updated_2_1;
  double dAdv_cols_2_2 = dAdv_cols_linear_updated_2_2;
  double dAdv_cols_2_3 = dAdv_cols_angular_updated_2_0;
  double dAdv_cols_2_4 = dAdv_cols_angular_updated_2_1;
  double dAdv_cols_2_5 = dAdv_cols_angular_updated_2_2;
  double dVdq_cols_2_0 = r_215_mout_linear_2_0;
  double dVdq_cols_2_1 = r_215_mout_linear_2_1;
  double dVdq_cols_2_2 = r_215_mout_linear_2_2;
  double dVdq_cols_2_3 = r_216_mout_angular_2_0;
  double dVdq_cols_2_4 = r_216_mout_angular_2_1;
  double dVdq_cols_2_5 = r_216_mout_angular_2_2;
  double r_223_mv_linear_0 = (masses_2 * ov_linear_2_0);
  double r_223_mv_linear_1 = (masses_2 * ov_linear_2_1);
  double r_223_mv_linear_2 = (masses_2 * ov_linear_2_2);
  double r_224_mv_angular_0 = (masses_2 * ov_angular_2_0);
  double r_224_mv_angular_1 = (masses_2 * ov_angular_2_1);
  double r_224_mv_angular_2 = (masses_2 * ov_angular_2_2);
  double r_225_skew_vec3d_0_0 = 0;
  double r_225_skew_vec3d_0_1 = -(r_223_mv_linear_2);
  double r_225_skew_vec3d_0_2 = r_223_mv_linear_1;
  double r_225_skew_vec3d_1_0 = r_223_mv_linear_2;
  double r_225_skew_vec3d_1_1 = 0;
  double r_225_skew_vec3d_1_2 = -(r_223_mv_linear_0);
  double r_225_skew_vec3d_2_0 = -(r_223_mv_linear_1);
  double r_225_skew_vec3d_2_1 = r_223_mv_linear_0;
  double r_225_skew_vec3d_2_2 = 0;
  double r_226_skew_square_c1_0_0 = (r_224_mv_angular_0 * r_164_new_translation_0);
  double r_226_skew_square_c1_0_1 = (r_224_mv_angular_1 * r_164_new_translation_0);
  double r_226_skew_square_c1_0_2 = (r_224_mv_angular_2 * r_164_new_translation_0);
  double r_226_skew_square_c1_1_0 = (r_224_mv_angular_0 * r_164_new_translation_1);
  double r_226_skew_square_c1_1_1 = (r_224_mv_angular_1 * r_164_new_translation_1);
  double r_226_skew_square_c1_1_2 = (r_224_mv_angular_2 * r_164_new_translation_1);
  double r_226_skew_square_c1_2_0 = (r_224_mv_angular_0 * r_164_new_translation_2);
  double r_226_skew_square_c1_2_1 = (r_224_mv_angular_1 * r_164_new_translation_2);
  double r_226_skew_square_c1_2_2 = (r_224_mv_angular_2 * r_164_new_translation_2);
  double r_227_skew_square_udotv = (((r_164_new_translation_0 * r_224_mv_angular_0) + (r_164_new_translation_1 * r_224_mv_angular_1)) + (r_164_new_translation_2 * r_224_mv_angular_2));
  double r_228_skew_square_c2_0_0 = (r_226_skew_square_c1_0_0 - r_227_skew_square_udotv);
  double r_228_skew_square_c2_0_1 = r_226_skew_square_c1_0_1;
  double r_228_skew_square_c2_0_2 = r_226_skew_square_c1_0_2;
  double r_228_skew_square_c2_1_0 = r_226_skew_square_c1_1_0;
  double r_228_skew_square_c2_1_1 = (r_226_skew_square_c1_1_1 - r_227_skew_square_udotv);
  double r_228_skew_square_c2_1_2 = r_226_skew_square_c1_1_2;
  double r_228_skew_square_c2_2_0 = r_226_skew_square_c1_2_0;
  double r_228_skew_square_c2_2_1 = r_226_skew_square_c1_2_1;
  double r_228_skew_square_c2_2_2 = (r_226_skew_square_c1_2_2 - r_227_skew_square_udotv);
  double r_229_skew_square_c1_0_0 = (r_164_new_translation_0 * r_224_mv_angular_0);
  double r_229_skew_square_c1_0_1 = (r_164_new_translation_1 * r_224_mv_angular_0);
  double r_229_skew_square_c1_0_2 = (r_164_new_translation_2 * r_224_mv_angular_0);
  double r_229_skew_square_c1_1_0 = (r_164_new_translation_0 * r_224_mv_angular_1);
  double r_229_skew_square_c1_1_1 = (r_164_new_translation_1 * r_224_mv_angular_1);
  double r_229_skew_square_c1_1_2 = (r_164_new_translation_2 * r_224_mv_angular_1);
  double r_229_skew_square_c1_2_0 = (r_164_new_translation_0 * r_224_mv_angular_2);
  double r_229_skew_square_c1_2_1 = (r_164_new_translation_1 * r_224_mv_angular_2);
  double r_229_skew_square_c1_2_2 = (r_164_new_translation_2 * r_224_mv_angular_2);
  double r_230_skew_square_udotv = (((r_224_mv_angular_0 * r_164_new_translation_0) + (r_224_mv_angular_1 * r_164_new_translation_1)) + (r_224_mv_angular_2 * r_164_new_translation_2));
  double r_231_skew_square_c2_0_0 = (r_229_skew_square_c1_0_0 - r_230_skew_square_udotv);
  double r_231_skew_square_c2_0_1 = r_229_skew_square_c1_0_1;
  double r_231_skew_square_c2_0_2 = r_229_skew_square_c1_0_2;
  double r_231_skew_square_c2_1_0 = r_229_skew_square_c1_1_0;
  double r_231_skew_square_c2_1_1 = (r_229_skew_square_c1_1_1 - r_230_skew_square_udotv);
  double r_231_skew_square_c2_1_2 = r_229_skew_square_c1_1_2;
  double r_231_skew_square_c2_2_0 = r_229_skew_square_c1_2_0;
  double r_231_skew_square_c2_2_1 = r_229_skew_square_c1_2_1;
  double r_231_skew_square_c2_2_2 = (r_229_skew_square_c1_2_2 - r_230_skew_square_udotv);
  double r_232_res_first_temp_0_0 = (r_231_skew_square_c2_0_0 - r_228_skew_square_c2_0_0);
  double r_232_res_first_temp_0_1 = (r_231_skew_square_c2_0_1 - r_228_skew_square_c2_0_1);
  double r_232_res_first_temp_0_2 = (r_231_skew_square_c2_0_2 - r_228_skew_square_c2_0_2);
  double r_232_res_first_temp_1_0 = (r_231_skew_square_c2_1_0 - r_228_skew_square_c2_1_0);
  double r_232_res_first_temp_1_1 = (r_231_skew_square_c2_1_1 - r_228_skew_square_c2_1_1);
  double r_232_res_first_temp_1_2 = (r_231_skew_square_c2_1_2 - r_228_skew_square_c2_1_2);
  double r_232_res_first_temp_2_0 = (r_231_skew_square_c2_2_0 - r_228_skew_square_c2_2_0);
  double r_232_res_first_temp_2_1 = (r_231_skew_square_c2_2_1 - r_228_skew_square_c2_2_1);
  double r_232_res_first_temp_2_2 = (r_231_skew_square_c2_2_2 - r_228_skew_square_c2_2_2);
  double r_233_res_first_0_0 = (r_232_res_first_temp_0_0 - r_225_skew_vec3d_0_0);
  double r_233_res_first_0_1 = (r_232_res_first_temp_0_1 - r_225_skew_vec3d_0_1);
  double r_233_res_first_0_2 = (r_232_res_first_temp_0_2 - r_225_skew_vec3d_0_2);
  double r_233_res_first_1_0 = (r_232_res_first_temp_1_0 - r_225_skew_vec3d_1_0);
  double r_233_res_first_1_1 = (r_232_res_first_temp_1_1 - r_225_skew_vec3d_1_1);
  double r_233_res_first_1_2 = (r_232_res_first_temp_1_2 - r_225_skew_vec3d_1_2);
  double r_233_res_first_2_0 = (r_232_res_first_temp_2_0 - r_225_skew_vec3d_2_0);
  double r_233_res_first_2_1 = (r_232_res_first_temp_2_1 - r_225_skew_vec3d_2_1);
  double r_233_res_first_2_2 = (r_232_res_first_temp_2_2 - r_225_skew_vec3d_2_2);
  double r_234_skew_square_c1_0_0 = (r_223_mv_linear_0 * r_164_new_translation_0);
  double r_234_skew_square_c1_0_1 = (r_223_mv_linear_1 * r_164_new_translation_0);
  double r_234_skew_square_c1_0_2 = (r_223_mv_linear_2 * r_164_new_translation_0);
  double r_234_skew_square_c1_1_0 = (r_223_mv_linear_0 * r_164_new_translation_1);
  double r_234_skew_square_c1_1_1 = (r_223_mv_linear_1 * r_164_new_translation_1);
  double r_234_skew_square_c1_1_2 = (r_223_mv_linear_2 * r_164_new_translation_1);
  double r_234_skew_square_c1_2_0 = (r_223_mv_linear_0 * r_164_new_translation_2);
  double r_234_skew_square_c1_2_1 = (r_223_mv_linear_1 * r_164_new_translation_2);
  double r_234_skew_square_c1_2_2 = (r_223_mv_linear_2 * r_164_new_translation_2);
  double r_235_skew_square_udotv = (((r_164_new_translation_0 * r_223_mv_linear_0) + (r_164_new_translation_1 * r_223_mv_linear_1)) + (r_164_new_translation_2 * r_223_mv_linear_2));
  double r_236_skew_square_c2_0_0 = (r_234_skew_square_c1_0_0 - r_235_skew_square_udotv);
  double r_236_skew_square_c2_0_1 = r_234_skew_square_c1_0_1;
  double r_236_skew_square_c2_0_2 = r_234_skew_square_c1_0_2;
  double r_236_skew_square_c2_1_0 = r_234_skew_square_c1_1_0;
  double r_236_skew_square_c2_1_1 = (r_234_skew_square_c1_1_1 - r_235_skew_square_udotv);
  double r_236_skew_square_c2_1_2 = r_234_skew_square_c1_1_2;
  double r_236_skew_square_c2_2_0 = r_234_skew_square_c1_2_0;
  double r_236_skew_square_c2_2_1 = r_234_skew_square_c1_2_1;
  double r_236_skew_square_c2_2_2 = (r_234_skew_square_c1_2_2 - r_235_skew_square_udotv);
  double r_237_skew_square_c1_0_0 = (r_164_new_translation_0 * r_223_mv_linear_0);
  double r_237_skew_square_c1_0_1 = (r_164_new_translation_1 * r_223_mv_linear_0);
  double r_237_skew_square_c1_0_2 = (r_164_new_translation_2 * r_223_mv_linear_0);
  double r_237_skew_square_c1_1_0 = (r_164_new_translation_0 * r_223_mv_linear_1);
  double r_237_skew_square_c1_1_1 = (r_164_new_translation_1 * r_223_mv_linear_1);
  double r_237_skew_square_c1_1_2 = (r_164_new_translation_2 * r_223_mv_linear_1);
  double r_237_skew_square_c1_2_0 = (r_164_new_translation_0 * r_223_mv_linear_2);
  double r_237_skew_square_c1_2_1 = (r_164_new_translation_1 * r_223_mv_linear_2);
  double r_237_skew_square_c1_2_2 = (r_164_new_translation_2 * r_223_mv_linear_2);
  double r_238_skew_square_udotv = (((r_223_mv_linear_0 * r_164_new_translation_0) + (r_223_mv_linear_1 * r_164_new_translation_1)) + (r_223_mv_linear_2 * r_164_new_translation_2));
  double r_239_skew_square_c2_0_0 = (r_237_skew_square_c1_0_0 - r_238_skew_square_udotv);
  double r_239_skew_square_c2_0_1 = r_237_skew_square_c1_0_1;
  double r_239_skew_square_c2_0_2 = r_237_skew_square_c1_0_2;
  double r_239_skew_square_c2_1_0 = r_237_skew_square_c1_1_0;
  double r_239_skew_square_c2_1_1 = (r_237_skew_square_c1_1_1 - r_238_skew_square_udotv);
  double r_239_skew_square_c2_1_2 = r_237_skew_square_c1_1_2;
  double r_239_skew_square_c2_2_0 = r_237_skew_square_c1_2_0;
  double r_239_skew_square_c2_2_1 = r_237_skew_square_c1_2_1;
  double r_239_skew_square_c2_2_2 = (r_237_skew_square_c1_2_2 - r_238_skew_square_udotv);
  double r_240_skew_second_second_neg_0_0 = -(r_236_skew_square_c2_0_0);
  double r_240_skew_second_second_neg_0_1 = -(r_236_skew_square_c2_0_1);
  double r_240_skew_second_second_neg_0_2 = -(r_236_skew_square_c2_0_2);
  double r_240_skew_second_second_neg_1_0 = -(r_236_skew_square_c2_1_0);
  double r_240_skew_second_second_neg_1_1 = -(r_236_skew_square_c2_1_1);
  double r_240_skew_second_second_neg_1_2 = -(r_236_skew_square_c2_1_2);
  double r_240_skew_second_second_neg_2_0 = -(r_236_skew_square_c2_2_0);
  double r_240_skew_second_second_neg_2_1 = -(r_236_skew_square_c2_2_1);
  double r_240_skew_second_second_neg_2_2 = -(r_236_skew_square_c2_2_2);
  double r_241_res_second_0_0 = (r_240_skew_second_second_neg_0_0 - r_239_skew_square_c2_0_0);
  double r_241_res_second_0_1 = (r_240_skew_second_second_neg_0_1 - r_239_skew_square_c2_0_1);
  double r_241_res_second_0_2 = (r_240_skew_second_second_neg_0_2 - r_239_skew_square_c2_0_2);
  double r_241_res_second_1_0 = (r_240_skew_second_second_neg_1_0 - r_239_skew_square_c2_1_0);
  double r_241_res_second_1_1 = (r_240_skew_second_second_neg_1_1 - r_239_skew_square_c2_1_1);
  double r_241_res_second_1_2 = (r_240_skew_second_second_neg_1_2 - r_239_skew_square_c2_1_2);
  double r_241_res_second_2_0 = (r_240_skew_second_second_neg_2_0 - r_239_skew_square_c2_2_0);
  double r_241_res_second_2_1 = (r_240_skew_second_second_neg_2_1 - r_239_skew_square_c2_2_1);
  double r_241_res_second_2_2 = (r_240_skew_second_second_neg_2_2 - r_239_skew_square_c2_2_2);
  double r_242_alpha_skew_square_0_0 = (((r_164_new_translation_1 * r_164_new_translation_1) + (r_164_new_translation_2 * r_164_new_translation_2)) * -(masses_2));
  double r_242_alpha_skew_square_0_1 = (r_164_new_translation_1 * (r_164_new_translation_0 * masses_2));
  double r_242_alpha_skew_square_0_2 = (r_164_new_translation_2 * (r_164_new_translation_0 * masses_2));
  double r_242_alpha_skew_square_1_0 = (r_164_new_translation_1 * (r_164_new_translation_0 * masses_2));
  double r_242_alpha_skew_square_1_1 = (((r_164_new_translation_0 * r_164_new_translation_0) + (r_164_new_translation_2 * r_164_new_translation_2)) * -(masses_2));
  double r_242_alpha_skew_square_1_2 = (r_164_new_translation_2 * (r_164_new_translation_1 * masses_2));
  double r_242_alpha_skew_square_2_0 = (r_164_new_translation_2 * (r_164_new_translation_0 * masses_2));
  double r_242_alpha_skew_square_2_1 = (r_164_new_translation_2 * (r_164_new_translation_1 * masses_2));
  double r_242_alpha_skew_square_2_2 = (((r_164_new_translation_0 * r_164_new_translation_0) + (r_164_new_translation_1 * r_164_new_translation_1)) * -(masses_2));
  double r_243_res_third_0_0 = (r_177_symmetric3_rotate_0_0 - r_242_alpha_skew_square_0_0);
  double r_243_res_third_0_1 = (r_177_symmetric3_rotate_0_1 - r_242_alpha_skew_square_0_1);
  double r_243_res_third_0_2 = (r_177_symmetric3_rotate_0_2 - r_242_alpha_skew_square_0_2);
  double r_243_res_third_1_0 = (r_177_symmetric3_rotate_1_0 - r_242_alpha_skew_square_1_0);
  double r_243_res_third_1_1 = (r_177_symmetric3_rotate_1_1 - r_242_alpha_skew_square_1_1);
  double r_243_res_third_1_2 = (r_177_symmetric3_rotate_1_2 - r_242_alpha_skew_square_1_2);
  double r_243_res_third_2_0 = (r_177_symmetric3_rotate_2_0 - r_242_alpha_skew_square_2_0);
  double r_243_res_third_2_1 = (r_177_symmetric3_rotate_2_1 - r_242_alpha_skew_square_2_1);
  double r_243_res_third_2_2 = (r_177_symmetric3_rotate_2_2 - r_242_alpha_skew_square_2_2);
  double r_244_skew_vec3d_0_0 = 0;
  double r_244_skew_vec3d_0_1 = -(ov_angular_2_2);
  double r_244_skew_vec3d_0_2 = ov_angular_2_1;
  double r_244_skew_vec3d_1_0 = ov_angular_2_2;
  double r_244_skew_vec3d_1_1 = 0;
  double r_244_skew_vec3d_1_2 = -(ov_angular_2_0);
  double r_244_skew_vec3d_2_0 = -(ov_angular_2_1);
  double r_244_skew_vec3d_2_1 = ov_angular_2_0;
  double r_244_skew_vec3d_2_2 = 0;
  double r_245_res_fourth_0_0 = (((r_243_res_third_0_0 * r_244_skew_vec3d_0_0) + (r_243_res_third_0_1 * r_244_skew_vec3d_1_0)) + (r_243_res_third_0_2 * r_244_skew_vec3d_2_0));
  double r_245_res_fourth_0_1 = (((r_243_res_third_0_0 * r_244_skew_vec3d_0_1) + (r_243_res_third_0_1 * r_244_skew_vec3d_1_1)) + (r_243_res_third_0_2 * r_244_skew_vec3d_2_1));
  double r_245_res_fourth_0_2 = (((r_243_res_third_0_0 * r_244_skew_vec3d_0_2) + (r_243_res_third_0_1 * r_244_skew_vec3d_1_2)) + (r_243_res_third_0_2 * r_244_skew_vec3d_2_2));
  double r_245_res_fourth_1_0 = (((r_243_res_third_1_0 * r_244_skew_vec3d_0_0) + (r_243_res_third_1_1 * r_244_skew_vec3d_1_0)) + (r_243_res_third_1_2 * r_244_skew_vec3d_2_0));
  double r_245_res_fourth_1_1 = (((r_243_res_third_1_0 * r_244_skew_vec3d_0_1) + (r_243_res_third_1_1 * r_244_skew_vec3d_1_1)) + (r_243_res_third_1_2 * r_244_skew_vec3d_2_1));
  double r_245_res_fourth_1_2 = (((r_243_res_third_1_0 * r_244_skew_vec3d_0_2) + (r_243_res_third_1_1 * r_244_skew_vec3d_1_2)) + (r_243_res_third_1_2 * r_244_skew_vec3d_2_2));
  double r_245_res_fourth_2_0 = (((r_243_res_third_2_0 * r_244_skew_vec3d_0_0) + (r_243_res_third_2_1 * r_244_skew_vec3d_1_0)) + (r_243_res_third_2_2 * r_244_skew_vec3d_2_0));
  double r_245_res_fourth_2_1 = (((r_243_res_third_2_0 * r_244_skew_vec3d_0_1) + (r_243_res_third_2_1 * r_244_skew_vec3d_1_1)) + (r_243_res_third_2_2 * r_244_skew_vec3d_2_1));
  double r_245_res_fourth_2_2 = (((r_243_res_third_2_0 * r_244_skew_vec3d_0_2) + (r_243_res_third_2_1 * r_244_skew_vec3d_1_2)) + (r_243_res_third_2_2 * r_244_skew_vec3d_2_2));
  double r_246_res_fifth_0_0 = (r_241_res_second_0_0 - r_245_res_fourth_0_0);
  double r_246_res_fifth_0_1 = (r_241_res_second_0_1 - r_245_res_fourth_0_1);
  double r_246_res_fifth_0_2 = (r_241_res_second_0_2 - r_245_res_fourth_0_2);
  double r_246_res_fifth_1_0 = (r_241_res_second_1_0 - r_245_res_fourth_1_0);
  double r_246_res_fifth_1_1 = (r_241_res_second_1_1 - r_245_res_fourth_1_1);
  double r_246_res_fifth_1_2 = (r_241_res_second_1_2 - r_245_res_fourth_1_2);
  double r_246_res_fifth_2_0 = (r_241_res_second_2_0 - r_245_res_fourth_2_0);
  double r_246_res_fifth_2_1 = (r_241_res_second_2_1 - r_245_res_fourth_2_1);
  double r_246_res_fifth_2_2 = (r_241_res_second_2_2 - r_245_res_fourth_2_2);
  double r_247_res_third_first_col_0 = r_243_res_third_0_0;
  double r_247_res_third_first_col_1 = r_243_res_third_1_0;
  double r_247_res_third_first_col_2 = r_243_res_third_2_0;
  double r_248_res_third_second_col_0 = r_243_res_third_0_1;
  double r_248_res_third_second_col_1 = r_243_res_third_1_1;
  double r_248_res_third_second_col_2 = r_243_res_third_2_1;
  double r_249_res_third_third_col_0 = r_243_res_third_0_2;
  double r_249_res_third_third_col_1 = r_243_res_third_1_2;
  double r_249_res_third_third_col_2 = r_243_res_third_2_2;
  double r_250_res_sixth_first_col_0 = ((ov_angular_2_1 * r_247_res_third_first_col_2) - (ov_angular_2_2 * r_247_res_third_first_col_1));
  double r_250_res_sixth_first_col_1 = ((ov_angular_2_2 * r_247_res_third_first_col_0) - (ov_angular_2_0 * r_247_res_third_first_col_2));
  double r_250_res_sixth_first_col_2 = ((ov_angular_2_0 * r_247_res_third_first_col_1) - (ov_angular_2_1 * r_247_res_third_first_col_0));
  double r_251_res_sixth_second_col_0 = ((ov_angular_2_1 * r_248_res_third_second_col_2) - (ov_angular_2_2 * r_248_res_third_second_col_1));
  double r_251_res_sixth_second_col_1 = ((ov_angular_2_2 * r_248_res_third_second_col_0) - (ov_angular_2_0 * r_248_res_third_second_col_2));
  double r_251_res_sixth_second_col_2 = ((ov_angular_2_0 * r_248_res_third_second_col_1) - (ov_angular_2_1 * r_248_res_third_second_col_0));
  double r_252_res_sixth_third_col_0 = ((ov_angular_2_1 * r_249_res_third_third_col_2) - (ov_angular_2_2 * r_249_res_third_third_col_1));
  double r_252_res_sixth_third_col_1 = ((ov_angular_2_2 * r_249_res_third_third_col_0) - (ov_angular_2_0 * r_249_res_third_third_col_2));
  double r_252_res_sixth_third_col_2 = ((ov_angular_2_0 * r_249_res_third_third_col_1) - (ov_angular_2_1 * r_249_res_third_third_col_0));
  double r_253_res_sixth_0_0 = (r_246_res_fifth_0_0 + r_250_res_sixth_first_col_0);
  double r_253_res_sixth_0_1 = (r_246_res_fifth_0_1 + r_251_res_sixth_second_col_0);
  double r_253_res_sixth_0_2 = (r_246_res_fifth_0_2 + r_252_res_sixth_third_col_0);
  double r_253_res_sixth_1_0 = (r_246_res_fifth_1_0 + r_250_res_sixth_first_col_1);
  double r_253_res_sixth_1_1 = (r_246_res_fifth_1_1 + r_251_res_sixth_second_col_1);
  double r_253_res_sixth_1_2 = (r_246_res_fifth_1_2 + r_252_res_sixth_third_col_1);
  double r_253_res_sixth_2_0 = (r_246_res_fifth_2_0 + r_250_res_sixth_first_col_2);
  double r_253_res_sixth_2_1 = (r_246_res_fifth_2_1 + r_251_res_sixth_second_col_2);
  double r_253_res_sixth_2_2 = (r_246_res_fifth_2_2 + r_252_res_sixth_third_col_2);
  double inertia_variation_2_0_0 = 0;
  double inertia_variation_2_0_1 = 0;
  double inertia_variation_2_0_2 = 0;
  double inertia_variation_2_0_3 = r_233_res_first_0_0;
  double inertia_variation_2_0_4 = r_233_res_first_0_1;
  double inertia_variation_2_0_5 = r_233_res_first_0_2;
  double inertia_variation_2_1_0 = 0;
  double inertia_variation_2_1_1 = 0;
  double inertia_variation_2_1_2 = 0;
  double inertia_variation_2_1_3 = r_233_res_first_1_0;
  double inertia_variation_2_1_4 = r_233_res_first_1_1;
  double inertia_variation_2_1_5 = r_233_res_first_1_2;
  double inertia_variation_2_2_0 = 0;
  double inertia_variation_2_2_1 = 0;
  double inertia_variation_2_2_2 = 0;
  double inertia_variation_2_2_3 = r_233_res_first_2_0;
  double inertia_variation_2_2_4 = r_233_res_first_2_1;
  double inertia_variation_2_2_5 = r_233_res_first_2_2;
  double inertia_variation_2_3_0 = r_233_res_first_0_0;
  double inertia_variation_2_3_1 = r_233_res_first_1_0;
  double inertia_variation_2_3_2 = r_233_res_first_2_0;
  double inertia_variation_2_3_3 = r_253_res_sixth_0_0;
  double inertia_variation_2_3_4 = r_253_res_sixth_0_1;
  double inertia_variation_2_3_5 = r_253_res_sixth_0_2;
  double inertia_variation_2_4_0 = r_233_res_first_0_1;
  double inertia_variation_2_4_1 = r_233_res_first_1_1;
  double inertia_variation_2_4_2 = r_233_res_first_2_1;
  double inertia_variation_2_4_3 = r_253_res_sixth_1_0;
  double inertia_variation_2_4_4 = r_253_res_sixth_1_1;
  double inertia_variation_2_4_5 = r_253_res_sixth_1_2;
  double inertia_variation_2_5_0 = r_233_res_first_0_2;
  double inertia_variation_2_5_1 = r_233_res_first_1_2;
  double inertia_variation_2_5_2 = r_233_res_first_2_2;
  double inertia_variation_2_5_3 = r_253_res_sixth_2_0;
  double inertia_variation_2_5_4 = r_253_res_sixth_2_1;
  double inertia_variation_2_5_5 = r_253_res_sixth_2_2;
  double r_254_add_force_cross_linear_angular_0_0 = inertia_variation_2_0_3;
  double r_254_add_force_cross_linear_angular_0_1 = inertia_variation_2_0_4;
  double r_254_add_force_cross_linear_angular_0_2 = inertia_variation_2_0_5;
  double r_254_add_force_cross_linear_angular_1_0 = inertia_variation_2_1_3;
  double r_254_add_force_cross_linear_angular_1_1 = inertia_variation_2_1_4;
  double r_254_add_force_cross_linear_angular_1_2 = inertia_variation_2_1_5;
  double r_254_add_force_cross_linear_angular_2_0 = inertia_variation_2_2_3;
  double r_254_add_force_cross_linear_angular_2_1 = inertia_variation_2_2_4;
  double r_254_add_force_cross_linear_angular_2_2 = inertia_variation_2_2_5;
  double r_255_add_force_cross_angular_linear_0_0 = inertia_variation_2_3_0;
  double r_255_add_force_cross_angular_linear_0_1 = inertia_variation_2_3_1;
  double r_255_add_force_cross_angular_linear_0_2 = inertia_variation_2_3_2;
  double r_255_add_force_cross_angular_linear_1_0 = inertia_variation_2_4_0;
  double r_255_add_force_cross_angular_linear_1_1 = inertia_variation_2_4_1;
  double r_255_add_force_cross_angular_linear_1_2 = inertia_variation_2_4_2;
  double r_255_add_force_cross_angular_linear_2_0 = inertia_variation_2_5_0;
  double r_255_add_force_cross_angular_linear_2_1 = inertia_variation_2_5_1;
  double r_255_add_force_cross_angular_linear_2_2 = inertia_variation_2_5_2;
  double r_256_add_force_cross_angular_angular_0_0 = inertia_variation_2_3_3;
  double r_256_add_force_cross_angular_angular_0_1 = inertia_variation_2_3_4;
  double r_256_add_force_cross_angular_angular_0_2 = inertia_variation_2_3_5;
  double r_256_add_force_cross_angular_angular_1_0 = inertia_variation_2_4_3;
  double r_256_add_force_cross_angular_angular_1_1 = inertia_variation_2_4_4;
  double r_256_add_force_cross_angular_angular_1_2 = inertia_variation_2_4_5;
  double r_256_add_force_cross_angular_angular_2_0 = inertia_variation_2_5_3;
  double r_256_add_force_cross_angular_angular_2_1 = inertia_variation_2_5_4;
  double r_256_add_force_cross_angular_angular_2_2 = inertia_variation_2_5_5;
  double r_257_minus_f_linear_0 = -(data_oh_linear_2_0);
  double r_257_minus_f_linear_1 = -(data_oh_linear_2_1);
  double r_257_minus_f_linear_2 = -(data_oh_linear_2_2);
  double r_258_minus_f_angular_0 = -(data_oh_angular_2_0);
  double r_258_minus_f_angular_1 = -(data_oh_angular_2_1);
  double r_258_minus_f_angular_2 = -(data_oh_angular_2_2);
  double r_259_add_skew_0_0 = r_254_add_force_cross_linear_angular_0_0;
  double r_259_add_skew_0_1 = (r_254_add_force_cross_linear_angular_0_1 - r_257_minus_f_linear_2);
  double r_259_add_skew_0_2 = (r_254_add_force_cross_linear_angular_0_2 + r_257_minus_f_linear_1);
  double r_259_add_skew_1_0 = (r_254_add_force_cross_linear_angular_1_0 + r_257_minus_f_linear_2);
  double r_259_add_skew_1_1 = r_254_add_force_cross_linear_angular_1_1;
  double r_259_add_skew_1_2 = (r_254_add_force_cross_linear_angular_1_2 - r_257_minus_f_linear_0);
  double r_259_add_skew_2_0 = (r_254_add_force_cross_linear_angular_2_0 - r_257_minus_f_linear_1);
  double r_259_add_skew_2_1 = (r_254_add_force_cross_linear_angular_2_1 + r_257_minus_f_linear_0);
  double r_259_add_skew_2_2 = r_254_add_force_cross_linear_angular_2_2;
  double r_260_res_linear_angular_0_0 = r_259_add_skew_0_0;
  double r_260_res_linear_angular_0_1 = r_259_add_skew_0_1;
  double r_260_res_linear_angular_0_2 = r_259_add_skew_0_2;
  double r_260_res_linear_angular_1_0 = r_259_add_skew_1_0;
  double r_260_res_linear_angular_1_1 = r_259_add_skew_1_1;
  double r_260_res_linear_angular_1_2 = r_259_add_skew_1_2;
  double r_260_res_linear_angular_2_0 = r_259_add_skew_2_0;
  double r_260_res_linear_angular_2_1 = r_259_add_skew_2_1;
  double r_260_res_linear_angular_2_2 = r_259_add_skew_2_2;
  double r_261_add_skew_0_0 = r_255_add_force_cross_angular_linear_0_0;
  double r_261_add_skew_0_1 = (r_255_add_force_cross_angular_linear_0_1 - r_257_minus_f_linear_2);
  double r_261_add_skew_0_2 = (r_255_add_force_cross_angular_linear_0_2 + r_257_minus_f_linear_1);
  double r_261_add_skew_1_0 = (r_255_add_force_cross_angular_linear_1_0 + r_257_minus_f_linear_2);
  double r_261_add_skew_1_1 = r_255_add_force_cross_angular_linear_1_1;
  double r_261_add_skew_1_2 = (r_255_add_force_cross_angular_linear_1_2 - r_257_minus_f_linear_0);
  double r_261_add_skew_2_0 = (r_255_add_force_cross_angular_linear_2_0 - r_257_minus_f_linear_1);
  double r_261_add_skew_2_1 = (r_255_add_force_cross_angular_linear_2_1 + r_257_minus_f_linear_0);
  double r_261_add_skew_2_2 = r_255_add_force_cross_angular_linear_2_2;
  double r_262_res_angular_linear_0_0 = r_261_add_skew_0_0;
  double r_262_res_angular_linear_0_1 = r_261_add_skew_0_1;
  double r_262_res_angular_linear_0_2 = r_261_add_skew_0_2;
  double r_262_res_angular_linear_1_0 = r_261_add_skew_1_0;
  double r_262_res_angular_linear_1_1 = r_261_add_skew_1_1;
  double r_262_res_angular_linear_1_2 = r_261_add_skew_1_2;
  double r_262_res_angular_linear_2_0 = r_261_add_skew_2_0;
  double r_262_res_angular_linear_2_1 = r_261_add_skew_2_1;
  double r_262_res_angular_linear_2_2 = r_261_add_skew_2_2;
  double r_263_add_skew_0_0 = r_256_add_force_cross_angular_angular_0_0;
  double r_263_add_skew_0_1 = (r_256_add_force_cross_angular_angular_0_1 - r_258_minus_f_angular_2);
  double r_263_add_skew_0_2 = (r_256_add_force_cross_angular_angular_0_2 + r_258_minus_f_angular_1);
  double r_263_add_skew_1_0 = (r_256_add_force_cross_angular_angular_1_0 + r_258_minus_f_angular_2);
  double r_263_add_skew_1_1 = r_256_add_force_cross_angular_angular_1_1;
  double r_263_add_skew_1_2 = (r_256_add_force_cross_angular_angular_1_2 - r_258_minus_f_angular_0);
  double r_263_add_skew_2_0 = (r_256_add_force_cross_angular_angular_2_0 - r_258_minus_f_angular_1);
  double r_263_add_skew_2_1 = (r_256_add_force_cross_angular_angular_2_1 + r_258_minus_f_angular_0);
  double r_263_add_skew_2_2 = r_256_add_force_cross_angular_angular_2_2;
  double r_264_res_angular_angular_0_0 = r_263_add_skew_0_0;
  double r_264_res_angular_angular_0_1 = r_263_add_skew_0_1;
  double r_264_res_angular_angular_0_2 = r_263_add_skew_0_2;
  double r_264_res_angular_angular_1_0 = r_263_add_skew_1_0;
  double r_264_res_angular_angular_1_1 = r_263_add_skew_1_1;
  double r_264_res_angular_angular_1_2 = r_263_add_skew_1_2;
  double r_264_res_angular_angular_2_0 = r_263_add_skew_2_0;
  double r_264_res_angular_angular_2_1 = r_263_add_skew_2_1;
  double r_264_res_angular_angular_2_2 = r_263_add_skew_2_2;
  double add_force_cross_matrix_2_0_0 = inertia_variation_2_0_0;
  double add_force_cross_matrix_2_0_1 = inertia_variation_2_0_1;
  double add_force_cross_matrix_2_0_2 = inertia_variation_2_0_2;
  double add_force_cross_matrix_2_0_3 = r_260_res_linear_angular_0_0;
  double add_force_cross_matrix_2_0_4 = r_260_res_linear_angular_0_1;
  double add_force_cross_matrix_2_0_5 = r_260_res_linear_angular_0_2;
  double add_force_cross_matrix_2_1_0 = inertia_variation_2_1_0;
  double add_force_cross_matrix_2_1_1 = inertia_variation_2_1_1;
  double add_force_cross_matrix_2_1_2 = inertia_variation_2_1_2;
  double add_force_cross_matrix_2_1_3 = r_260_res_linear_angular_1_0;
  double add_force_cross_matrix_2_1_4 = r_260_res_linear_angular_1_1;
  double add_force_cross_matrix_2_1_5 = r_260_res_linear_angular_1_2;
  double add_force_cross_matrix_2_2_0 = inertia_variation_2_2_0;
  double add_force_cross_matrix_2_2_1 = inertia_variation_2_2_1;
  double add_force_cross_matrix_2_2_2 = inertia_variation_2_2_2;
  double add_force_cross_matrix_2_2_3 = r_260_res_linear_angular_2_0;
  double add_force_cross_matrix_2_2_4 = r_260_res_linear_angular_2_1;
  double add_force_cross_matrix_2_2_5 = r_260_res_linear_angular_2_2;
  double add_force_cross_matrix_2_3_0 = r_262_res_angular_linear_0_0;
  double add_force_cross_matrix_2_3_1 = r_262_res_angular_linear_0_1;
  double add_force_cross_matrix_2_3_2 = r_262_res_angular_linear_0_2;
  double add_force_cross_matrix_2_3_3 = r_264_res_angular_angular_0_0;
  double add_force_cross_matrix_2_3_4 = r_264_res_angular_angular_0_1;
  double add_force_cross_matrix_2_3_5 = r_264_res_angular_angular_0_2;
  double add_force_cross_matrix_2_4_0 = r_262_res_angular_linear_1_0;
  double add_force_cross_matrix_2_4_1 = r_262_res_angular_linear_1_1;
  double add_force_cross_matrix_2_4_2 = r_262_res_angular_linear_1_2;
  double add_force_cross_matrix_2_4_3 = r_264_res_angular_angular_1_0;
  double add_force_cross_matrix_2_4_4 = r_264_res_angular_angular_1_1;
  double add_force_cross_matrix_2_4_5 = r_264_res_angular_angular_1_2;
  double add_force_cross_matrix_2_5_0 = r_262_res_angular_linear_2_0;
  double add_force_cross_matrix_2_5_1 = r_262_res_angular_linear_2_1;
  double add_force_cross_matrix_2_5_2 = r_262_res_angular_linear_2_2;
  double add_force_cross_matrix_2_5_3 = r_264_res_angular_angular_2_0;
  double add_force_cross_matrix_2_5_4 = r_264_res_angular_angular_2_1;
  double add_force_cross_matrix_2_5_5 = r_264_res_angular_angular_2_2;
  double rotation_matrix_3_0_0 = qcos_3;
  double rotation_matrix_3_0_1 = -(qsin_3);
  double rotation_matrix_3_0_2 = 0;
  double rotation_matrix_3_1_0 = qsin_3;
  double rotation_matrix_3_1_1 = qcos_3;
  double rotation_matrix_3_1_2 = 0;
  double rotation_matrix_3_2_0 = 0;
  double rotation_matrix_3_2_1 = 0;
  double rotation_matrix_3_2_2 = 1;
  double limi_rotation_3_0_0 = rotation_matrix_3_0_0;
  double limi_rotation_3_0_1 = rotation_matrix_3_0_1;
  double limi_rotation_3_0_2 = 0;
  double limi_rotation_3_1_0 = 0;
  double limi_rotation_3_1_1 = 0;
  double limi_rotation_3_1_2 = -1;
  double limi_rotation_3_2_0 = rotation_matrix_3_1_0;
  double limi_rotation_3_2_1 = rotation_matrix_3_1_1;
  double limi_rotation_3_2_2 = 0;
  double v_linear_3_0 = data_v_3_0;
  double v_linear_3_1 = data_v_3_1;
  double v_linear_3_2 = data_v_3_2;
  double v_angular_3_0 = data_v_3_3;
  double v_angular_3_1 = data_v_3_4;
  double v_angular_3_2 = v_3;
  double parent_v_linear_3_0 = all_v_2_0;
  double parent_v_linear_3_1 = all_v_2_1;
  double parent_v_linear_3_2 = all_v_2_2;
  double parent_v_angular_3_0 = all_v_2_3;
  double parent_v_angular_3_1 = all_v_2_4;
  double parent_v_angular_3_2 = all_v_2_5;
  double parent_a_linear_3_0 = a_final_2_0;
  double parent_a_linear_3_1 = a_final_2_1;
  double parent_a_linear_3_2 = a_final_2_2;
  double parent_a_angular_3_0 = a_final_2_3;
  double parent_a_angular_3_1 = a_final_2_4;
  double parent_a_angular_3_2 = a_final_2_5;
  double oMi_rotation_3_0_0 = (((oMi_rotation_2_0_0 * limi_rotation_3_0_0) + (oMi_rotation_2_0_1 * limi_rotation_3_1_0)) + (oMi_rotation_2_0_2 * limi_rotation_3_2_0));
  double oMi_rotation_3_0_1 = (((oMi_rotation_2_0_0 * limi_rotation_3_0_1) + (oMi_rotation_2_0_1 * limi_rotation_3_1_1)) + (oMi_rotation_2_0_2 * limi_rotation_3_2_1));
  double oMi_rotation_3_0_2 = (((oMi_rotation_2_0_0 * limi_rotation_3_0_2) + (oMi_rotation_2_0_1 * limi_rotation_3_1_2)) + (oMi_rotation_2_0_2 * limi_rotation_3_2_2));
  double oMi_rotation_3_1_0 = (((oMi_rotation_2_1_0 * limi_rotation_3_0_0) + (oMi_rotation_2_1_1 * limi_rotation_3_1_0)) + (oMi_rotation_2_1_2 * limi_rotation_3_2_0));
  double oMi_rotation_3_1_1 = (((oMi_rotation_2_1_0 * limi_rotation_3_0_1) + (oMi_rotation_2_1_1 * limi_rotation_3_1_1)) + (oMi_rotation_2_1_2 * limi_rotation_3_2_1));
  double oMi_rotation_3_1_2 = (((oMi_rotation_2_1_0 * limi_rotation_3_0_2) + (oMi_rotation_2_1_1 * limi_rotation_3_1_2)) + (oMi_rotation_2_1_2 * limi_rotation_3_2_2));
  double oMi_rotation_3_2_0 = (((oMi_rotation_2_2_0 * limi_rotation_3_0_0) + (oMi_rotation_2_2_1 * limi_rotation_3_1_0)) + (oMi_rotation_2_2_2 * limi_rotation_3_2_0));
  double oMi_rotation_3_2_1 = (((oMi_rotation_2_2_0 * limi_rotation_3_0_1) + (oMi_rotation_2_2_1 * limi_rotation_3_1_1)) + (oMi_rotation_2_2_2 * limi_rotation_3_2_1));
  double oMi_rotation_3_2_2 = (((oMi_rotation_2_2_0 * limi_rotation_3_0_2) + (oMi_rotation_2_2_1 * limi_rotation_3_1_2)) + (oMi_rotation_2_2_2 * limi_rotation_3_2_2));
  double oMi_translation_to_add_3_0 = (((oMi_rotation_2_0_0 * limi_translation_3_0) + (oMi_rotation_2_0_1 * limi_translation_3_1)) + (oMi_rotation_2_0_2 * limi_translation_3_2));
  double oMi_translation_to_add_3_1 = (((oMi_rotation_2_1_0 * limi_translation_3_0) + (oMi_rotation_2_1_1 * limi_translation_3_1)) + (oMi_rotation_2_1_2 * limi_translation_3_2));
  double oMi_translation_to_add_3_2 = (((oMi_rotation_2_2_0 * limi_translation_3_0) + (oMi_rotation_2_2_1 * limi_translation_3_1)) + (oMi_rotation_2_2_2 * limi_translation_3_2));
  double oMi_translation_3_0 = (oMi_translation_2_0 + oMi_translation_to_add_3_0);
  double oMi_translation_3_1 = (oMi_translation_2_1 + oMi_translation_to_add_3_1);
  double oMi_translation_3_2 = (oMi_translation_2_2 + oMi_translation_to_add_3_2);
  double actInv1_3_0 = ((limi_translation_3_1 * parent_v_angular_3_2) - (limi_translation_3_2 * parent_v_angular_3_1));
  double actInv1_3_1 = ((limi_translation_3_2 * parent_v_angular_3_0) - (limi_translation_3_0 * parent_v_angular_3_2));
  double actInv1_3_2 = ((limi_translation_3_0 * parent_v_angular_3_1) - (limi_translation_3_1 * parent_v_angular_3_0));
  double actInv2_3_0 = (parent_v_linear_3_0 - actInv1_3_0);
  double actInv2_3_1 = (parent_v_linear_3_1 - actInv1_3_1);
  double actInv2_3_2 = (parent_v_linear_3_2 - actInv1_3_2);
  double actInv3_3_0_0 = limi_rotation_3_0_0;
  double actInv3_3_1_0 = limi_rotation_3_0_1;
  double actInv3_3_2_0 = limi_rotation_3_0_2;
  double actInv3_3_0_1 = limi_rotation_3_1_0;
  double actInv3_3_1_1 = limi_rotation_3_1_1;
  double actInv3_3_2_1 = limi_rotation_3_1_2;
  double actInv3_3_0_2 = limi_rotation_3_2_0;
  double actInv3_3_1_2 = limi_rotation_3_2_1;
  double actInv3_3_2_2 = limi_rotation_3_2_2;
  double actInv4_3_0 = (((actInv3_3_0_0 * actInv2_3_0) + (actInv3_3_0_1 * actInv2_3_1)) + (actInv3_3_0_2 * actInv2_3_2));
  double actInv4_3_1 = (((actInv3_3_1_0 * actInv2_3_0) + (actInv3_3_1_1 * actInv2_3_1)) + (actInv3_3_1_2 * actInv2_3_2));
  double actInv4_3_2 = (((actInv3_3_2_0 * actInv2_3_0) + (actInv3_3_2_1 * actInv2_3_1)) + (actInv3_3_2_2 * actInv2_3_2));
  double act_inv_linear_3_0 = (v_linear_3_0 + actInv4_3_0);
  double act_inv_linear_3_1 = (v_linear_3_1 + actInv4_3_1);
  double act_inv_linear_3_2 = (v_linear_3_2 + actInv4_3_2);
  double actInv5_3_0 = (((actInv3_3_0_0 * parent_v_angular_3_0) + (actInv3_3_0_1 * parent_v_angular_3_1)) + (actInv3_3_0_2 * parent_v_angular_3_2));
  double actInv5_3_1 = (((actInv3_3_1_0 * parent_v_angular_3_0) + (actInv3_3_1_1 * parent_v_angular_3_1)) + (actInv3_3_1_2 * parent_v_angular_3_2));
  double actInv5_3_2 = (((actInv3_3_2_0 * parent_v_angular_3_0) + (actInv3_3_2_1 * parent_v_angular_3_1)) + (actInv3_3_2_2 * parent_v_angular_3_2));
  double act_inv_angular_3_0 = (v_angular_3_0 + actInv5_3_0);
  double act_inv_angular_3_1 = (v_angular_3_1 + actInv5_3_1);
  double act_inv_angular_3_2 = (v_angular_3_2 + actInv5_3_2);
  double all_v_3_0 = act_inv_linear_3_0;
  double all_v_3_1 = act_inv_linear_3_1;
  double all_v_3_2 = act_inv_linear_3_2;
  double all_v_3_3 = act_inv_angular_3_0;
  double all_v_3_4 = act_inv_angular_3_1;
  double all_v_3_5 = act_inv_angular_3_2;
  double minus_m_w_3 = -(v_3);
  double alpha_cross1_linear_3 = (-(minus_m_w_3) * act_inv_linear_3_1);
  double alpha_cross2_linear_3 = (minus_m_w_3 * act_inv_linear_3_0);
  double alpha_cross_linear_3_0 = alpha_cross1_linear_3;
  double alpha_cross_linear_3_1 = alpha_cross2_linear_3;
  double alpha_cross_linear_3_2 = 0;
  double alpha_cross1_angular_3 = (-(minus_m_w_3) * act_inv_angular_3_1);
  double alpha_cross2_angular_3 = (minus_m_w_3 * act_inv_angular_3_0);
  double alpha_cross_angular_3_0 = alpha_cross1_angular_3;
  double alpha_cross_angular_3_1 = alpha_cross2_angular_3;
  double alpha_cross_angular_3_2 = 0;
  double new_data_a_3_0 = alpha_cross_linear_3_0;
  double new_data_a_3_1 = alpha_cross_linear_3_1;
  double new_data_a_3_2 = alpha_cross_linear_3_2;
  double new_data_a_3_3 = alpha_cross_angular_3_0;
  double new_data_a_3_4 = alpha_cross_angular_3_1;
  double new_data_a_3_5 = a_3;
  double temp_a_linear_3_0 = new_data_a_3_0;
  double temp_a_linear_3_1 = new_data_a_3_1;
  double temp_a_linear_3_2 = new_data_a_3_2;
  double temp_a_angular_3_0 = new_data_a_3_3;
  double temp_a_angular_3_1 = new_data_a_3_4;
  double temp_a_angular_3_2 = new_data_a_3_5;
  double r_265_actInv1_3_0 = ((limi_translation_3_1 * parent_a_angular_3_2) - (limi_translation_3_2 * parent_a_angular_3_1));
  double r_265_actInv1_3_1 = ((limi_translation_3_2 * parent_a_angular_3_0) - (limi_translation_3_0 * parent_a_angular_3_2));
  double r_265_actInv1_3_2 = ((limi_translation_3_0 * parent_a_angular_3_1) - (limi_translation_3_1 * parent_a_angular_3_0));
  double r_266_actInv2_3_0 = (parent_a_linear_3_0 - r_265_actInv1_3_0);
  double r_266_actInv2_3_1 = (parent_a_linear_3_1 - r_265_actInv1_3_1);
  double r_266_actInv2_3_2 = (parent_a_linear_3_2 - r_265_actInv1_3_2);
  double r_267_actInv3_3_0_0 = limi_rotation_3_0_0;
  double r_267_actInv3_3_1_0 = limi_rotation_3_0_1;
  double r_267_actInv3_3_2_0 = limi_rotation_3_0_2;
  double r_267_actInv3_3_0_1 = limi_rotation_3_1_0;
  double r_267_actInv3_3_1_1 = limi_rotation_3_1_1;
  double r_267_actInv3_3_2_1 = limi_rotation_3_1_2;
  double r_267_actInv3_3_0_2 = limi_rotation_3_2_0;
  double r_267_actInv3_3_1_2 = limi_rotation_3_2_1;
  double r_267_actInv3_3_2_2 = limi_rotation_3_2_2;
  double r_268_actInv4_3_0 = (((r_267_actInv3_3_0_0 * r_266_actInv2_3_0) + (r_267_actInv3_3_0_1 * r_266_actInv2_3_1)) + (r_267_actInv3_3_0_2 * r_266_actInv2_3_2));
  double r_268_actInv4_3_1 = (((r_267_actInv3_3_1_0 * r_266_actInv2_3_0) + (r_267_actInv3_3_1_1 * r_266_actInv2_3_1)) + (r_267_actInv3_3_1_2 * r_266_actInv2_3_2));
  double r_268_actInv4_3_2 = (((r_267_actInv3_3_2_0 * r_266_actInv2_3_0) + (r_267_actInv3_3_2_1 * r_266_actInv2_3_1)) + (r_267_actInv3_3_2_2 * r_266_actInv2_3_2));
  double r_269_act_inv_linear_3_0 = (temp_a_linear_3_0 + r_268_actInv4_3_0);
  double r_269_act_inv_linear_3_1 = (temp_a_linear_3_1 + r_268_actInv4_3_1);
  double r_269_act_inv_linear_3_2 = (temp_a_linear_3_2 + r_268_actInv4_3_2);
  double r_270_actInv5_3_0 = (((r_267_actInv3_3_0_0 * parent_a_angular_3_0) + (r_267_actInv3_3_0_1 * parent_a_angular_3_1)) + (r_267_actInv3_3_0_2 * parent_a_angular_3_2));
  double r_270_actInv5_3_1 = (((r_267_actInv3_3_1_0 * parent_a_angular_3_0) + (r_267_actInv3_3_1_1 * parent_a_angular_3_1)) + (r_267_actInv3_3_1_2 * parent_a_angular_3_2));
  double r_270_actInv5_3_2 = (((r_267_actInv3_3_2_0 * parent_a_angular_3_0) + (r_267_actInv3_3_2_1 * parent_a_angular_3_1)) + (r_267_actInv3_3_2_2 * parent_a_angular_3_2));
  double r_271_act_inv_angular_3_0 = (temp_a_angular_3_0 + r_270_actInv5_3_0);
  double r_271_act_inv_angular_3_1 = (temp_a_angular_3_1 + r_270_actInv5_3_1);
  double r_271_act_inv_angular_3_2 = (temp_a_angular_3_2 + r_270_actInv5_3_2);
  double a_final_3_0 = r_269_act_inv_linear_3_0;
  double a_final_3_1 = r_269_act_inv_linear_3_1;
  double a_final_3_2 = r_269_act_inv_linear_3_2;
  double a_final_3_3 = r_271_act_inv_angular_3_0;
  double a_final_3_4 = r_271_act_inv_angular_3_1;
  double a_final_3_5 = r_271_act_inv_angular_3_2;
  double r_272_new_translation_temp_0 = (((oMi_rotation_3_0_0 * lever_3_0) + (oMi_rotation_3_0_1 * lever_3_1)) + (oMi_rotation_3_0_2 * lever_3_2));
  double r_272_new_translation_temp_1 = (((oMi_rotation_3_1_0 * lever_3_0) + (oMi_rotation_3_1_1 * lever_3_1)) + (oMi_rotation_3_1_2 * lever_3_2));
  double r_272_new_translation_temp_2 = (((oMi_rotation_3_2_0 * lever_3_0) + (oMi_rotation_3_2_1 * lever_3_1)) + (oMi_rotation_3_2_2 * lever_3_2));
  double r_273_new_translation_0 = (oMi_translation_3_0 + r_272_new_translation_temp_0);
  double r_273_new_translation_1 = (oMi_translation_3_1 + r_272_new_translation_temp_1);
  double r_273_new_translation_2 = (oMi_translation_3_2 + r_272_new_translation_temp_2);
  double r_274_decompose_it_i_0_0 = (inertia_3_0_0 - inertia_3_2_2);
  double r_274_decompose_it_i_0_1 = inertia_3_0_1;
  double r_274_decompose_it_i_1_0 = inertia_3_0_1;
  double r_274_decompose_it_i_1_1 = (inertia_3_1_1 - inertia_3_2_2);
  double r_274_decompose_it_i_2_0 = (inertia_3_0_2 * 2);
  double r_274_decompose_it_i_2_1 = (inertia_3_1_2 + inertia_3_1_2);
  double r_275_rotate_bottom_r_0_0 = oMi_rotation_3_1_0;
  double r_275_rotate_bottom_r_0_1 = oMi_rotation_3_1_1;
  double r_275_rotate_bottom_r_0_2 = oMi_rotation_3_1_2;
  double r_275_rotate_bottom_r_1_0 = oMi_rotation_3_2_0;
  double r_275_rotate_bottom_r_1_1 = oMi_rotation_3_2_1;
  double r_275_rotate_bottom_r_1_2 = oMi_rotation_3_2_2;
  double r_276_rotate_y_0_0 = (((r_275_rotate_bottom_r_0_0 * r_274_decompose_it_i_0_0) + (r_275_rotate_bottom_r_0_1 * r_274_decompose_it_i_1_0)) + (r_275_rotate_bottom_r_0_2 * r_274_decompose_it_i_2_0));
  double r_276_rotate_y_0_1 = (((r_275_rotate_bottom_r_0_0 * r_274_decompose_it_i_0_1) + (r_275_rotate_bottom_r_0_1 * r_274_decompose_it_i_1_1)) + (r_275_rotate_bottom_r_0_2 * r_274_decompose_it_i_2_1));
  double r_276_rotate_y_1_0 = (((r_275_rotate_bottom_r_1_0 * r_274_decompose_it_i_0_0) + (r_275_rotate_bottom_r_1_1 * r_274_decompose_it_i_1_0)) + (r_275_rotate_bottom_r_1_2 * r_274_decompose_it_i_2_0));
  double r_276_rotate_y_1_1 = (((r_275_rotate_bottom_r_1_0 * r_274_decompose_it_i_0_1) + (r_275_rotate_bottom_r_1_1 * r_274_decompose_it_i_1_1)) + (r_275_rotate_bottom_r_1_2 * r_274_decompose_it_i_2_1));
  double r_277_sres_first_1 = ((oMi_rotation_3_0_0 * r_276_rotate_y_0_0) + (oMi_rotation_3_0_1 * r_276_rotate_y_0_1));
  double r_278_sres_first_2 = ((oMi_rotation_3_1_0 * r_276_rotate_y_0_0) + (oMi_rotation_3_1_1 * r_276_rotate_y_0_1));
  double r_279_sres_first_3 = ((oMi_rotation_3_0_0 * r_276_rotate_y_1_0) + (oMi_rotation_3_0_1 * r_276_rotate_y_1_1));
  double r_280_sres_first_4 = ((oMi_rotation_3_1_0 * r_276_rotate_y_1_0) + (oMi_rotation_3_1_1 * r_276_rotate_y_1_1));
  double r_281_sres_first_5 = ((oMi_rotation_3_2_0 * r_276_rotate_y_1_0) + (oMi_rotation_3_2_1 * r_276_rotate_y_1_1));
  double r_282_const_r_0 = ((-(inertia_3_1_2) * oMi_rotation_3_0_0) + (inertia_3_0_2 * oMi_rotation_3_0_1));
  double r_282_const_r_1 = ((-(inertia_3_1_2) * oMi_rotation_3_1_0) + (inertia_3_0_2 * oMi_rotation_3_1_1));
  double r_282_const_r_2 = ((-(inertia_3_1_2) * oMi_rotation_3_2_0) + (inertia_3_0_2 * oMi_rotation_3_2_1));
  double r_283_sres_update_0_tmp1 = (r_274_decompose_it_i_0_0 + r_274_decompose_it_i_1_1);
  double r_284_sres_update_0_tmp2 = (r_278_sres_first_2 + r_281_sres_first_5);
  double r_285_sres_update_0 = (r_283_sres_update_0_tmp1 - r_284_sres_update_0_tmp2);
  double r_286_symmetric3_rotate_0_0 = (r_285_sres_update_0 + inertia_3_2_2);
  double r_286_symmetric3_rotate_0_1 = (r_277_sres_first_1 + r_282_const_r_2);
  double r_286_symmetric3_rotate_0_2 = (r_279_sres_first_3 - r_282_const_r_1);
  double r_286_symmetric3_rotate_1_0 = (r_277_sres_first_1 + r_282_const_r_2);
  double r_286_symmetric3_rotate_1_1 = (r_278_sres_first_2 + inertia_3_2_2);
  double r_286_symmetric3_rotate_1_2 = (r_280_sres_first_4 + r_282_const_r_0);
  double r_286_symmetric3_rotate_2_0 = (r_279_sres_first_3 - r_282_const_r_1);
  double r_286_symmetric3_rotate_2_1 = (r_280_sres_first_4 + r_282_const_r_0);
  double r_286_symmetric3_rotate_2_2 = (r_281_sres_first_5 + inertia_3_2_2);
  double data_oinertias_trans_3_0 = r_273_new_translation_0;
  double data_oinertias_trans_3_1 = r_273_new_translation_1;
  double data_oinertias_trans_3_2 = r_273_new_translation_2;
  double data_oinertias_rot_3_0_0 = r_286_symmetric3_rotate_0_0;
  double data_oinertias_rot_3_0_1 = r_286_symmetric3_rotate_0_1;
  double data_oinertias_rot_3_0_2 = r_286_symmetric3_rotate_0_2;
  double data_oinertias_rot_3_1_0 = r_286_symmetric3_rotate_1_0;
  double data_oinertias_rot_3_1_1 = r_286_symmetric3_rotate_1_1;
  double data_oinertias_rot_3_1_2 = r_286_symmetric3_rotate_1_2;
  double data_oinertias_rot_3_2_0 = r_286_symmetric3_rotate_2_0;
  double data_oinertias_rot_3_2_1 = r_286_symmetric3_rotate_2_1;
  double data_oinertias_rot_3_2_2 = r_286_symmetric3_rotate_2_2;
  double motion_act_linear_3_0 = (((oMi_rotation_3_0_0 * act_inv_linear_3_0) + (oMi_rotation_3_0_1 * act_inv_linear_3_1)) + (oMi_rotation_3_0_2 * act_inv_linear_3_2));
  double motion_act_linear_3_1 = (((oMi_rotation_3_1_0 * act_inv_linear_3_0) + (oMi_rotation_3_1_1 * act_inv_linear_3_1)) + (oMi_rotation_3_1_2 * act_inv_linear_3_2));
  double motion_act_linear_3_2 = (((oMi_rotation_3_2_0 * act_inv_linear_3_0) + (oMi_rotation_3_2_1 * act_inv_linear_3_1)) + (oMi_rotation_3_2_2 * act_inv_linear_3_2));
  double motion_act_angular_3_0 = (((oMi_rotation_3_0_0 * act_inv_angular_3_0) + (oMi_rotation_3_0_1 * act_inv_angular_3_1)) + (oMi_rotation_3_0_2 * act_inv_angular_3_2));
  double motion_act_angular_3_1 = (((oMi_rotation_3_1_0 * act_inv_angular_3_0) + (oMi_rotation_3_1_1 * act_inv_angular_3_1)) + (oMi_rotation_3_1_2 * act_inv_angular_3_2));
  double motion_act_angular_3_2 = (((oMi_rotation_3_2_0 * act_inv_angular_3_0) + (oMi_rotation_3_2_1 * act_inv_angular_3_1)) + (oMi_rotation_3_2_2 * act_inv_angular_3_2));
  double motion_act_cross_3_0 = ((oMi_translation_3_1 * motion_act_angular_3_2) - (oMi_translation_3_2 * motion_act_angular_3_1));
  double motion_act_cross_3_1 = ((oMi_translation_3_2 * motion_act_angular_3_0) - (oMi_translation_3_0 * motion_act_angular_3_2));
  double motion_act_cross_3_2 = ((oMi_translation_3_0 * motion_act_angular_3_1) - (oMi_translation_3_1 * motion_act_angular_3_0));
  double motion_act_linear2_3_0 = (motion_act_linear_3_0 + motion_act_cross_3_0);
  double motion_act_linear2_3_1 = (motion_act_linear_3_1 + motion_act_cross_3_1);
  double motion_act_linear2_3_2 = (motion_act_linear_3_2 + motion_act_cross_3_2);
  double act_motion_res_3_0 = motion_act_linear2_3_0;
  double act_motion_res_3_1 = motion_act_linear2_3_1;
  double act_motion_res_3_2 = motion_act_linear2_3_2;
  double act_motion_res_3_3 = motion_act_angular_3_0;
  double act_motion_res_3_4 = motion_act_angular_3_1;
  double act_motion_res_3_5 = motion_act_angular_3_2;
  double ov_3_0 = act_motion_res_3_0;
  double ov_3_1 = act_motion_res_3_1;
  double ov_3_2 = act_motion_res_3_2;
  double ov_3_3 = act_motion_res_3_3;
  double ov_3_4 = act_motion_res_3_4;
  double ov_3_5 = act_motion_res_3_5;
  double t_linear_3_0 = a_final_3_0;
  double t_linear_3_1 = a_final_3_1;
  double t_linear_3_2 = a_final_3_2;
  double t_angular_3_0 = a_final_3_3;
  double t_angular_3_1 = a_final_3_4;
  double t_angular_3_2 = a_final_3_5;
  double r_287_motion_act_linear_3_0 = (((oMi_rotation_3_0_0 * t_linear_3_0) + (oMi_rotation_3_0_1 * t_linear_3_1)) + (oMi_rotation_3_0_2 * t_linear_3_2));
  double r_287_motion_act_linear_3_1 = (((oMi_rotation_3_1_0 * t_linear_3_0) + (oMi_rotation_3_1_1 * t_linear_3_1)) + (oMi_rotation_3_1_2 * t_linear_3_2));
  double r_287_motion_act_linear_3_2 = (((oMi_rotation_3_2_0 * t_linear_3_0) + (oMi_rotation_3_2_1 * t_linear_3_1)) + (oMi_rotation_3_2_2 * t_linear_3_2));
  double r_288_motion_act_angular_3_0 = (((oMi_rotation_3_0_0 * t_angular_3_0) + (oMi_rotation_3_0_1 * t_angular_3_1)) + (oMi_rotation_3_0_2 * t_angular_3_2));
  double r_288_motion_act_angular_3_1 = (((oMi_rotation_3_1_0 * t_angular_3_0) + (oMi_rotation_3_1_1 * t_angular_3_1)) + (oMi_rotation_3_1_2 * t_angular_3_2));
  double r_288_motion_act_angular_3_2 = (((oMi_rotation_3_2_0 * t_angular_3_0) + (oMi_rotation_3_2_1 * t_angular_3_1)) + (oMi_rotation_3_2_2 * t_angular_3_2));
  double r_289_motion_act_cross_3_0 = ((oMi_translation_3_1 * r_288_motion_act_angular_3_2) - (oMi_translation_3_2 * r_288_motion_act_angular_3_1));
  double r_289_motion_act_cross_3_1 = ((oMi_translation_3_2 * r_288_motion_act_angular_3_0) - (oMi_translation_3_0 * r_288_motion_act_angular_3_2));
  double r_289_motion_act_cross_3_2 = ((oMi_translation_3_0 * r_288_motion_act_angular_3_1) - (oMi_translation_3_1 * r_288_motion_act_angular_3_0));
  double r_290_motion_act_linear2_3_0 = (r_287_motion_act_linear_3_0 + r_289_motion_act_cross_3_0);
  double r_290_motion_act_linear2_3_1 = (r_287_motion_act_linear_3_1 + r_289_motion_act_cross_3_1);
  double r_290_motion_act_linear2_3_2 = (r_287_motion_act_linear_3_2 + r_289_motion_act_cross_3_2);
  double r_291_act_motion_res_3_0 = r_290_motion_act_linear2_3_0;
  double r_291_act_motion_res_3_1 = r_290_motion_act_linear2_3_1;
  double r_291_act_motion_res_3_2 = r_290_motion_act_linear2_3_2;
  double r_291_act_motion_res_3_3 = r_288_motion_act_angular_3_0;
  double r_291_act_motion_res_3_4 = r_288_motion_act_angular_3_1;
  double r_291_act_motion_res_3_5 = r_288_motion_act_angular_3_2;
  double oa_3_0 = r_291_act_motion_res_3_0;
  double oa_3_1 = r_291_act_motion_res_3_1;
  double oa_3_2 = r_291_act_motion_res_3_2;
  double oa_3_3 = r_291_act_motion_res_3_3;
  double oa_3_4 = r_291_act_motion_res_3_4;
  double oa_3_5 = r_291_act_motion_res_3_5;
  double r_292_model_gravity_0 = 0;
  double r_292_model_gravity_1 = 0;
  double r_292_model_gravity_2 = -9.81;
  double r_292_model_gravity_3 = 0;
  double r_292_model_gravity_4 = 0;
  double r_292_model_gravity_5 = 0;
  double oa_gf_3_0 = (oa_3_0 - r_292_model_gravity_0);
  double oa_gf_3_1 = (oa_3_1 - r_292_model_gravity_1);
  double oa_gf_3_2 = (oa_3_2 - r_292_model_gravity_2);
  double oa_gf_3_3 = (oa_3_3 - r_292_model_gravity_3);
  double oa_gf_3_4 = (oa_3_4 - r_292_model_gravity_4);
  double oa_gf_3_5 = (oa_3_5 - r_292_model_gravity_5);
  double ov_linear_3_0 = ov_3_0;
  double ov_linear_3_1 = ov_3_1;
  double ov_linear_3_2 = ov_3_2;
  double ov_angular_3_0 = ov_3_3;
  double ov_angular_3_1 = ov_3_4;
  double ov_angular_3_2 = ov_3_5;
  double data_oh_linear_temp1_3_0 = ((r_273_new_translation_1 * ov_angular_3_2) - (r_273_new_translation_2 * ov_angular_3_1));
  double data_oh_linear_temp1_3_1 = ((r_273_new_translation_2 * ov_angular_3_0) - (r_273_new_translation_0 * ov_angular_3_2));
  double data_oh_linear_temp1_3_2 = ((r_273_new_translation_0 * ov_angular_3_1) - (r_273_new_translation_1 * ov_angular_3_0));
  double data_oh_linear_temp2_3_0 = (ov_linear_3_0 - data_oh_linear_temp1_3_0);
  double data_oh_linear_temp2_3_1 = (ov_linear_3_1 - data_oh_linear_temp1_3_1);
  double data_oh_linear_temp2_3_2 = (ov_linear_3_2 - data_oh_linear_temp1_3_2);
  double data_oh_linear_3_0 = (masses_3 * data_oh_linear_temp2_3_0);
  double data_oh_linear_3_1 = (masses_3 * data_oh_linear_temp2_3_1);
  double data_oh_linear_3_2 = (masses_3 * data_oh_linear_temp2_3_2);
  double r_293_ = (r_286_symmetric3_rotate_0_0 * ov_angular_3_0);
  double r_294_ = (r_286_symmetric3_rotate_0_1 * ov_angular_3_1);
  double r_295_ = (r_286_symmetric3_rotate_0_2 * ov_angular_3_2);
  double r_296_ = (r_286_symmetric3_rotate_0_1 * ov_angular_3_0);
  double r_297_ = (r_286_symmetric3_rotate_1_1 * ov_angular_3_1);
  double r_298_ = (r_286_symmetric3_rotate_1_2 * ov_angular_3_2);
  double r_299_ = (r_286_symmetric3_rotate_0_2 * ov_angular_3_0);
  double r_300_ = (r_286_symmetric3_rotate_1_2 * ov_angular_3_1);
  double r_301_ = (r_286_symmetric3_rotate_2_2 * ov_angular_3_2);
  double rhsMult1_temp_3 = (r_293_ + r_294_);
  double rhsMult1_3 = (rhsMult1_temp_3 + r_295_);
  double rhsMult2_temp_3 = (r_296_ + r_297_);
  double rhsMult2_3 = (rhsMult2_temp_3 + r_298_);
  double rhsMult3_temp_3 = (r_299_ + r_300_);
  double rhsMult3_3 = (rhsMult3_temp_3 + r_301_);
  double rhsMult_3_0 = rhsMult1_3;
  double rhsMult_3_1 = rhsMult2_3;
  double rhsMult_3_2 = rhsMult3_3;
  double data_oh_angular_temp2_3_0 = ((r_273_new_translation_1 * data_oh_linear_3_2) - (r_273_new_translation_2 * data_oh_linear_3_1));
  double data_oh_angular_temp2_3_1 = ((r_273_new_translation_2 * data_oh_linear_3_0) - (r_273_new_translation_0 * data_oh_linear_3_2));
  double data_oh_angular_temp2_3_2 = ((r_273_new_translation_0 * data_oh_linear_3_1) - (r_273_new_translation_1 * data_oh_linear_3_0));
  double data_oh_angular_3_0 = (rhsMult_3_0 + data_oh_angular_temp2_3_0);
  double data_oh_angular_3_1 = (rhsMult_3_1 + data_oh_angular_temp2_3_1);
  double data_oh_angular_3_2 = (rhsMult_3_2 + data_oh_angular_temp2_3_2);
  double all_oh_3_0 = data_oh_linear_3_0;
  double all_oh_3_1 = data_oh_linear_3_1;
  double all_oh_3_2 = data_oh_linear_3_2;
  double all_oh_3_3 = data_oh_angular_3_0;
  double all_oh_3_4 = data_oh_angular_3_1;
  double all_oh_3_5 = data_oh_angular_3_2;
  double oa_gf_linear_3_0 = oa_gf_3_0;
  double oa_gf_linear_3_1 = oa_gf_3_1;
  double oa_gf_linear_3_2 = oa_gf_3_2;
  double oa_gf_angular_3_0 = oa_gf_3_3;
  double oa_gf_angular_3_1 = oa_gf_3_4;
  double oa_gf_angular_3_2 = oa_gf_3_5;
  double data_of_linear_temp1_3_0 = ((r_273_new_translation_1 * oa_gf_angular_3_2) - (r_273_new_translation_2 * oa_gf_angular_3_1));
  double data_of_linear_temp1_3_1 = ((r_273_new_translation_2 * oa_gf_angular_3_0) - (r_273_new_translation_0 * oa_gf_angular_3_2));
  double data_of_linear_temp1_3_2 = ((r_273_new_translation_0 * oa_gf_angular_3_1) - (r_273_new_translation_1 * oa_gf_angular_3_0));
  double data_of_linear_temp2_3_0 = (oa_gf_linear_3_0 - data_of_linear_temp1_3_0);
  double data_of_linear_temp2_3_1 = (oa_gf_linear_3_1 - data_of_linear_temp1_3_1);
  double data_of_linear_temp2_3_2 = (oa_gf_linear_3_2 - data_of_linear_temp1_3_2);
  double data_of_linear_temp3_3_0 = (masses_3 * data_of_linear_temp2_3_0);
  double data_of_linear_temp3_3_1 = (masses_3 * data_of_linear_temp2_3_1);
  double data_of_linear_temp3_3_2 = (masses_3 * data_of_linear_temp2_3_2);
  double r_302_ = (r_286_symmetric3_rotate_0_0 * oa_gf_angular_3_0);
  double r_303_ = (r_286_symmetric3_rotate_0_1 * oa_gf_angular_3_1);
  double r_304_ = (r_286_symmetric3_rotate_0_2 * oa_gf_angular_3_2);
  double r_305_ = (r_286_symmetric3_rotate_0_1 * oa_gf_angular_3_0);
  double r_306_ = (r_286_symmetric3_rotate_1_1 * oa_gf_angular_3_1);
  double r_307_ = (r_286_symmetric3_rotate_1_2 * oa_gf_angular_3_2);
  double r_308_ = (r_286_symmetric3_rotate_0_2 * oa_gf_angular_3_0);
  double r_309_ = (r_286_symmetric3_rotate_1_2 * oa_gf_angular_3_1);
  double r_310_ = (r_286_symmetric3_rotate_2_2 * oa_gf_angular_3_2);
  double r_311_rhsMult1_temp_3 = (r_302_ + r_303_);
  double r_312_rhsMult1_3 = (r_311_rhsMult1_temp_3 + r_304_);
  double r_313_rhsMult2_temp_3 = (r_305_ + r_306_);
  double r_314_rhsMult2_3 = (r_313_rhsMult2_temp_3 + r_307_);
  double r_315_rhsMult3_temp_3 = (r_308_ + r_309_);
  double r_316_rhsMult3_3 = (r_315_rhsMult3_temp_3 + r_310_);
  double r_317_rhsMult_3_0 = r_312_rhsMult1_3;
  double r_317_rhsMult_3_1 = r_314_rhsMult2_3;
  double r_317_rhsMult_3_2 = r_316_rhsMult3_3;
  double data_of_angular_temp2_3_0 = ((r_273_new_translation_1 * data_of_linear_temp3_3_2) - (r_273_new_translation_2 * data_of_linear_temp3_3_1));
  double data_of_angular_temp2_3_1 = ((r_273_new_translation_2 * data_of_linear_temp3_3_0) - (r_273_new_translation_0 * data_of_linear_temp3_3_2));
  double data_of_angular_temp2_3_2 = ((r_273_new_translation_0 * data_of_linear_temp3_3_1) - (r_273_new_translation_1 * data_of_linear_temp3_3_0));
  double data_of_angular_temp3_3_0 = (r_317_rhsMult_3_0 + data_of_angular_temp2_3_0);
  double data_of_angular_temp3_3_1 = (r_317_rhsMult_3_1 + data_of_angular_temp2_3_1);
  double data_of_angular_temp3_3_2 = (r_317_rhsMult_3_2 + data_of_angular_temp2_3_2);
  double data_of_linear_temp4_3_0 = ((ov_angular_3_1 * data_oh_linear_3_2) - (ov_angular_3_2 * data_oh_linear_3_1));
  double data_of_linear_temp4_3_1 = ((ov_angular_3_2 * data_oh_linear_3_0) - (ov_angular_3_0 * data_oh_linear_3_2));
  double data_of_linear_temp4_3_2 = ((ov_angular_3_0 * data_oh_linear_3_1) - (ov_angular_3_1 * data_oh_linear_3_0));
  double data_of_angular_temp4_3_0 = ((ov_angular_3_1 * data_oh_angular_3_2) - (ov_angular_3_2 * data_oh_angular_3_1));
  double data_of_angular_temp4_3_1 = ((ov_angular_3_2 * data_oh_angular_3_0) - (ov_angular_3_0 * data_oh_angular_3_2));
  double data_of_angular_temp4_3_2 = ((ov_angular_3_0 * data_oh_angular_3_1) - (ov_angular_3_1 * data_oh_angular_3_0));
  double data_of_angular_temp5_3_0 = ((ov_linear_3_1 * data_oh_linear_3_2) - (ov_linear_3_2 * data_oh_linear_3_1));
  double data_of_angular_temp5_3_1 = ((ov_linear_3_2 * data_oh_linear_3_0) - (ov_linear_3_0 * data_oh_linear_3_2));
  double data_of_angular_temp5_3_2 = ((ov_linear_3_0 * data_oh_linear_3_1) - (ov_linear_3_1 * data_oh_linear_3_0));
  double data_of_angular_temp6_3_0 = (data_of_angular_temp4_3_0 + data_of_angular_temp5_3_0);
  double data_of_angular_temp6_3_1 = (data_of_angular_temp4_3_1 + data_of_angular_temp5_3_1);
  double data_of_angular_temp6_3_2 = (data_of_angular_temp4_3_2 + data_of_angular_temp5_3_2);
  double data_of_linear_3_0 = (data_of_linear_temp3_3_0 + data_of_linear_temp4_3_0);
  double data_of_linear_3_1 = (data_of_linear_temp3_3_1 + data_of_linear_temp4_3_1);
  double data_of_linear_3_2 = (data_of_linear_temp3_3_2 + data_of_linear_temp4_3_2);
  double data_of_angular_3_0 = (data_of_angular_temp3_3_0 + data_of_angular_temp6_3_0);
  double data_of_angular_3_1 = (data_of_angular_temp3_3_1 + data_of_angular_temp6_3_1);
  double data_of_angular_3_2 = (data_of_angular_temp3_3_2 + data_of_angular_temp6_3_2);
  double all_of_3_0 = data_of_linear_3_0;
  double all_of_3_1 = data_of_linear_3_1;
  double all_of_3_2 = data_of_linear_3_2;
  double all_of_3_3 = data_of_angular_3_0;
  double all_of_3_4 = data_of_angular_3_1;
  double all_of_3_5 = data_of_angular_3_2;
  double act_constraint_rotation_col_3_0 = oMi_rotation_3_0_2;
  double act_constraint_rotation_col_3_1 = oMi_rotation_3_1_2;
  double act_constraint_rotation_col_3_2 = oMi_rotation_3_2_2;
  double act_constraint_linear_3_0 = ((oMi_translation_3_1 * act_constraint_rotation_col_3_2) - (oMi_translation_3_2 * act_constraint_rotation_col_3_1));
  double act_constraint_linear_3_1 = ((oMi_translation_3_2 * act_constraint_rotation_col_3_0) - (oMi_translation_3_0 * act_constraint_rotation_col_3_2));
  double act_constraint_linear_3_2 = ((oMi_translation_3_0 * act_constraint_rotation_col_3_1) - (oMi_translation_3_1 * act_constraint_rotation_col_3_0));
  double j_cols_3_0 = act_constraint_linear_3_0;
  double j_cols_3_1 = act_constraint_linear_3_1;
  double j_cols_3_2 = act_constraint_linear_3_2;
  double j_cols_3_3 = act_constraint_rotation_col_3_0;
  double j_cols_3_4 = act_constraint_rotation_col_3_1;
  double j_cols_3_5 = act_constraint_rotation_col_3_2;
  double mout_linear_cross_angular_3_0 = ((ov_linear_3_1 * act_constraint_rotation_col_3_2) - (ov_linear_3_2 * act_constraint_rotation_col_3_1));
  double mout_linear_cross_angular_3_1 = ((ov_linear_3_2 * act_constraint_rotation_col_3_0) - (ov_linear_3_0 * act_constraint_rotation_col_3_2));
  double mout_linear_cross_angular_3_2 = ((ov_linear_3_0 * act_constraint_rotation_col_3_1) - (ov_linear_3_1 * act_constraint_rotation_col_3_0));
  double mout_angular_cross_linear_3_0 = ((ov_angular_3_1 * act_constraint_linear_3_2) - (ov_angular_3_2 * act_constraint_linear_3_1));
  double mout_angular_cross_linear_3_1 = ((ov_angular_3_2 * act_constraint_linear_3_0) - (ov_angular_3_0 * act_constraint_linear_3_2));
  double mout_angular_cross_linear_3_2 = ((ov_angular_3_0 * act_constraint_linear_3_1) - (ov_angular_3_1 * act_constraint_linear_3_0));
  double mout_linear_3_0 = (mout_linear_cross_angular_3_0 + mout_angular_cross_linear_3_0);
  double mout_linear_3_1 = (mout_linear_cross_angular_3_1 + mout_angular_cross_linear_3_1);
  double mout_linear_3_2 = (mout_linear_cross_angular_3_2 + mout_angular_cross_linear_3_2);
  double mout_angular_3_0 = ((ov_angular_3_1 * act_constraint_rotation_col_3_2) - (ov_angular_3_2 * act_constraint_rotation_col_3_1));
  double mout_angular_3_1 = ((ov_angular_3_2 * act_constraint_rotation_col_3_0) - (ov_angular_3_0 * act_constraint_rotation_col_3_2));
  double mout_angular_3_2 = ((ov_angular_3_0 * act_constraint_rotation_col_3_1) - (ov_angular_3_1 * act_constraint_rotation_col_3_0));
  double dj_cols_3_0 = mout_linear_3_0;
  double dj_cols_3_1 = mout_linear_3_1;
  double dj_cols_3_2 = mout_linear_3_2;
  double dj_cols_3_3 = mout_angular_3_0;
  double dj_cols_3_4 = mout_angular_3_1;
  double dj_cols_3_5 = mout_angular_3_2;
  double oa_gf_parent_linear_3_0 = oa_gf_2_0;
  double oa_gf_parent_linear_3_1 = oa_gf_2_1;
  double oa_gf_parent_linear_3_2 = oa_gf_2_2;
  double oa_gf_parent_angular_3_0 = oa_gf_2_3;
  double oa_gf_parent_angular_3_1 = oa_gf_2_4;
  double oa_gf_parent_angular_3_2 = oa_gf_2_5;
  double r_318_mout_linear_cross_angular_3_0 = ((oa_gf_parent_linear_3_1 * act_constraint_rotation_col_3_2) - (oa_gf_parent_linear_3_2 * act_constraint_rotation_col_3_1));
  double r_318_mout_linear_cross_angular_3_1 = ((oa_gf_parent_linear_3_2 * act_constraint_rotation_col_3_0) - (oa_gf_parent_linear_3_0 * act_constraint_rotation_col_3_2));
  double r_318_mout_linear_cross_angular_3_2 = ((oa_gf_parent_linear_3_0 * act_constraint_rotation_col_3_1) - (oa_gf_parent_linear_3_1 * act_constraint_rotation_col_3_0));
  double r_319_mout_angular_cross_linear_3_0 = ((oa_gf_parent_angular_3_1 * act_constraint_linear_3_2) - (oa_gf_parent_angular_3_2 * act_constraint_linear_3_1));
  double r_319_mout_angular_cross_linear_3_1 = ((oa_gf_parent_angular_3_2 * act_constraint_linear_3_0) - (oa_gf_parent_angular_3_0 * act_constraint_linear_3_2));
  double r_319_mout_angular_cross_linear_3_2 = ((oa_gf_parent_angular_3_0 * act_constraint_linear_3_1) - (oa_gf_parent_angular_3_1 * act_constraint_linear_3_0));
  double r_320_mout_linear_3_0 = (r_318_mout_linear_cross_angular_3_0 + r_319_mout_angular_cross_linear_3_0);
  double r_320_mout_linear_3_1 = (r_318_mout_linear_cross_angular_3_1 + r_319_mout_angular_cross_linear_3_1);
  double r_320_mout_linear_3_2 = (r_318_mout_linear_cross_angular_3_2 + r_319_mout_angular_cross_linear_3_2);
  double r_321_mout_angular_3_0 = ((oa_gf_parent_angular_3_1 * act_constraint_rotation_col_3_2) - (oa_gf_parent_angular_3_2 * act_constraint_rotation_col_3_1));
  double r_321_mout_angular_3_1 = ((oa_gf_parent_angular_3_2 * act_constraint_rotation_col_3_0) - (oa_gf_parent_angular_3_0 * act_constraint_rotation_col_3_2));
  double r_321_mout_angular_3_2 = ((oa_gf_parent_angular_3_0 * act_constraint_rotation_col_3_1) - (oa_gf_parent_angular_3_1 * act_constraint_rotation_col_3_0));
  double dAdv_cols_linear_3_0 = mout_linear_3_0;
  double dAdv_cols_linear_3_1 = mout_linear_3_1;
  double dAdv_cols_linear_3_2 = mout_linear_3_2;
  double dAdv_cols_angular_3_0 = mout_angular_3_0;
  double dAdv_cols_angular_3_1 = mout_angular_3_1;
  double dAdv_cols_angular_3_2 = mout_angular_3_2;
  double data_ov_parent_linear_3_0 = ov_2_0;
  double data_ov_parent_linear_3_1 = ov_2_1;
  double data_ov_parent_linear_3_2 = ov_2_2;
  double data_ov_parent_angular_3_0 = ov_2_3;
  double data_ov_parent_angular_3_1 = ov_2_4;
  double data_ov_parent_angular_3_2 = ov_2_5;
  double r_322_mout_linear_cross_angular_3_0 = ((data_ov_parent_linear_3_1 * act_constraint_rotation_col_3_2) - (data_ov_parent_linear_3_2 * act_constraint_rotation_col_3_1));
  double r_322_mout_linear_cross_angular_3_1 = ((data_ov_parent_linear_3_2 * act_constraint_rotation_col_3_0) - (data_ov_parent_linear_3_0 * act_constraint_rotation_col_3_2));
  double r_322_mout_linear_cross_angular_3_2 = ((data_ov_parent_linear_3_0 * act_constraint_rotation_col_3_1) - (data_ov_parent_linear_3_1 * act_constraint_rotation_col_3_0));
  double r_323_mout_angular_cross_linear_3_0 = ((data_ov_parent_angular_3_1 * act_constraint_linear_3_2) - (data_ov_parent_angular_3_2 * act_constraint_linear_3_1));
  double r_323_mout_angular_cross_linear_3_1 = ((data_ov_parent_angular_3_2 * act_constraint_linear_3_0) - (data_ov_parent_angular_3_0 * act_constraint_linear_3_2));
  double r_323_mout_angular_cross_linear_3_2 = ((data_ov_parent_angular_3_0 * act_constraint_linear_3_1) - (data_ov_parent_angular_3_1 * act_constraint_linear_3_0));
  double r_324_mout_linear_3_0 = (r_322_mout_linear_cross_angular_3_0 + r_323_mout_angular_cross_linear_3_0);
  double r_324_mout_linear_3_1 = (r_322_mout_linear_cross_angular_3_1 + r_323_mout_angular_cross_linear_3_1);
  double r_324_mout_linear_3_2 = (r_322_mout_linear_cross_angular_3_2 + r_323_mout_angular_cross_linear_3_2);
  double r_325_mout_angular_3_0 = ((data_ov_parent_angular_3_1 * act_constraint_rotation_col_3_2) - (data_ov_parent_angular_3_2 * act_constraint_rotation_col_3_1));
  double r_325_mout_angular_3_1 = ((data_ov_parent_angular_3_2 * act_constraint_rotation_col_3_0) - (data_ov_parent_angular_3_0 * act_constraint_rotation_col_3_2));
  double r_325_mout_angular_3_2 = ((data_ov_parent_angular_3_0 * act_constraint_rotation_col_3_1) - (data_ov_parent_angular_3_1 * act_constraint_rotation_col_3_0));
  double r_326_data_ov_parent_linear_3_0 = ov_2_0;
  double r_326_data_ov_parent_linear_3_1 = ov_2_1;
  double r_326_data_ov_parent_linear_3_2 = ov_2_2;
  double r_327_data_ov_parent_angular_3_0 = ov_2_3;
  double r_327_data_ov_parent_angular_3_1 = ov_2_4;
  double r_327_data_ov_parent_angular_3_2 = ov_2_5;
  double r_328_mout_linear_cross_angular_3_0 = ((r_326_data_ov_parent_linear_3_1 * r_325_mout_angular_3_2) - (r_326_data_ov_parent_linear_3_2 * r_325_mout_angular_3_1));
  double r_328_mout_linear_cross_angular_3_1 = ((r_326_data_ov_parent_linear_3_2 * r_325_mout_angular_3_0) - (r_326_data_ov_parent_linear_3_0 * r_325_mout_angular_3_2));
  double r_328_mout_linear_cross_angular_3_2 = ((r_326_data_ov_parent_linear_3_0 * r_325_mout_angular_3_1) - (r_326_data_ov_parent_linear_3_1 * r_325_mout_angular_3_0));
  double r_329_mout_angular_cross_linear_3_0 = ((r_327_data_ov_parent_angular_3_1 * r_324_mout_linear_3_2) - (r_327_data_ov_parent_angular_3_2 * r_324_mout_linear_3_1));
  double r_329_mout_angular_cross_linear_3_1 = ((r_327_data_ov_parent_angular_3_2 * r_324_mout_linear_3_0) - (r_327_data_ov_parent_angular_3_0 * r_324_mout_linear_3_2));
  double r_329_mout_angular_cross_linear_3_2 = ((r_327_data_ov_parent_angular_3_0 * r_324_mout_linear_3_1) - (r_327_data_ov_parent_angular_3_1 * r_324_mout_linear_3_0));
  double r_330_mout_linear_3_0 = (r_328_mout_linear_cross_angular_3_0 + r_329_mout_angular_cross_linear_3_0);
  double r_330_mout_linear_3_1 = (r_328_mout_linear_cross_angular_3_1 + r_329_mout_angular_cross_linear_3_1);
  double r_330_mout_linear_3_2 = (r_328_mout_linear_cross_angular_3_2 + r_329_mout_angular_cross_linear_3_2);
  double r_331_mout_angular_3_0 = ((r_327_data_ov_parent_angular_3_1 * r_325_mout_angular_3_2) - (r_327_data_ov_parent_angular_3_2 * r_325_mout_angular_3_1));
  double r_331_mout_angular_3_1 = ((r_327_data_ov_parent_angular_3_2 * r_325_mout_angular_3_0) - (r_327_data_ov_parent_angular_3_0 * r_325_mout_angular_3_2));
  double r_331_mout_angular_3_2 = ((r_327_data_ov_parent_angular_3_0 * r_325_mout_angular_3_1) - (r_327_data_ov_parent_angular_3_1 * r_325_mout_angular_3_0));
  double dAdq_cols_linear_3_0 = (r_320_mout_linear_3_0 + r_330_mout_linear_3_0);
  double dAdq_cols_linear_3_1 = (r_320_mout_linear_3_1 + r_330_mout_linear_3_1);
  double dAdq_cols_linear_3_2 = (r_320_mout_linear_3_2 + r_330_mout_linear_3_2);
  double dAdq_cols_angular_3_0 = (r_321_mout_angular_3_0 + r_331_mout_angular_3_0);
  double dAdq_cols_angular_3_1 = (r_321_mout_angular_3_1 + r_331_mout_angular_3_1);
  double dAdq_cols_angular_3_2 = (r_321_mout_angular_3_2 + r_331_mout_angular_3_2);
  double dAdv_cols_linear_updated_3_0 = (dAdv_cols_linear_3_0 + r_324_mout_linear_3_0);
  double dAdv_cols_linear_updated_3_1 = (dAdv_cols_linear_3_1 + r_324_mout_linear_3_1);
  double dAdv_cols_linear_updated_3_2 = (dAdv_cols_linear_3_2 + r_324_mout_linear_3_2);
  double dAdv_cols_angular_updated_3_0 = (dAdv_cols_angular_3_0 + r_325_mout_angular_3_0);
  double dAdv_cols_angular_updated_3_1 = (dAdv_cols_angular_3_1 + r_325_mout_angular_3_1);
  double dAdv_cols_angular_updated_3_2 = (dAdv_cols_angular_3_2 + r_325_mout_angular_3_2);
  double dAdq_cols_3_0 = dAdq_cols_linear_3_0;
  double dAdq_cols_3_1 = dAdq_cols_linear_3_1;
  double dAdq_cols_3_2 = dAdq_cols_linear_3_2;
  double dAdq_cols_3_3 = dAdq_cols_angular_3_0;
  double dAdq_cols_3_4 = dAdq_cols_angular_3_1;
  double dAdq_cols_3_5 = dAdq_cols_angular_3_2;
  double dAdv_cols_3_0 = dAdv_cols_linear_updated_3_0;
  double dAdv_cols_3_1 = dAdv_cols_linear_updated_3_1;
  double dAdv_cols_3_2 = dAdv_cols_linear_updated_3_2;
  double dAdv_cols_3_3 = dAdv_cols_angular_updated_3_0;
  double dAdv_cols_3_4 = dAdv_cols_angular_updated_3_1;
  double dAdv_cols_3_5 = dAdv_cols_angular_updated_3_2;
  double dVdq_cols_3_0 = r_324_mout_linear_3_0;
  double dVdq_cols_3_1 = r_324_mout_linear_3_1;
  double dVdq_cols_3_2 = r_324_mout_linear_3_2;
  double dVdq_cols_3_3 = r_325_mout_angular_3_0;
  double dVdq_cols_3_4 = r_325_mout_angular_3_1;
  double dVdq_cols_3_5 = r_325_mout_angular_3_2;
  double r_332_mv_linear_0 = (masses_3 * ov_linear_3_0);
  double r_332_mv_linear_1 = (masses_3 * ov_linear_3_1);
  double r_332_mv_linear_2 = (masses_3 * ov_linear_3_2);
  double r_333_mv_angular_0 = (masses_3 * ov_angular_3_0);
  double r_333_mv_angular_1 = (masses_3 * ov_angular_3_1);
  double r_333_mv_angular_2 = (masses_3 * ov_angular_3_2);
  double r_334_skew_vec3d_0_0 = 0;
  double r_334_skew_vec3d_0_1 = -(r_332_mv_linear_2);
  double r_334_skew_vec3d_0_2 = r_332_mv_linear_1;
  double r_334_skew_vec3d_1_0 = r_332_mv_linear_2;
  double r_334_skew_vec3d_1_1 = 0;
  double r_334_skew_vec3d_1_2 = -(r_332_mv_linear_0);
  double r_334_skew_vec3d_2_0 = -(r_332_mv_linear_1);
  double r_334_skew_vec3d_2_1 = r_332_mv_linear_0;
  double r_334_skew_vec3d_2_2 = 0;
  double r_335_skew_square_c1_0_0 = (r_333_mv_angular_0 * r_273_new_translation_0);
  double r_335_skew_square_c1_0_1 = (r_333_mv_angular_1 * r_273_new_translation_0);
  double r_335_skew_square_c1_0_2 = (r_333_mv_angular_2 * r_273_new_translation_0);
  double r_335_skew_square_c1_1_0 = (r_333_mv_angular_0 * r_273_new_translation_1);
  double r_335_skew_square_c1_1_1 = (r_333_mv_angular_1 * r_273_new_translation_1);
  double r_335_skew_square_c1_1_2 = (r_333_mv_angular_2 * r_273_new_translation_1);
  double r_335_skew_square_c1_2_0 = (r_333_mv_angular_0 * r_273_new_translation_2);
  double r_335_skew_square_c1_2_1 = (r_333_mv_angular_1 * r_273_new_translation_2);
  double r_335_skew_square_c1_2_2 = (r_333_mv_angular_2 * r_273_new_translation_2);
  double r_336_skew_square_udotv = (((r_273_new_translation_0 * r_333_mv_angular_0) + (r_273_new_translation_1 * r_333_mv_angular_1)) + (r_273_new_translation_2 * r_333_mv_angular_2));
  double r_337_skew_square_c2_0_0 = (r_335_skew_square_c1_0_0 - r_336_skew_square_udotv);
  double r_337_skew_square_c2_0_1 = r_335_skew_square_c1_0_1;
  double r_337_skew_square_c2_0_2 = r_335_skew_square_c1_0_2;
  double r_337_skew_square_c2_1_0 = r_335_skew_square_c1_1_0;
  double r_337_skew_square_c2_1_1 = (r_335_skew_square_c1_1_1 - r_336_skew_square_udotv);
  double r_337_skew_square_c2_1_2 = r_335_skew_square_c1_1_2;
  double r_337_skew_square_c2_2_0 = r_335_skew_square_c1_2_0;
  double r_337_skew_square_c2_2_1 = r_335_skew_square_c1_2_1;
  double r_337_skew_square_c2_2_2 = (r_335_skew_square_c1_2_2 - r_336_skew_square_udotv);
  double r_338_skew_square_c1_0_0 = (r_273_new_translation_0 * r_333_mv_angular_0);
  double r_338_skew_square_c1_0_1 = (r_273_new_translation_1 * r_333_mv_angular_0);
  double r_338_skew_square_c1_0_2 = (r_273_new_translation_2 * r_333_mv_angular_0);
  double r_338_skew_square_c1_1_0 = (r_273_new_translation_0 * r_333_mv_angular_1);
  double r_338_skew_square_c1_1_1 = (r_273_new_translation_1 * r_333_mv_angular_1);
  double r_338_skew_square_c1_1_2 = (r_273_new_translation_2 * r_333_mv_angular_1);
  double r_338_skew_square_c1_2_0 = (r_273_new_translation_0 * r_333_mv_angular_2);
  double r_338_skew_square_c1_2_1 = (r_273_new_translation_1 * r_333_mv_angular_2);
  double r_338_skew_square_c1_2_2 = (r_273_new_translation_2 * r_333_mv_angular_2);
  double r_339_skew_square_udotv = (((r_333_mv_angular_0 * r_273_new_translation_0) + (r_333_mv_angular_1 * r_273_new_translation_1)) + (r_333_mv_angular_2 * r_273_new_translation_2));
  double r_340_skew_square_c2_0_0 = (r_338_skew_square_c1_0_0 - r_339_skew_square_udotv);
  double r_340_skew_square_c2_0_1 = r_338_skew_square_c1_0_1;
  double r_340_skew_square_c2_0_2 = r_338_skew_square_c1_0_2;
  double r_340_skew_square_c2_1_0 = r_338_skew_square_c1_1_0;
  double r_340_skew_square_c2_1_1 = (r_338_skew_square_c1_1_1 - r_339_skew_square_udotv);
  double r_340_skew_square_c2_1_2 = r_338_skew_square_c1_1_2;
  double r_340_skew_square_c2_2_0 = r_338_skew_square_c1_2_0;
  double r_340_skew_square_c2_2_1 = r_338_skew_square_c1_2_1;
  double r_340_skew_square_c2_2_2 = (r_338_skew_square_c1_2_2 - r_339_skew_square_udotv);
  double r_341_res_first_temp_0_0 = (r_340_skew_square_c2_0_0 - r_337_skew_square_c2_0_0);
  double r_341_res_first_temp_0_1 = (r_340_skew_square_c2_0_1 - r_337_skew_square_c2_0_1);
  double r_341_res_first_temp_0_2 = (r_340_skew_square_c2_0_2 - r_337_skew_square_c2_0_2);
  double r_341_res_first_temp_1_0 = (r_340_skew_square_c2_1_0 - r_337_skew_square_c2_1_0);
  double r_341_res_first_temp_1_1 = (r_340_skew_square_c2_1_1 - r_337_skew_square_c2_1_1);
  double r_341_res_first_temp_1_2 = (r_340_skew_square_c2_1_2 - r_337_skew_square_c2_1_2);
  double r_341_res_first_temp_2_0 = (r_340_skew_square_c2_2_0 - r_337_skew_square_c2_2_0);
  double r_341_res_first_temp_2_1 = (r_340_skew_square_c2_2_1 - r_337_skew_square_c2_2_1);
  double r_341_res_first_temp_2_2 = (r_340_skew_square_c2_2_2 - r_337_skew_square_c2_2_2);
  double r_342_res_first_0_0 = (r_341_res_first_temp_0_0 - r_334_skew_vec3d_0_0);
  double r_342_res_first_0_1 = (r_341_res_first_temp_0_1 - r_334_skew_vec3d_0_1);
  double r_342_res_first_0_2 = (r_341_res_first_temp_0_2 - r_334_skew_vec3d_0_2);
  double r_342_res_first_1_0 = (r_341_res_first_temp_1_0 - r_334_skew_vec3d_1_0);
  double r_342_res_first_1_1 = (r_341_res_first_temp_1_1 - r_334_skew_vec3d_1_1);
  double r_342_res_first_1_2 = (r_341_res_first_temp_1_2 - r_334_skew_vec3d_1_2);
  double r_342_res_first_2_0 = (r_341_res_first_temp_2_0 - r_334_skew_vec3d_2_0);
  double r_342_res_first_2_1 = (r_341_res_first_temp_2_1 - r_334_skew_vec3d_2_1);
  double r_342_res_first_2_2 = (r_341_res_first_temp_2_2 - r_334_skew_vec3d_2_2);
  double r_343_skew_square_c1_0_0 = (r_332_mv_linear_0 * r_273_new_translation_0);
  double r_343_skew_square_c1_0_1 = (r_332_mv_linear_1 * r_273_new_translation_0);
  double r_343_skew_square_c1_0_2 = (r_332_mv_linear_2 * r_273_new_translation_0);
  double r_343_skew_square_c1_1_0 = (r_332_mv_linear_0 * r_273_new_translation_1);
  double r_343_skew_square_c1_1_1 = (r_332_mv_linear_1 * r_273_new_translation_1);
  double r_343_skew_square_c1_1_2 = (r_332_mv_linear_2 * r_273_new_translation_1);
  double r_343_skew_square_c1_2_0 = (r_332_mv_linear_0 * r_273_new_translation_2);
  double r_343_skew_square_c1_2_1 = (r_332_mv_linear_1 * r_273_new_translation_2);
  double r_343_skew_square_c1_2_2 = (r_332_mv_linear_2 * r_273_new_translation_2);
  double r_344_skew_square_udotv = (((r_273_new_translation_0 * r_332_mv_linear_0) + (r_273_new_translation_1 * r_332_mv_linear_1)) + (r_273_new_translation_2 * r_332_mv_linear_2));
  double r_345_skew_square_c2_0_0 = (r_343_skew_square_c1_0_0 - r_344_skew_square_udotv);
  double r_345_skew_square_c2_0_1 = r_343_skew_square_c1_0_1;
  double r_345_skew_square_c2_0_2 = r_343_skew_square_c1_0_2;
  double r_345_skew_square_c2_1_0 = r_343_skew_square_c1_1_0;
  double r_345_skew_square_c2_1_1 = (r_343_skew_square_c1_1_1 - r_344_skew_square_udotv);
  double r_345_skew_square_c2_1_2 = r_343_skew_square_c1_1_2;
  double r_345_skew_square_c2_2_0 = r_343_skew_square_c1_2_0;
  double r_345_skew_square_c2_2_1 = r_343_skew_square_c1_2_1;
  double r_345_skew_square_c2_2_2 = (r_343_skew_square_c1_2_2 - r_344_skew_square_udotv);
  double r_346_skew_square_c1_0_0 = (r_273_new_translation_0 * r_332_mv_linear_0);
  double r_346_skew_square_c1_0_1 = (r_273_new_translation_1 * r_332_mv_linear_0);
  double r_346_skew_square_c1_0_2 = (r_273_new_translation_2 * r_332_mv_linear_0);
  double r_346_skew_square_c1_1_0 = (r_273_new_translation_0 * r_332_mv_linear_1);
  double r_346_skew_square_c1_1_1 = (r_273_new_translation_1 * r_332_mv_linear_1);
  double r_346_skew_square_c1_1_2 = (r_273_new_translation_2 * r_332_mv_linear_1);
  double r_346_skew_square_c1_2_0 = (r_273_new_translation_0 * r_332_mv_linear_2);
  double r_346_skew_square_c1_2_1 = (r_273_new_translation_1 * r_332_mv_linear_2);
  double r_346_skew_square_c1_2_2 = (r_273_new_translation_2 * r_332_mv_linear_2);
  double r_347_skew_square_udotv = (((r_332_mv_linear_0 * r_273_new_translation_0) + (r_332_mv_linear_1 * r_273_new_translation_1)) + (r_332_mv_linear_2 * r_273_new_translation_2));
  double r_348_skew_square_c2_0_0 = (r_346_skew_square_c1_0_0 - r_347_skew_square_udotv);
  double r_348_skew_square_c2_0_1 = r_346_skew_square_c1_0_1;
  double r_348_skew_square_c2_0_2 = r_346_skew_square_c1_0_2;
  double r_348_skew_square_c2_1_0 = r_346_skew_square_c1_1_0;
  double r_348_skew_square_c2_1_1 = (r_346_skew_square_c1_1_1 - r_347_skew_square_udotv);
  double r_348_skew_square_c2_1_2 = r_346_skew_square_c1_1_2;
  double r_348_skew_square_c2_2_0 = r_346_skew_square_c1_2_0;
  double r_348_skew_square_c2_2_1 = r_346_skew_square_c1_2_1;
  double r_348_skew_square_c2_2_2 = (r_346_skew_square_c1_2_2 - r_347_skew_square_udotv);
  double r_349_skew_second_second_neg_0_0 = -(r_345_skew_square_c2_0_0);
  double r_349_skew_second_second_neg_0_1 = -(r_345_skew_square_c2_0_1);
  double r_349_skew_second_second_neg_0_2 = -(r_345_skew_square_c2_0_2);
  double r_349_skew_second_second_neg_1_0 = -(r_345_skew_square_c2_1_0);
  double r_349_skew_second_second_neg_1_1 = -(r_345_skew_square_c2_1_1);
  double r_349_skew_second_second_neg_1_2 = -(r_345_skew_square_c2_1_2);
  double r_349_skew_second_second_neg_2_0 = -(r_345_skew_square_c2_2_0);
  double r_349_skew_second_second_neg_2_1 = -(r_345_skew_square_c2_2_1);
  double r_349_skew_second_second_neg_2_2 = -(r_345_skew_square_c2_2_2);
  double r_350_res_second_0_0 = (r_349_skew_second_second_neg_0_0 - r_348_skew_square_c2_0_0);
  double r_350_res_second_0_1 = (r_349_skew_second_second_neg_0_1 - r_348_skew_square_c2_0_1);
  double r_350_res_second_0_2 = (r_349_skew_second_second_neg_0_2 - r_348_skew_square_c2_0_2);
  double r_350_res_second_1_0 = (r_349_skew_second_second_neg_1_0 - r_348_skew_square_c2_1_0);
  double r_350_res_second_1_1 = (r_349_skew_second_second_neg_1_1 - r_348_skew_square_c2_1_1);
  double r_350_res_second_1_2 = (r_349_skew_second_second_neg_1_2 - r_348_skew_square_c2_1_2);
  double r_350_res_second_2_0 = (r_349_skew_second_second_neg_2_0 - r_348_skew_square_c2_2_0);
  double r_350_res_second_2_1 = (r_349_skew_second_second_neg_2_1 - r_348_skew_square_c2_2_1);
  double r_350_res_second_2_2 = (r_349_skew_second_second_neg_2_2 - r_348_skew_square_c2_2_2);
  double r_351_alpha_skew_square_0_0 = (((r_273_new_translation_1 * r_273_new_translation_1) + (r_273_new_translation_2 * r_273_new_translation_2)) * -(masses_3));
  double r_351_alpha_skew_square_0_1 = (r_273_new_translation_1 * (r_273_new_translation_0 * masses_3));
  double r_351_alpha_skew_square_0_2 = (r_273_new_translation_2 * (r_273_new_translation_0 * masses_3));
  double r_351_alpha_skew_square_1_0 = (r_273_new_translation_1 * (r_273_new_translation_0 * masses_3));
  double r_351_alpha_skew_square_1_1 = (((r_273_new_translation_0 * r_273_new_translation_0) + (r_273_new_translation_2 * r_273_new_translation_2)) * -(masses_3));
  double r_351_alpha_skew_square_1_2 = (r_273_new_translation_2 * (r_273_new_translation_1 * masses_3));
  double r_351_alpha_skew_square_2_0 = (r_273_new_translation_2 * (r_273_new_translation_0 * masses_3));
  double r_351_alpha_skew_square_2_1 = (r_273_new_translation_2 * (r_273_new_translation_1 * masses_3));
  double r_351_alpha_skew_square_2_2 = (((r_273_new_translation_0 * r_273_new_translation_0) + (r_273_new_translation_1 * r_273_new_translation_1)) * -(masses_3));
  double r_352_res_third_0_0 = (r_286_symmetric3_rotate_0_0 - r_351_alpha_skew_square_0_0);
  double r_352_res_third_0_1 = (r_286_symmetric3_rotate_0_1 - r_351_alpha_skew_square_0_1);
  double r_352_res_third_0_2 = (r_286_symmetric3_rotate_0_2 - r_351_alpha_skew_square_0_2);
  double r_352_res_third_1_0 = (r_286_symmetric3_rotate_1_0 - r_351_alpha_skew_square_1_0);
  double r_352_res_third_1_1 = (r_286_symmetric3_rotate_1_1 - r_351_alpha_skew_square_1_1);
  double r_352_res_third_1_2 = (r_286_symmetric3_rotate_1_2 - r_351_alpha_skew_square_1_2);
  double r_352_res_third_2_0 = (r_286_symmetric3_rotate_2_0 - r_351_alpha_skew_square_2_0);
  double r_352_res_third_2_1 = (r_286_symmetric3_rotate_2_1 - r_351_alpha_skew_square_2_1);
  double r_352_res_third_2_2 = (r_286_symmetric3_rotate_2_2 - r_351_alpha_skew_square_2_2);
  double r_353_skew_vec3d_0_0 = 0;
  double r_353_skew_vec3d_0_1 = -(ov_angular_3_2);
  double r_353_skew_vec3d_0_2 = ov_angular_3_1;
  double r_353_skew_vec3d_1_0 = ov_angular_3_2;
  double r_353_skew_vec3d_1_1 = 0;
  double r_353_skew_vec3d_1_2 = -(ov_angular_3_0);
  double r_353_skew_vec3d_2_0 = -(ov_angular_3_1);
  double r_353_skew_vec3d_2_1 = ov_angular_3_0;
  double r_353_skew_vec3d_2_2 = 0;
  double r_354_res_fourth_0_0 = (((r_352_res_third_0_0 * r_353_skew_vec3d_0_0) + (r_352_res_third_0_1 * r_353_skew_vec3d_1_0)) + (r_352_res_third_0_2 * r_353_skew_vec3d_2_0));
  double r_354_res_fourth_0_1 = (((r_352_res_third_0_0 * r_353_skew_vec3d_0_1) + (r_352_res_third_0_1 * r_353_skew_vec3d_1_1)) + (r_352_res_third_0_2 * r_353_skew_vec3d_2_1));
  double r_354_res_fourth_0_2 = (((r_352_res_third_0_0 * r_353_skew_vec3d_0_2) + (r_352_res_third_0_1 * r_353_skew_vec3d_1_2)) + (r_352_res_third_0_2 * r_353_skew_vec3d_2_2));
  double r_354_res_fourth_1_0 = (((r_352_res_third_1_0 * r_353_skew_vec3d_0_0) + (r_352_res_third_1_1 * r_353_skew_vec3d_1_0)) + (r_352_res_third_1_2 * r_353_skew_vec3d_2_0));
  double r_354_res_fourth_1_1 = (((r_352_res_third_1_0 * r_353_skew_vec3d_0_1) + (r_352_res_third_1_1 * r_353_skew_vec3d_1_1)) + (r_352_res_third_1_2 * r_353_skew_vec3d_2_1));
  double r_354_res_fourth_1_2 = (((r_352_res_third_1_0 * r_353_skew_vec3d_0_2) + (r_352_res_third_1_1 * r_353_skew_vec3d_1_2)) + (r_352_res_third_1_2 * r_353_skew_vec3d_2_2));
  double r_354_res_fourth_2_0 = (((r_352_res_third_2_0 * r_353_skew_vec3d_0_0) + (r_352_res_third_2_1 * r_353_skew_vec3d_1_0)) + (r_352_res_third_2_2 * r_353_skew_vec3d_2_0));
  double r_354_res_fourth_2_1 = (((r_352_res_third_2_0 * r_353_skew_vec3d_0_1) + (r_352_res_third_2_1 * r_353_skew_vec3d_1_1)) + (r_352_res_third_2_2 * r_353_skew_vec3d_2_1));
  double r_354_res_fourth_2_2 = (((r_352_res_third_2_0 * r_353_skew_vec3d_0_2) + (r_352_res_third_2_1 * r_353_skew_vec3d_1_2)) + (r_352_res_third_2_2 * r_353_skew_vec3d_2_2));
  double r_355_res_fifth_0_0 = (r_350_res_second_0_0 - r_354_res_fourth_0_0);
  double r_355_res_fifth_0_1 = (r_350_res_second_0_1 - r_354_res_fourth_0_1);
  double r_355_res_fifth_0_2 = (r_350_res_second_0_2 - r_354_res_fourth_0_2);
  double r_355_res_fifth_1_0 = (r_350_res_second_1_0 - r_354_res_fourth_1_0);
  double r_355_res_fifth_1_1 = (r_350_res_second_1_1 - r_354_res_fourth_1_1);
  double r_355_res_fifth_1_2 = (r_350_res_second_1_2 - r_354_res_fourth_1_2);
  double r_355_res_fifth_2_0 = (r_350_res_second_2_0 - r_354_res_fourth_2_0);
  double r_355_res_fifth_2_1 = (r_350_res_second_2_1 - r_354_res_fourth_2_1);
  double r_355_res_fifth_2_2 = (r_350_res_second_2_2 - r_354_res_fourth_2_2);
  double r_356_res_third_first_col_0 = r_352_res_third_0_0;
  double r_356_res_third_first_col_1 = r_352_res_third_1_0;
  double r_356_res_third_first_col_2 = r_352_res_third_2_0;
  double r_357_res_third_second_col_0 = r_352_res_third_0_1;
  double r_357_res_third_second_col_1 = r_352_res_third_1_1;
  double r_357_res_third_second_col_2 = r_352_res_third_2_1;
  double r_358_res_third_third_col_0 = r_352_res_third_0_2;
  double r_358_res_third_third_col_1 = r_352_res_third_1_2;
  double r_358_res_third_third_col_2 = r_352_res_third_2_2;
  double r_359_res_sixth_first_col_0 = ((ov_angular_3_1 * r_356_res_third_first_col_2) - (ov_angular_3_2 * r_356_res_third_first_col_1));
  double r_359_res_sixth_first_col_1 = ((ov_angular_3_2 * r_356_res_third_first_col_0) - (ov_angular_3_0 * r_356_res_third_first_col_2));
  double r_359_res_sixth_first_col_2 = ((ov_angular_3_0 * r_356_res_third_first_col_1) - (ov_angular_3_1 * r_356_res_third_first_col_0));
  double r_360_res_sixth_second_col_0 = ((ov_angular_3_1 * r_357_res_third_second_col_2) - (ov_angular_3_2 * r_357_res_third_second_col_1));
  double r_360_res_sixth_second_col_1 = ((ov_angular_3_2 * r_357_res_third_second_col_0) - (ov_angular_3_0 * r_357_res_third_second_col_2));
  double r_360_res_sixth_second_col_2 = ((ov_angular_3_0 * r_357_res_third_second_col_1) - (ov_angular_3_1 * r_357_res_third_second_col_0));
  double r_361_res_sixth_third_col_0 = ((ov_angular_3_1 * r_358_res_third_third_col_2) - (ov_angular_3_2 * r_358_res_third_third_col_1));
  double r_361_res_sixth_third_col_1 = ((ov_angular_3_2 * r_358_res_third_third_col_0) - (ov_angular_3_0 * r_358_res_third_third_col_2));
  double r_361_res_sixth_third_col_2 = ((ov_angular_3_0 * r_358_res_third_third_col_1) - (ov_angular_3_1 * r_358_res_third_third_col_0));
  double r_362_res_sixth_0_0 = (r_355_res_fifth_0_0 + r_359_res_sixth_first_col_0);
  double r_362_res_sixth_0_1 = (r_355_res_fifth_0_1 + r_360_res_sixth_second_col_0);
  double r_362_res_sixth_0_2 = (r_355_res_fifth_0_2 + r_361_res_sixth_third_col_0);
  double r_362_res_sixth_1_0 = (r_355_res_fifth_1_0 + r_359_res_sixth_first_col_1);
  double r_362_res_sixth_1_1 = (r_355_res_fifth_1_1 + r_360_res_sixth_second_col_1);
  double r_362_res_sixth_1_2 = (r_355_res_fifth_1_2 + r_361_res_sixth_third_col_1);
  double r_362_res_sixth_2_0 = (r_355_res_fifth_2_0 + r_359_res_sixth_first_col_2);
  double r_362_res_sixth_2_1 = (r_355_res_fifth_2_1 + r_360_res_sixth_second_col_2);
  double r_362_res_sixth_2_2 = (r_355_res_fifth_2_2 + r_361_res_sixth_third_col_2);
  double inertia_variation_3_0_0 = 0;
  double inertia_variation_3_0_1 = 0;
  double inertia_variation_3_0_2 = 0;
  double inertia_variation_3_0_3 = r_342_res_first_0_0;
  double inertia_variation_3_0_4 = r_342_res_first_0_1;
  double inertia_variation_3_0_5 = r_342_res_first_0_2;
  double inertia_variation_3_1_0 = 0;
  double inertia_variation_3_1_1 = 0;
  double inertia_variation_3_1_2 = 0;
  double inertia_variation_3_1_3 = r_342_res_first_1_0;
  double inertia_variation_3_1_4 = r_342_res_first_1_1;
  double inertia_variation_3_1_5 = r_342_res_first_1_2;
  double inertia_variation_3_2_0 = 0;
  double inertia_variation_3_2_1 = 0;
  double inertia_variation_3_2_2 = 0;
  double inertia_variation_3_2_3 = r_342_res_first_2_0;
  double inertia_variation_3_2_4 = r_342_res_first_2_1;
  double inertia_variation_3_2_5 = r_342_res_first_2_2;
  double inertia_variation_3_3_0 = r_342_res_first_0_0;
  double inertia_variation_3_3_1 = r_342_res_first_1_0;
  double inertia_variation_3_3_2 = r_342_res_first_2_0;
  double inertia_variation_3_3_3 = r_362_res_sixth_0_0;
  double inertia_variation_3_3_4 = r_362_res_sixth_0_1;
  double inertia_variation_3_3_5 = r_362_res_sixth_0_2;
  double inertia_variation_3_4_0 = r_342_res_first_0_1;
  double inertia_variation_3_4_1 = r_342_res_first_1_1;
  double inertia_variation_3_4_2 = r_342_res_first_2_1;
  double inertia_variation_3_4_3 = r_362_res_sixth_1_0;
  double inertia_variation_3_4_4 = r_362_res_sixth_1_1;
  double inertia_variation_3_4_5 = r_362_res_sixth_1_2;
  double inertia_variation_3_5_0 = r_342_res_first_0_2;
  double inertia_variation_3_5_1 = r_342_res_first_1_2;
  double inertia_variation_3_5_2 = r_342_res_first_2_2;
  double inertia_variation_3_5_3 = r_362_res_sixth_2_0;
  double inertia_variation_3_5_4 = r_362_res_sixth_2_1;
  double inertia_variation_3_5_5 = r_362_res_sixth_2_2;
  double r_363_add_force_cross_linear_angular_0_0 = inertia_variation_3_0_3;
  double r_363_add_force_cross_linear_angular_0_1 = inertia_variation_3_0_4;
  double r_363_add_force_cross_linear_angular_0_2 = inertia_variation_3_0_5;
  double r_363_add_force_cross_linear_angular_1_0 = inertia_variation_3_1_3;
  double r_363_add_force_cross_linear_angular_1_1 = inertia_variation_3_1_4;
  double r_363_add_force_cross_linear_angular_1_2 = inertia_variation_3_1_5;
  double r_363_add_force_cross_linear_angular_2_0 = inertia_variation_3_2_3;
  double r_363_add_force_cross_linear_angular_2_1 = inertia_variation_3_2_4;
  double r_363_add_force_cross_linear_angular_2_2 = inertia_variation_3_2_5;
  double r_364_add_force_cross_angular_linear_0_0 = inertia_variation_3_3_0;
  double r_364_add_force_cross_angular_linear_0_1 = inertia_variation_3_3_1;
  double r_364_add_force_cross_angular_linear_0_2 = inertia_variation_3_3_2;
  double r_364_add_force_cross_angular_linear_1_0 = inertia_variation_3_4_0;
  double r_364_add_force_cross_angular_linear_1_1 = inertia_variation_3_4_1;
  double r_364_add_force_cross_angular_linear_1_2 = inertia_variation_3_4_2;
  double r_364_add_force_cross_angular_linear_2_0 = inertia_variation_3_5_0;
  double r_364_add_force_cross_angular_linear_2_1 = inertia_variation_3_5_1;
  double r_364_add_force_cross_angular_linear_2_2 = inertia_variation_3_5_2;
  double r_365_add_force_cross_angular_angular_0_0 = inertia_variation_3_3_3;
  double r_365_add_force_cross_angular_angular_0_1 = inertia_variation_3_3_4;
  double r_365_add_force_cross_angular_angular_0_2 = inertia_variation_3_3_5;
  double r_365_add_force_cross_angular_angular_1_0 = inertia_variation_3_4_3;
  double r_365_add_force_cross_angular_angular_1_1 = inertia_variation_3_4_4;
  double r_365_add_force_cross_angular_angular_1_2 = inertia_variation_3_4_5;
  double r_365_add_force_cross_angular_angular_2_0 = inertia_variation_3_5_3;
  double r_365_add_force_cross_angular_angular_2_1 = inertia_variation_3_5_4;
  double r_365_add_force_cross_angular_angular_2_2 = inertia_variation_3_5_5;
  double r_366_minus_f_linear_0 = -(data_oh_linear_3_0);
  double r_366_minus_f_linear_1 = -(data_oh_linear_3_1);
  double r_366_minus_f_linear_2 = -(data_oh_linear_3_2);
  double r_367_minus_f_angular_0 = -(data_oh_angular_3_0);
  double r_367_minus_f_angular_1 = -(data_oh_angular_3_1);
  double r_367_minus_f_angular_2 = -(data_oh_angular_3_2);
  double r_368_add_skew_0_0 = r_363_add_force_cross_linear_angular_0_0;
  double r_368_add_skew_0_1 = (r_363_add_force_cross_linear_angular_0_1 - r_366_minus_f_linear_2);
  double r_368_add_skew_0_2 = (r_363_add_force_cross_linear_angular_0_2 + r_366_minus_f_linear_1);
  double r_368_add_skew_1_0 = (r_363_add_force_cross_linear_angular_1_0 + r_366_minus_f_linear_2);
  double r_368_add_skew_1_1 = r_363_add_force_cross_linear_angular_1_1;
  double r_368_add_skew_1_2 = (r_363_add_force_cross_linear_angular_1_2 - r_366_minus_f_linear_0);
  double r_368_add_skew_2_0 = (r_363_add_force_cross_linear_angular_2_0 - r_366_minus_f_linear_1);
  double r_368_add_skew_2_1 = (r_363_add_force_cross_linear_angular_2_1 + r_366_minus_f_linear_0);
  double r_368_add_skew_2_2 = r_363_add_force_cross_linear_angular_2_2;
  double r_369_res_linear_angular_0_0 = r_368_add_skew_0_0;
  double r_369_res_linear_angular_0_1 = r_368_add_skew_0_1;
  double r_369_res_linear_angular_0_2 = r_368_add_skew_0_2;
  double r_369_res_linear_angular_1_0 = r_368_add_skew_1_0;
  double r_369_res_linear_angular_1_1 = r_368_add_skew_1_1;
  double r_369_res_linear_angular_1_2 = r_368_add_skew_1_2;
  double r_369_res_linear_angular_2_0 = r_368_add_skew_2_0;
  double r_369_res_linear_angular_2_1 = r_368_add_skew_2_1;
  double r_369_res_linear_angular_2_2 = r_368_add_skew_2_2;
  double r_370_add_skew_0_0 = r_364_add_force_cross_angular_linear_0_0;
  double r_370_add_skew_0_1 = (r_364_add_force_cross_angular_linear_0_1 - r_366_minus_f_linear_2);
  double r_370_add_skew_0_2 = (r_364_add_force_cross_angular_linear_0_2 + r_366_minus_f_linear_1);
  double r_370_add_skew_1_0 = (r_364_add_force_cross_angular_linear_1_0 + r_366_minus_f_linear_2);
  double r_370_add_skew_1_1 = r_364_add_force_cross_angular_linear_1_1;
  double r_370_add_skew_1_2 = (r_364_add_force_cross_angular_linear_1_2 - r_366_minus_f_linear_0);
  double r_370_add_skew_2_0 = (r_364_add_force_cross_angular_linear_2_0 - r_366_minus_f_linear_1);
  double r_370_add_skew_2_1 = (r_364_add_force_cross_angular_linear_2_1 + r_366_minus_f_linear_0);
  double r_370_add_skew_2_2 = r_364_add_force_cross_angular_linear_2_2;
  double r_371_res_angular_linear_0_0 = r_370_add_skew_0_0;
  double r_371_res_angular_linear_0_1 = r_370_add_skew_0_1;
  double r_371_res_angular_linear_0_2 = r_370_add_skew_0_2;
  double r_371_res_angular_linear_1_0 = r_370_add_skew_1_0;
  double r_371_res_angular_linear_1_1 = r_370_add_skew_1_1;
  double r_371_res_angular_linear_1_2 = r_370_add_skew_1_2;
  double r_371_res_angular_linear_2_0 = r_370_add_skew_2_0;
  double r_371_res_angular_linear_2_1 = r_370_add_skew_2_1;
  double r_371_res_angular_linear_2_2 = r_370_add_skew_2_2;
  double r_372_add_skew_0_0 = r_365_add_force_cross_angular_angular_0_0;
  double r_372_add_skew_0_1 = (r_365_add_force_cross_angular_angular_0_1 - r_367_minus_f_angular_2);
  double r_372_add_skew_0_2 = (r_365_add_force_cross_angular_angular_0_2 + r_367_minus_f_angular_1);
  double r_372_add_skew_1_0 = (r_365_add_force_cross_angular_angular_1_0 + r_367_minus_f_angular_2);
  double r_372_add_skew_1_1 = r_365_add_force_cross_angular_angular_1_1;
  double r_372_add_skew_1_2 = (r_365_add_force_cross_angular_angular_1_2 - r_367_minus_f_angular_0);
  double r_372_add_skew_2_0 = (r_365_add_force_cross_angular_angular_2_0 - r_367_minus_f_angular_1);
  double r_372_add_skew_2_1 = (r_365_add_force_cross_angular_angular_2_1 + r_367_minus_f_angular_0);
  double r_372_add_skew_2_2 = r_365_add_force_cross_angular_angular_2_2;
  double r_373_res_angular_angular_0_0 = r_372_add_skew_0_0;
  double r_373_res_angular_angular_0_1 = r_372_add_skew_0_1;
  double r_373_res_angular_angular_0_2 = r_372_add_skew_0_2;
  double r_373_res_angular_angular_1_0 = r_372_add_skew_1_0;
  double r_373_res_angular_angular_1_1 = r_372_add_skew_1_1;
  double r_373_res_angular_angular_1_2 = r_372_add_skew_1_2;
  double r_373_res_angular_angular_2_0 = r_372_add_skew_2_0;
  double r_373_res_angular_angular_2_1 = r_372_add_skew_2_1;
  double r_373_res_angular_angular_2_2 = r_372_add_skew_2_2;
  double add_force_cross_matrix_3_0_0 = inertia_variation_3_0_0;
  double add_force_cross_matrix_3_0_1 = inertia_variation_3_0_1;
  double add_force_cross_matrix_3_0_2 = inertia_variation_3_0_2;
  double add_force_cross_matrix_3_0_3 = r_369_res_linear_angular_0_0;
  double add_force_cross_matrix_3_0_4 = r_369_res_linear_angular_0_1;
  double add_force_cross_matrix_3_0_5 = r_369_res_linear_angular_0_2;
  double add_force_cross_matrix_3_1_0 = inertia_variation_3_1_0;
  double add_force_cross_matrix_3_1_1 = inertia_variation_3_1_1;
  double add_force_cross_matrix_3_1_2 = inertia_variation_3_1_2;
  double add_force_cross_matrix_3_1_3 = r_369_res_linear_angular_1_0;
  double add_force_cross_matrix_3_1_4 = r_369_res_linear_angular_1_1;
  double add_force_cross_matrix_3_1_5 = r_369_res_linear_angular_1_2;
  double add_force_cross_matrix_3_2_0 = inertia_variation_3_2_0;
  double add_force_cross_matrix_3_2_1 = inertia_variation_3_2_1;
  double add_force_cross_matrix_3_2_2 = inertia_variation_3_2_2;
  double add_force_cross_matrix_3_2_3 = r_369_res_linear_angular_2_0;
  double add_force_cross_matrix_3_2_4 = r_369_res_linear_angular_2_1;
  double add_force_cross_matrix_3_2_5 = r_369_res_linear_angular_2_2;
  double add_force_cross_matrix_3_3_0 = r_371_res_angular_linear_0_0;
  double add_force_cross_matrix_3_3_1 = r_371_res_angular_linear_0_1;
  double add_force_cross_matrix_3_3_2 = r_371_res_angular_linear_0_2;
  double add_force_cross_matrix_3_3_3 = r_373_res_angular_angular_0_0;
  double add_force_cross_matrix_3_3_4 = r_373_res_angular_angular_0_1;
  double add_force_cross_matrix_3_3_5 = r_373_res_angular_angular_0_2;
  double add_force_cross_matrix_3_4_0 = r_371_res_angular_linear_1_0;
  double add_force_cross_matrix_3_4_1 = r_371_res_angular_linear_1_1;
  double add_force_cross_matrix_3_4_2 = r_371_res_angular_linear_1_2;
  double add_force_cross_matrix_3_4_3 = r_373_res_angular_angular_1_0;
  double add_force_cross_matrix_3_4_4 = r_373_res_angular_angular_1_1;
  double add_force_cross_matrix_3_4_5 = r_373_res_angular_angular_1_2;
  double add_force_cross_matrix_3_5_0 = r_371_res_angular_linear_2_0;
  double add_force_cross_matrix_3_5_1 = r_371_res_angular_linear_2_1;
  double add_force_cross_matrix_3_5_2 = r_371_res_angular_linear_2_2;
  double add_force_cross_matrix_3_5_3 = r_373_res_angular_angular_2_0;
  double add_force_cross_matrix_3_5_4 = r_373_res_angular_angular_2_1;
  double add_force_cross_matrix_3_5_5 = r_373_res_angular_angular_2_2;
  double rotation_matrix_4_0_0 = qcos_4;
  double rotation_matrix_4_0_1 = -(qsin_4);
  double rotation_matrix_4_0_2 = 0;
  double rotation_matrix_4_1_0 = qsin_4;
  double rotation_matrix_4_1_1 = qcos_4;
  double rotation_matrix_4_1_2 = 0;
  double rotation_matrix_4_2_0 = 0;
  double rotation_matrix_4_2_1 = 0;
  double rotation_matrix_4_2_2 = 1;
  double limi_rotation_4_0_0 = rotation_matrix_4_0_0;
  double limi_rotation_4_0_1 = rotation_matrix_4_0_1;
  double limi_rotation_4_0_2 = 0;
  double limi_rotation_4_1_0 = 0;
  double limi_rotation_4_1_1 = 0;
  double limi_rotation_4_1_2 = 1;
  double limi_rotation_4_2_0 = -(rotation_matrix_4_1_0);
  double limi_rotation_4_2_1 = -(rotation_matrix_4_1_1);
  double limi_rotation_4_2_2 = 0;
  double v_linear_4_0 = data_v_4_0;
  double v_linear_4_1 = data_v_4_1;
  double v_linear_4_2 = data_v_4_2;
  double v_angular_4_0 = data_v_4_3;
  double v_angular_4_1 = data_v_4_4;
  double v_angular_4_2 = v_4;
  double parent_v_linear_4_0 = all_v_3_0;
  double parent_v_linear_4_1 = all_v_3_1;
  double parent_v_linear_4_2 = all_v_3_2;
  double parent_v_angular_4_0 = all_v_3_3;
  double parent_v_angular_4_1 = all_v_3_4;
  double parent_v_angular_4_2 = all_v_3_5;
  double parent_a_linear_4_0 = a_final_3_0;
  double parent_a_linear_4_1 = a_final_3_1;
  double parent_a_linear_4_2 = a_final_3_2;
  double parent_a_angular_4_0 = a_final_3_3;
  double parent_a_angular_4_1 = a_final_3_4;
  double parent_a_angular_4_2 = a_final_3_5;
  double oMi_rotation_4_0_0 = (((oMi_rotation_3_0_0 * limi_rotation_4_0_0) + (oMi_rotation_3_0_1 * limi_rotation_4_1_0)) + (oMi_rotation_3_0_2 * limi_rotation_4_2_0));
  double oMi_rotation_4_0_1 = (((oMi_rotation_3_0_0 * limi_rotation_4_0_1) + (oMi_rotation_3_0_1 * limi_rotation_4_1_1)) + (oMi_rotation_3_0_2 * limi_rotation_4_2_1));
  double oMi_rotation_4_0_2 = (((oMi_rotation_3_0_0 * limi_rotation_4_0_2) + (oMi_rotation_3_0_1 * limi_rotation_4_1_2)) + (oMi_rotation_3_0_2 * limi_rotation_4_2_2));
  double oMi_rotation_4_1_0 = (((oMi_rotation_3_1_0 * limi_rotation_4_0_0) + (oMi_rotation_3_1_1 * limi_rotation_4_1_0)) + (oMi_rotation_3_1_2 * limi_rotation_4_2_0));
  double oMi_rotation_4_1_1 = (((oMi_rotation_3_1_0 * limi_rotation_4_0_1) + (oMi_rotation_3_1_1 * limi_rotation_4_1_1)) + (oMi_rotation_3_1_2 * limi_rotation_4_2_1));
  double oMi_rotation_4_1_2 = (((oMi_rotation_3_1_0 * limi_rotation_4_0_2) + (oMi_rotation_3_1_1 * limi_rotation_4_1_2)) + (oMi_rotation_3_1_2 * limi_rotation_4_2_2));
  double oMi_rotation_4_2_0 = (((oMi_rotation_3_2_0 * limi_rotation_4_0_0) + (oMi_rotation_3_2_1 * limi_rotation_4_1_0)) + (oMi_rotation_3_2_2 * limi_rotation_4_2_0));
  double oMi_rotation_4_2_1 = (((oMi_rotation_3_2_0 * limi_rotation_4_0_1) + (oMi_rotation_3_2_1 * limi_rotation_4_1_1)) + (oMi_rotation_3_2_2 * limi_rotation_4_2_1));
  double oMi_rotation_4_2_2 = (((oMi_rotation_3_2_0 * limi_rotation_4_0_2) + (oMi_rotation_3_2_1 * limi_rotation_4_1_2)) + (oMi_rotation_3_2_2 * limi_rotation_4_2_2));
  double oMi_translation_to_add_4_0 = (((oMi_rotation_3_0_0 * limi_translation_4_0) + (oMi_rotation_3_0_1 * limi_translation_4_1)) + (oMi_rotation_3_0_2 * limi_translation_4_2));
  double oMi_translation_to_add_4_1 = (((oMi_rotation_3_1_0 * limi_translation_4_0) + (oMi_rotation_3_1_1 * limi_translation_4_1)) + (oMi_rotation_3_1_2 * limi_translation_4_2));
  double oMi_translation_to_add_4_2 = (((oMi_rotation_3_2_0 * limi_translation_4_0) + (oMi_rotation_3_2_1 * limi_translation_4_1)) + (oMi_rotation_3_2_2 * limi_translation_4_2));
  double oMi_translation_4_0 = (oMi_translation_3_0 + oMi_translation_to_add_4_0);
  double oMi_translation_4_1 = (oMi_translation_3_1 + oMi_translation_to_add_4_1);
  double oMi_translation_4_2 = (oMi_translation_3_2 + oMi_translation_to_add_4_2);
  double actInv1_4_0 = ((limi_translation_4_1 * parent_v_angular_4_2) - (limi_translation_4_2 * parent_v_angular_4_1));
  double actInv1_4_1 = ((limi_translation_4_2 * parent_v_angular_4_0) - (limi_translation_4_0 * parent_v_angular_4_2));
  double actInv1_4_2 = ((limi_translation_4_0 * parent_v_angular_4_1) - (limi_translation_4_1 * parent_v_angular_4_0));
  double actInv2_4_0 = (parent_v_linear_4_0 - actInv1_4_0);
  double actInv2_4_1 = (parent_v_linear_4_1 - actInv1_4_1);
  double actInv2_4_2 = (parent_v_linear_4_2 - actInv1_4_2);
  double actInv3_4_0_0 = limi_rotation_4_0_0;
  double actInv3_4_1_0 = limi_rotation_4_0_1;
  double actInv3_4_2_0 = limi_rotation_4_0_2;
  double actInv3_4_0_1 = limi_rotation_4_1_0;
  double actInv3_4_1_1 = limi_rotation_4_1_1;
  double actInv3_4_2_1 = limi_rotation_4_1_2;
  double actInv3_4_0_2 = limi_rotation_4_2_0;
  double actInv3_4_1_2 = limi_rotation_4_2_1;
  double actInv3_4_2_2 = limi_rotation_4_2_2;
  double actInv4_4_0 = (((actInv3_4_0_0 * actInv2_4_0) + (actInv3_4_0_1 * actInv2_4_1)) + (actInv3_4_0_2 * actInv2_4_2));
  double actInv4_4_1 = (((actInv3_4_1_0 * actInv2_4_0) + (actInv3_4_1_1 * actInv2_4_1)) + (actInv3_4_1_2 * actInv2_4_2));
  double actInv4_4_2 = (((actInv3_4_2_0 * actInv2_4_0) + (actInv3_4_2_1 * actInv2_4_1)) + (actInv3_4_2_2 * actInv2_4_2));
  double act_inv_linear_4_0 = (v_linear_4_0 + actInv4_4_0);
  double act_inv_linear_4_1 = (v_linear_4_1 + actInv4_4_1);
  double act_inv_linear_4_2 = (v_linear_4_2 + actInv4_4_2);
  double actInv5_4_0 = (((actInv3_4_0_0 * parent_v_angular_4_0) + (actInv3_4_0_1 * parent_v_angular_4_1)) + (actInv3_4_0_2 * parent_v_angular_4_2));
  double actInv5_4_1 = (((actInv3_4_1_0 * parent_v_angular_4_0) + (actInv3_4_1_1 * parent_v_angular_4_1)) + (actInv3_4_1_2 * parent_v_angular_4_2));
  double actInv5_4_2 = (((actInv3_4_2_0 * parent_v_angular_4_0) + (actInv3_4_2_1 * parent_v_angular_4_1)) + (actInv3_4_2_2 * parent_v_angular_4_2));
  double act_inv_angular_4_0 = (v_angular_4_0 + actInv5_4_0);
  double act_inv_angular_4_1 = (v_angular_4_1 + actInv5_4_1);
  double act_inv_angular_4_2 = (v_angular_4_2 + actInv5_4_2);
  double all_v_4_0 = act_inv_linear_4_0;
  double all_v_4_1 = act_inv_linear_4_1;
  double all_v_4_2 = act_inv_linear_4_2;
  double all_v_4_3 = act_inv_angular_4_0;
  double all_v_4_4 = act_inv_angular_4_1;
  double all_v_4_5 = act_inv_angular_4_2;
  double minus_m_w_4 = -(v_4);
  double alpha_cross1_linear_4 = (-(minus_m_w_4) * act_inv_linear_4_1);
  double alpha_cross2_linear_4 = (minus_m_w_4 * act_inv_linear_4_0);
  double alpha_cross_linear_4_0 = alpha_cross1_linear_4;
  double alpha_cross_linear_4_1 = alpha_cross2_linear_4;
  double alpha_cross_linear_4_2 = 0;
  double alpha_cross1_angular_4 = (-(minus_m_w_4) * act_inv_angular_4_1);
  double alpha_cross2_angular_4 = (minus_m_w_4 * act_inv_angular_4_0);
  double alpha_cross_angular_4_0 = alpha_cross1_angular_4;
  double alpha_cross_angular_4_1 = alpha_cross2_angular_4;
  double alpha_cross_angular_4_2 = 0;
  double new_data_a_4_0 = alpha_cross_linear_4_0;
  double new_data_a_4_1 = alpha_cross_linear_4_1;
  double new_data_a_4_2 = alpha_cross_linear_4_2;
  double new_data_a_4_3 = alpha_cross_angular_4_0;
  double new_data_a_4_4 = alpha_cross_angular_4_1;
  double new_data_a_4_5 = a_4;
  double temp_a_linear_4_0 = new_data_a_4_0;
  double temp_a_linear_4_1 = new_data_a_4_1;
  double temp_a_linear_4_2 = new_data_a_4_2;
  double temp_a_angular_4_0 = new_data_a_4_3;
  double temp_a_angular_4_1 = new_data_a_4_4;
  double temp_a_angular_4_2 = new_data_a_4_5;
  double r_374_actInv1_4_0 = ((limi_translation_4_1 * parent_a_angular_4_2) - (limi_translation_4_2 * parent_a_angular_4_1));
  double r_374_actInv1_4_1 = ((limi_translation_4_2 * parent_a_angular_4_0) - (limi_translation_4_0 * parent_a_angular_4_2));
  double r_374_actInv1_4_2 = ((limi_translation_4_0 * parent_a_angular_4_1) - (limi_translation_4_1 * parent_a_angular_4_0));
  double r_375_actInv2_4_0 = (parent_a_linear_4_0 - r_374_actInv1_4_0);
  double r_375_actInv2_4_1 = (parent_a_linear_4_1 - r_374_actInv1_4_1);
  double r_375_actInv2_4_2 = (parent_a_linear_4_2 - r_374_actInv1_4_2);
  double r_376_actInv3_4_0_0 = limi_rotation_4_0_0;
  double r_376_actInv3_4_1_0 = limi_rotation_4_0_1;
  double r_376_actInv3_4_2_0 = limi_rotation_4_0_2;
  double r_376_actInv3_4_0_1 = limi_rotation_4_1_0;
  double r_376_actInv3_4_1_1 = limi_rotation_4_1_1;
  double r_376_actInv3_4_2_1 = limi_rotation_4_1_2;
  double r_376_actInv3_4_0_2 = limi_rotation_4_2_0;
  double r_376_actInv3_4_1_2 = limi_rotation_4_2_1;
  double r_376_actInv3_4_2_2 = limi_rotation_4_2_2;
  double r_377_actInv4_4_0 = (((r_376_actInv3_4_0_0 * r_375_actInv2_4_0) + (r_376_actInv3_4_0_1 * r_375_actInv2_4_1)) + (r_376_actInv3_4_0_2 * r_375_actInv2_4_2));
  double r_377_actInv4_4_1 = (((r_376_actInv3_4_1_0 * r_375_actInv2_4_0) + (r_376_actInv3_4_1_1 * r_375_actInv2_4_1)) + (r_376_actInv3_4_1_2 * r_375_actInv2_4_2));
  double r_377_actInv4_4_2 = (((r_376_actInv3_4_2_0 * r_375_actInv2_4_0) + (r_376_actInv3_4_2_1 * r_375_actInv2_4_1)) + (r_376_actInv3_4_2_2 * r_375_actInv2_4_2));
  double r_378_act_inv_linear_4_0 = (temp_a_linear_4_0 + r_377_actInv4_4_0);
  double r_378_act_inv_linear_4_1 = (temp_a_linear_4_1 + r_377_actInv4_4_1);
  double r_378_act_inv_linear_4_2 = (temp_a_linear_4_2 + r_377_actInv4_4_2);
  double r_379_actInv5_4_0 = (((r_376_actInv3_4_0_0 * parent_a_angular_4_0) + (r_376_actInv3_4_0_1 * parent_a_angular_4_1)) + (r_376_actInv3_4_0_2 * parent_a_angular_4_2));
  double r_379_actInv5_4_1 = (((r_376_actInv3_4_1_0 * parent_a_angular_4_0) + (r_376_actInv3_4_1_1 * parent_a_angular_4_1)) + (r_376_actInv3_4_1_2 * parent_a_angular_4_2));
  double r_379_actInv5_4_2 = (((r_376_actInv3_4_2_0 * parent_a_angular_4_0) + (r_376_actInv3_4_2_1 * parent_a_angular_4_1)) + (r_376_actInv3_4_2_2 * parent_a_angular_4_2));
  double r_380_act_inv_angular_4_0 = (temp_a_angular_4_0 + r_379_actInv5_4_0);
  double r_380_act_inv_angular_4_1 = (temp_a_angular_4_1 + r_379_actInv5_4_1);
  double r_380_act_inv_angular_4_2 = (temp_a_angular_4_2 + r_379_actInv5_4_2);
  double a_final_4_0 = r_378_act_inv_linear_4_0;
  double a_final_4_1 = r_378_act_inv_linear_4_1;
  double a_final_4_2 = r_378_act_inv_linear_4_2;
  double a_final_4_3 = r_380_act_inv_angular_4_0;
  double a_final_4_4 = r_380_act_inv_angular_4_1;
  double a_final_4_5 = r_380_act_inv_angular_4_2;
  double r_381_new_translation_temp_0 = (((oMi_rotation_4_0_0 * lever_4_0) + (oMi_rotation_4_0_1 * lever_4_1)) + (oMi_rotation_4_0_2 * lever_4_2));
  double r_381_new_translation_temp_1 = (((oMi_rotation_4_1_0 * lever_4_0) + (oMi_rotation_4_1_1 * lever_4_1)) + (oMi_rotation_4_1_2 * lever_4_2));
  double r_381_new_translation_temp_2 = (((oMi_rotation_4_2_0 * lever_4_0) + (oMi_rotation_4_2_1 * lever_4_1)) + (oMi_rotation_4_2_2 * lever_4_2));
  double r_382_new_translation_0 = (oMi_translation_4_0 + r_381_new_translation_temp_0);
  double r_382_new_translation_1 = (oMi_translation_4_1 + r_381_new_translation_temp_1);
  double r_382_new_translation_2 = (oMi_translation_4_2 + r_381_new_translation_temp_2);
  double r_383_decompose_it_i_0_0 = (inertia_4_0_0 - inertia_4_2_2);
  double r_383_decompose_it_i_0_1 = inertia_4_0_1;
  double r_383_decompose_it_i_1_0 = inertia_4_0_1;
  double r_383_decompose_it_i_1_1 = (inertia_4_1_1 - inertia_4_2_2);
  double r_383_decompose_it_i_2_0 = (inertia_4_0_2 * 2);
  double r_383_decompose_it_i_2_1 = (inertia_4_1_2 + inertia_4_1_2);
  double r_384_rotate_bottom_r_0_0 = oMi_rotation_4_1_0;
  double r_384_rotate_bottom_r_0_1 = oMi_rotation_4_1_1;
  double r_384_rotate_bottom_r_0_2 = oMi_rotation_4_1_2;
  double r_384_rotate_bottom_r_1_0 = oMi_rotation_4_2_0;
  double r_384_rotate_bottom_r_1_1 = oMi_rotation_4_2_1;
  double r_384_rotate_bottom_r_1_2 = oMi_rotation_4_2_2;
  double r_385_rotate_y_0_0 = (((r_384_rotate_bottom_r_0_0 * r_383_decompose_it_i_0_0) + (r_384_rotate_bottom_r_0_1 * r_383_decompose_it_i_1_0)) + (r_384_rotate_bottom_r_0_2 * r_383_decompose_it_i_2_0));
  double r_385_rotate_y_0_1 = (((r_384_rotate_bottom_r_0_0 * r_383_decompose_it_i_0_1) + (r_384_rotate_bottom_r_0_1 * r_383_decompose_it_i_1_1)) + (r_384_rotate_bottom_r_0_2 * r_383_decompose_it_i_2_1));
  double r_385_rotate_y_1_0 = (((r_384_rotate_bottom_r_1_0 * r_383_decompose_it_i_0_0) + (r_384_rotate_bottom_r_1_1 * r_383_decompose_it_i_1_0)) + (r_384_rotate_bottom_r_1_2 * r_383_decompose_it_i_2_0));
  double r_385_rotate_y_1_1 = (((r_384_rotate_bottom_r_1_0 * r_383_decompose_it_i_0_1) + (r_384_rotate_bottom_r_1_1 * r_383_decompose_it_i_1_1)) + (r_384_rotate_bottom_r_1_2 * r_383_decompose_it_i_2_1));
  double r_386_sres_first_1 = ((oMi_rotation_4_0_0 * r_385_rotate_y_0_0) + (oMi_rotation_4_0_1 * r_385_rotate_y_0_1));
  double r_387_sres_first_2 = ((oMi_rotation_4_1_0 * r_385_rotate_y_0_0) + (oMi_rotation_4_1_1 * r_385_rotate_y_0_1));
  double r_388_sres_first_3 = ((oMi_rotation_4_0_0 * r_385_rotate_y_1_0) + (oMi_rotation_4_0_1 * r_385_rotate_y_1_1));
  double r_389_sres_first_4 = ((oMi_rotation_4_1_0 * r_385_rotate_y_1_0) + (oMi_rotation_4_1_1 * r_385_rotate_y_1_1));
  double r_390_sres_first_5 = ((oMi_rotation_4_2_0 * r_385_rotate_y_1_0) + (oMi_rotation_4_2_1 * r_385_rotate_y_1_1));
  double r_391_const_r_0 = ((-(inertia_4_1_2) * oMi_rotation_4_0_0) + (inertia_4_0_2 * oMi_rotation_4_0_1));
  double r_391_const_r_1 = ((-(inertia_4_1_2) * oMi_rotation_4_1_0) + (inertia_4_0_2 * oMi_rotation_4_1_1));
  double r_391_const_r_2 = ((-(inertia_4_1_2) * oMi_rotation_4_2_0) + (inertia_4_0_2 * oMi_rotation_4_2_1));
  double r_392_sres_update_0_tmp1 = (r_383_decompose_it_i_0_0 + r_383_decompose_it_i_1_1);
  double r_393_sres_update_0_tmp2 = (r_387_sres_first_2 + r_390_sres_first_5);
  double r_394_sres_update_0 = (r_392_sres_update_0_tmp1 - r_393_sres_update_0_tmp2);
  double r_395_symmetric3_rotate_0_0 = (r_394_sres_update_0 + inertia_4_2_2);
  double r_395_symmetric3_rotate_0_1 = (r_386_sres_first_1 + r_391_const_r_2);
  double r_395_symmetric3_rotate_0_2 = (r_388_sres_first_3 - r_391_const_r_1);
  double r_395_symmetric3_rotate_1_0 = (r_386_sres_first_1 + r_391_const_r_2);
  double r_395_symmetric3_rotate_1_1 = (r_387_sres_first_2 + inertia_4_2_2);
  double r_395_symmetric3_rotate_1_2 = (r_389_sres_first_4 + r_391_const_r_0);
  double r_395_symmetric3_rotate_2_0 = (r_388_sres_first_3 - r_391_const_r_1);
  double r_395_symmetric3_rotate_2_1 = (r_389_sres_first_4 + r_391_const_r_0);
  double r_395_symmetric3_rotate_2_2 = (r_390_sres_first_5 + inertia_4_2_2);
  double data_oinertias_trans_4_0 = r_382_new_translation_0;
  double data_oinertias_trans_4_1 = r_382_new_translation_1;
  double data_oinertias_trans_4_2 = r_382_new_translation_2;
  double data_oinertias_rot_4_0_0 = r_395_symmetric3_rotate_0_0;
  double data_oinertias_rot_4_0_1 = r_395_symmetric3_rotate_0_1;
  double data_oinertias_rot_4_0_2 = r_395_symmetric3_rotate_0_2;
  double data_oinertias_rot_4_1_0 = r_395_symmetric3_rotate_1_0;
  double data_oinertias_rot_4_1_1 = r_395_symmetric3_rotate_1_1;
  double data_oinertias_rot_4_1_2 = r_395_symmetric3_rotate_1_2;
  double data_oinertias_rot_4_2_0 = r_395_symmetric3_rotate_2_0;
  double data_oinertias_rot_4_2_1 = r_395_symmetric3_rotate_2_1;
  double data_oinertias_rot_4_2_2 = r_395_symmetric3_rotate_2_2;
  double motion_act_linear_4_0 = (((oMi_rotation_4_0_0 * act_inv_linear_4_0) + (oMi_rotation_4_0_1 * act_inv_linear_4_1)) + (oMi_rotation_4_0_2 * act_inv_linear_4_2));
  double motion_act_linear_4_1 = (((oMi_rotation_4_1_0 * act_inv_linear_4_0) + (oMi_rotation_4_1_1 * act_inv_linear_4_1)) + (oMi_rotation_4_1_2 * act_inv_linear_4_2));
  double motion_act_linear_4_2 = (((oMi_rotation_4_2_0 * act_inv_linear_4_0) + (oMi_rotation_4_2_1 * act_inv_linear_4_1)) + (oMi_rotation_4_2_2 * act_inv_linear_4_2));
  double motion_act_angular_4_0 = (((oMi_rotation_4_0_0 * act_inv_angular_4_0) + (oMi_rotation_4_0_1 * act_inv_angular_4_1)) + (oMi_rotation_4_0_2 * act_inv_angular_4_2));
  double motion_act_angular_4_1 = (((oMi_rotation_4_1_0 * act_inv_angular_4_0) + (oMi_rotation_4_1_1 * act_inv_angular_4_1)) + (oMi_rotation_4_1_2 * act_inv_angular_4_2));
  double motion_act_angular_4_2 = (((oMi_rotation_4_2_0 * act_inv_angular_4_0) + (oMi_rotation_4_2_1 * act_inv_angular_4_1)) + (oMi_rotation_4_2_2 * act_inv_angular_4_2));
  double motion_act_cross_4_0 = ((oMi_translation_4_1 * motion_act_angular_4_2) - (oMi_translation_4_2 * motion_act_angular_4_1));
  double motion_act_cross_4_1 = ((oMi_translation_4_2 * motion_act_angular_4_0) - (oMi_translation_4_0 * motion_act_angular_4_2));
  double motion_act_cross_4_2 = ((oMi_translation_4_0 * motion_act_angular_4_1) - (oMi_translation_4_1 * motion_act_angular_4_0));
  double motion_act_linear2_4_0 = (motion_act_linear_4_0 + motion_act_cross_4_0);
  double motion_act_linear2_4_1 = (motion_act_linear_4_1 + motion_act_cross_4_1);
  double motion_act_linear2_4_2 = (motion_act_linear_4_2 + motion_act_cross_4_2);
  double act_motion_res_4_0 = motion_act_linear2_4_0;
  double act_motion_res_4_1 = motion_act_linear2_4_1;
  double act_motion_res_4_2 = motion_act_linear2_4_2;
  double act_motion_res_4_3 = motion_act_angular_4_0;
  double act_motion_res_4_4 = motion_act_angular_4_1;
  double act_motion_res_4_5 = motion_act_angular_4_2;
  double ov_4_0 = act_motion_res_4_0;
  double ov_4_1 = act_motion_res_4_1;
  double ov_4_2 = act_motion_res_4_2;
  double ov_4_3 = act_motion_res_4_3;
  double ov_4_4 = act_motion_res_4_4;
  double ov_4_5 = act_motion_res_4_5;
  double t_linear_4_0 = a_final_4_0;
  double t_linear_4_1 = a_final_4_1;
  double t_linear_4_2 = a_final_4_2;
  double t_angular_4_0 = a_final_4_3;
  double t_angular_4_1 = a_final_4_4;
  double t_angular_4_2 = a_final_4_5;
  double r_396_motion_act_linear_4_0 = (((oMi_rotation_4_0_0 * t_linear_4_0) + (oMi_rotation_4_0_1 * t_linear_4_1)) + (oMi_rotation_4_0_2 * t_linear_4_2));
  double r_396_motion_act_linear_4_1 = (((oMi_rotation_4_1_0 * t_linear_4_0) + (oMi_rotation_4_1_1 * t_linear_4_1)) + (oMi_rotation_4_1_2 * t_linear_4_2));
  double r_396_motion_act_linear_4_2 = (((oMi_rotation_4_2_0 * t_linear_4_0) + (oMi_rotation_4_2_1 * t_linear_4_1)) + (oMi_rotation_4_2_2 * t_linear_4_2));
  double r_397_motion_act_angular_4_0 = (((oMi_rotation_4_0_0 * t_angular_4_0) + (oMi_rotation_4_0_1 * t_angular_4_1)) + (oMi_rotation_4_0_2 * t_angular_4_2));
  double r_397_motion_act_angular_4_1 = (((oMi_rotation_4_1_0 * t_angular_4_0) + (oMi_rotation_4_1_1 * t_angular_4_1)) + (oMi_rotation_4_1_2 * t_angular_4_2));
  double r_397_motion_act_angular_4_2 = (((oMi_rotation_4_2_0 * t_angular_4_0) + (oMi_rotation_4_2_1 * t_angular_4_1)) + (oMi_rotation_4_2_2 * t_angular_4_2));
  double r_398_motion_act_cross_4_0 = ((oMi_translation_4_1 * r_397_motion_act_angular_4_2) - (oMi_translation_4_2 * r_397_motion_act_angular_4_1));
  double r_398_motion_act_cross_4_1 = ((oMi_translation_4_2 * r_397_motion_act_angular_4_0) - (oMi_translation_4_0 * r_397_motion_act_angular_4_2));
  double r_398_motion_act_cross_4_2 = ((oMi_translation_4_0 * r_397_motion_act_angular_4_1) - (oMi_translation_4_1 * r_397_motion_act_angular_4_0));
  double r_399_motion_act_linear2_4_0 = (r_396_motion_act_linear_4_0 + r_398_motion_act_cross_4_0);
  double r_399_motion_act_linear2_4_1 = (r_396_motion_act_linear_4_1 + r_398_motion_act_cross_4_1);
  double r_399_motion_act_linear2_4_2 = (r_396_motion_act_linear_4_2 + r_398_motion_act_cross_4_2);
  double r_400_act_motion_res_4_0 = r_399_motion_act_linear2_4_0;
  double r_400_act_motion_res_4_1 = r_399_motion_act_linear2_4_1;
  double r_400_act_motion_res_4_2 = r_399_motion_act_linear2_4_2;
  double r_400_act_motion_res_4_3 = r_397_motion_act_angular_4_0;
  double r_400_act_motion_res_4_4 = r_397_motion_act_angular_4_1;
  double r_400_act_motion_res_4_5 = r_397_motion_act_angular_4_2;
  double oa_4_0 = r_400_act_motion_res_4_0;
  double oa_4_1 = r_400_act_motion_res_4_1;
  double oa_4_2 = r_400_act_motion_res_4_2;
  double oa_4_3 = r_400_act_motion_res_4_3;
  double oa_4_4 = r_400_act_motion_res_4_4;
  double oa_4_5 = r_400_act_motion_res_4_5;
  double r_401_model_gravity_0 = 0;
  double r_401_model_gravity_1 = 0;
  double r_401_model_gravity_2 = -9.81;
  double r_401_model_gravity_3 = 0;
  double r_401_model_gravity_4 = 0;
  double r_401_model_gravity_5 = 0;
  double oa_gf_4_0 = (oa_4_0 - r_401_model_gravity_0);
  double oa_gf_4_1 = (oa_4_1 - r_401_model_gravity_1);
  double oa_gf_4_2 = (oa_4_2 - r_401_model_gravity_2);
  double oa_gf_4_3 = (oa_4_3 - r_401_model_gravity_3);
  double oa_gf_4_4 = (oa_4_4 - r_401_model_gravity_4);
  double oa_gf_4_5 = (oa_4_5 - r_401_model_gravity_5);
  double ov_linear_4_0 = ov_4_0;
  double ov_linear_4_1 = ov_4_1;
  double ov_linear_4_2 = ov_4_2;
  double ov_angular_4_0 = ov_4_3;
  double ov_angular_4_1 = ov_4_4;
  double ov_angular_4_2 = ov_4_5;
  double data_oh_linear_temp1_4_0 = ((r_382_new_translation_1 * ov_angular_4_2) - (r_382_new_translation_2 * ov_angular_4_1));
  double data_oh_linear_temp1_4_1 = ((r_382_new_translation_2 * ov_angular_4_0) - (r_382_new_translation_0 * ov_angular_4_2));
  double data_oh_linear_temp1_4_2 = ((r_382_new_translation_0 * ov_angular_4_1) - (r_382_new_translation_1 * ov_angular_4_0));
  double data_oh_linear_temp2_4_0 = (ov_linear_4_0 - data_oh_linear_temp1_4_0);
  double data_oh_linear_temp2_4_1 = (ov_linear_4_1 - data_oh_linear_temp1_4_1);
  double data_oh_linear_temp2_4_2 = (ov_linear_4_2 - data_oh_linear_temp1_4_2);
  double data_oh_linear_4_0 = (masses_4 * data_oh_linear_temp2_4_0);
  double data_oh_linear_4_1 = (masses_4 * data_oh_linear_temp2_4_1);
  double data_oh_linear_4_2 = (masses_4 * data_oh_linear_temp2_4_2);
  double r_402_ = (r_395_symmetric3_rotate_0_0 * ov_angular_4_0);
  double r_403_ = (r_395_symmetric3_rotate_0_1 * ov_angular_4_1);
  double r_404_ = (r_395_symmetric3_rotate_0_2 * ov_angular_4_2);
  double r_405_ = (r_395_symmetric3_rotate_0_1 * ov_angular_4_0);
  double r_406_ = (r_395_symmetric3_rotate_1_1 * ov_angular_4_1);
  double r_407_ = (r_395_symmetric3_rotate_1_2 * ov_angular_4_2);
  double r_408_ = (r_395_symmetric3_rotate_0_2 * ov_angular_4_0);
  double r_409_ = (r_395_symmetric3_rotate_1_2 * ov_angular_4_1);
  double r_410_ = (r_395_symmetric3_rotate_2_2 * ov_angular_4_2);
  double rhsMult1_temp_4 = (r_402_ + r_403_);
  double rhsMult1_4 = (rhsMult1_temp_4 + r_404_);
  double rhsMult2_temp_4 = (r_405_ + r_406_);
  double rhsMult2_4 = (rhsMult2_temp_4 + r_407_);
  double rhsMult3_temp_4 = (r_408_ + r_409_);
  double rhsMult3_4 = (rhsMult3_temp_4 + r_410_);
  double rhsMult_4_0 = rhsMult1_4;
  double rhsMult_4_1 = rhsMult2_4;
  double rhsMult_4_2 = rhsMult3_4;
  double data_oh_angular_temp2_4_0 = ((r_382_new_translation_1 * data_oh_linear_4_2) - (r_382_new_translation_2 * data_oh_linear_4_1));
  double data_oh_angular_temp2_4_1 = ((r_382_new_translation_2 * data_oh_linear_4_0) - (r_382_new_translation_0 * data_oh_linear_4_2));
  double data_oh_angular_temp2_4_2 = ((r_382_new_translation_0 * data_oh_linear_4_1) - (r_382_new_translation_1 * data_oh_linear_4_0));
  double data_oh_angular_4_0 = (rhsMult_4_0 + data_oh_angular_temp2_4_0);
  double data_oh_angular_4_1 = (rhsMult_4_1 + data_oh_angular_temp2_4_1);
  double data_oh_angular_4_2 = (rhsMult_4_2 + data_oh_angular_temp2_4_2);
  double all_oh_4_0 = data_oh_linear_4_0;
  double all_oh_4_1 = data_oh_linear_4_1;
  double all_oh_4_2 = data_oh_linear_4_2;
  double all_oh_4_3 = data_oh_angular_4_0;
  double all_oh_4_4 = data_oh_angular_4_1;
  double all_oh_4_5 = data_oh_angular_4_2;
  double oa_gf_linear_4_0 = oa_gf_4_0;
  double oa_gf_linear_4_1 = oa_gf_4_1;
  double oa_gf_linear_4_2 = oa_gf_4_2;
  double oa_gf_angular_4_0 = oa_gf_4_3;
  double oa_gf_angular_4_1 = oa_gf_4_4;
  double oa_gf_angular_4_2 = oa_gf_4_5;
  double data_of_linear_temp1_4_0 = ((r_382_new_translation_1 * oa_gf_angular_4_2) - (r_382_new_translation_2 * oa_gf_angular_4_1));
  double data_of_linear_temp1_4_1 = ((r_382_new_translation_2 * oa_gf_angular_4_0) - (r_382_new_translation_0 * oa_gf_angular_4_2));
  double data_of_linear_temp1_4_2 = ((r_382_new_translation_0 * oa_gf_angular_4_1) - (r_382_new_translation_1 * oa_gf_angular_4_0));
  double data_of_linear_temp2_4_0 = (oa_gf_linear_4_0 - data_of_linear_temp1_4_0);
  double data_of_linear_temp2_4_1 = (oa_gf_linear_4_1 - data_of_linear_temp1_4_1);
  double data_of_linear_temp2_4_2 = (oa_gf_linear_4_2 - data_of_linear_temp1_4_2);
  double data_of_linear_temp3_4_0 = (masses_4 * data_of_linear_temp2_4_0);
  double data_of_linear_temp3_4_1 = (masses_4 * data_of_linear_temp2_4_1);
  double data_of_linear_temp3_4_2 = (masses_4 * data_of_linear_temp2_4_2);
  double r_411_ = (r_395_symmetric3_rotate_0_0 * oa_gf_angular_4_0);
  double r_412_ = (r_395_symmetric3_rotate_0_1 * oa_gf_angular_4_1);
  double r_413_ = (r_395_symmetric3_rotate_0_2 * oa_gf_angular_4_2);
  double r_414_ = (r_395_symmetric3_rotate_0_1 * oa_gf_angular_4_0);
  double r_415_ = (r_395_symmetric3_rotate_1_1 * oa_gf_angular_4_1);
  double r_416_ = (r_395_symmetric3_rotate_1_2 * oa_gf_angular_4_2);
  double r_417_ = (r_395_symmetric3_rotate_0_2 * oa_gf_angular_4_0);
  double r_418_ = (r_395_symmetric3_rotate_1_2 * oa_gf_angular_4_1);
  double r_419_ = (r_395_symmetric3_rotate_2_2 * oa_gf_angular_4_2);
  double r_420_rhsMult1_temp_4 = (r_411_ + r_412_);
  double r_421_rhsMult1_4 = (r_420_rhsMult1_temp_4 + r_413_);
  double r_422_rhsMult2_temp_4 = (r_414_ + r_415_);
  double r_423_rhsMult2_4 = (r_422_rhsMult2_temp_4 + r_416_);
  double r_424_rhsMult3_temp_4 = (r_417_ + r_418_);
  double r_425_rhsMult3_4 = (r_424_rhsMult3_temp_4 + r_419_);
  double r_426_rhsMult_4_0 = r_421_rhsMult1_4;
  double r_426_rhsMult_4_1 = r_423_rhsMult2_4;
  double r_426_rhsMult_4_2 = r_425_rhsMult3_4;
  double data_of_angular_temp2_4_0 = ((r_382_new_translation_1 * data_of_linear_temp3_4_2) - (r_382_new_translation_2 * data_of_linear_temp3_4_1));
  double data_of_angular_temp2_4_1 = ((r_382_new_translation_2 * data_of_linear_temp3_4_0) - (r_382_new_translation_0 * data_of_linear_temp3_4_2));
  double data_of_angular_temp2_4_2 = ((r_382_new_translation_0 * data_of_linear_temp3_4_1) - (r_382_new_translation_1 * data_of_linear_temp3_4_0));
  double data_of_angular_temp3_4_0 = (r_426_rhsMult_4_0 + data_of_angular_temp2_4_0);
  double data_of_angular_temp3_4_1 = (r_426_rhsMult_4_1 + data_of_angular_temp2_4_1);
  double data_of_angular_temp3_4_2 = (r_426_rhsMult_4_2 + data_of_angular_temp2_4_2);
  double data_of_linear_temp4_4_0 = ((ov_angular_4_1 * data_oh_linear_4_2) - (ov_angular_4_2 * data_oh_linear_4_1));
  double data_of_linear_temp4_4_1 = ((ov_angular_4_2 * data_oh_linear_4_0) - (ov_angular_4_0 * data_oh_linear_4_2));
  double data_of_linear_temp4_4_2 = ((ov_angular_4_0 * data_oh_linear_4_1) - (ov_angular_4_1 * data_oh_linear_4_0));
  double data_of_angular_temp4_4_0 = ((ov_angular_4_1 * data_oh_angular_4_2) - (ov_angular_4_2 * data_oh_angular_4_1));
  double data_of_angular_temp4_4_1 = ((ov_angular_4_2 * data_oh_angular_4_0) - (ov_angular_4_0 * data_oh_angular_4_2));
  double data_of_angular_temp4_4_2 = ((ov_angular_4_0 * data_oh_angular_4_1) - (ov_angular_4_1 * data_oh_angular_4_0));
  double data_of_angular_temp5_4_0 = ((ov_linear_4_1 * data_oh_linear_4_2) - (ov_linear_4_2 * data_oh_linear_4_1));
  double data_of_angular_temp5_4_1 = ((ov_linear_4_2 * data_oh_linear_4_0) - (ov_linear_4_0 * data_oh_linear_4_2));
  double data_of_angular_temp5_4_2 = ((ov_linear_4_0 * data_oh_linear_4_1) - (ov_linear_4_1 * data_oh_linear_4_0));
  double data_of_angular_temp6_4_0 = (data_of_angular_temp4_4_0 + data_of_angular_temp5_4_0);
  double data_of_angular_temp6_4_1 = (data_of_angular_temp4_4_1 + data_of_angular_temp5_4_1);
  double data_of_angular_temp6_4_2 = (data_of_angular_temp4_4_2 + data_of_angular_temp5_4_2);
  double data_of_linear_4_0 = (data_of_linear_temp3_4_0 + data_of_linear_temp4_4_0);
  double data_of_linear_4_1 = (data_of_linear_temp3_4_1 + data_of_linear_temp4_4_1);
  double data_of_linear_4_2 = (data_of_linear_temp3_4_2 + data_of_linear_temp4_4_2);
  double data_of_angular_4_0 = (data_of_angular_temp3_4_0 + data_of_angular_temp6_4_0);
  double data_of_angular_4_1 = (data_of_angular_temp3_4_1 + data_of_angular_temp6_4_1);
  double data_of_angular_4_2 = (data_of_angular_temp3_4_2 + data_of_angular_temp6_4_2);
  double all_of_4_0 = data_of_linear_4_0;
  double all_of_4_1 = data_of_linear_4_1;
  double all_of_4_2 = data_of_linear_4_2;
  double all_of_4_3 = data_of_angular_4_0;
  double all_of_4_4 = data_of_angular_4_1;
  double all_of_4_5 = data_of_angular_4_2;
  double act_constraint_rotation_col_4_0 = oMi_rotation_4_0_2;
  double act_constraint_rotation_col_4_1 = oMi_rotation_4_1_2;
  double act_constraint_rotation_col_4_2 = oMi_rotation_4_2_2;
  double act_constraint_linear_4_0 = ((oMi_translation_4_1 * act_constraint_rotation_col_4_2) - (oMi_translation_4_2 * act_constraint_rotation_col_4_1));
  double act_constraint_linear_4_1 = ((oMi_translation_4_2 * act_constraint_rotation_col_4_0) - (oMi_translation_4_0 * act_constraint_rotation_col_4_2));
  double act_constraint_linear_4_2 = ((oMi_translation_4_0 * act_constraint_rotation_col_4_1) - (oMi_translation_4_1 * act_constraint_rotation_col_4_0));
  double j_cols_4_0 = act_constraint_linear_4_0;
  double j_cols_4_1 = act_constraint_linear_4_1;
  double j_cols_4_2 = act_constraint_linear_4_2;
  double j_cols_4_3 = act_constraint_rotation_col_4_0;
  double j_cols_4_4 = act_constraint_rotation_col_4_1;
  double j_cols_4_5 = act_constraint_rotation_col_4_2;
  double mout_linear_cross_angular_4_0 = ((ov_linear_4_1 * act_constraint_rotation_col_4_2) - (ov_linear_4_2 * act_constraint_rotation_col_4_1));
  double mout_linear_cross_angular_4_1 = ((ov_linear_4_2 * act_constraint_rotation_col_4_0) - (ov_linear_4_0 * act_constraint_rotation_col_4_2));
  double mout_linear_cross_angular_4_2 = ((ov_linear_4_0 * act_constraint_rotation_col_4_1) - (ov_linear_4_1 * act_constraint_rotation_col_4_0));
  double mout_angular_cross_linear_4_0 = ((ov_angular_4_1 * act_constraint_linear_4_2) - (ov_angular_4_2 * act_constraint_linear_4_1));
  double mout_angular_cross_linear_4_1 = ((ov_angular_4_2 * act_constraint_linear_4_0) - (ov_angular_4_0 * act_constraint_linear_4_2));
  double mout_angular_cross_linear_4_2 = ((ov_angular_4_0 * act_constraint_linear_4_1) - (ov_angular_4_1 * act_constraint_linear_4_0));
  double mout_linear_4_0 = (mout_linear_cross_angular_4_0 + mout_angular_cross_linear_4_0);
  double mout_linear_4_1 = (mout_linear_cross_angular_4_1 + mout_angular_cross_linear_4_1);
  double mout_linear_4_2 = (mout_linear_cross_angular_4_2 + mout_angular_cross_linear_4_2);
  double mout_angular_4_0 = ((ov_angular_4_1 * act_constraint_rotation_col_4_2) - (ov_angular_4_2 * act_constraint_rotation_col_4_1));
  double mout_angular_4_1 = ((ov_angular_4_2 * act_constraint_rotation_col_4_0) - (ov_angular_4_0 * act_constraint_rotation_col_4_2));
  double mout_angular_4_2 = ((ov_angular_4_0 * act_constraint_rotation_col_4_1) - (ov_angular_4_1 * act_constraint_rotation_col_4_0));
  double dj_cols_4_0 = mout_linear_4_0;
  double dj_cols_4_1 = mout_linear_4_1;
  double dj_cols_4_2 = mout_linear_4_2;
  double dj_cols_4_3 = mout_angular_4_0;
  double dj_cols_4_4 = mout_angular_4_1;
  double dj_cols_4_5 = mout_angular_4_2;
  double oa_gf_parent_linear_4_0 = oa_gf_3_0;
  double oa_gf_parent_linear_4_1 = oa_gf_3_1;
  double oa_gf_parent_linear_4_2 = oa_gf_3_2;
  double oa_gf_parent_angular_4_0 = oa_gf_3_3;
  double oa_gf_parent_angular_4_1 = oa_gf_3_4;
  double oa_gf_parent_angular_4_2 = oa_gf_3_5;
  double r_427_mout_linear_cross_angular_4_0 = ((oa_gf_parent_linear_4_1 * act_constraint_rotation_col_4_2) - (oa_gf_parent_linear_4_2 * act_constraint_rotation_col_4_1));
  double r_427_mout_linear_cross_angular_4_1 = ((oa_gf_parent_linear_4_2 * act_constraint_rotation_col_4_0) - (oa_gf_parent_linear_4_0 * act_constraint_rotation_col_4_2));
  double r_427_mout_linear_cross_angular_4_2 = ((oa_gf_parent_linear_4_0 * act_constraint_rotation_col_4_1) - (oa_gf_parent_linear_4_1 * act_constraint_rotation_col_4_0));
  double r_428_mout_angular_cross_linear_4_0 = ((oa_gf_parent_angular_4_1 * act_constraint_linear_4_2) - (oa_gf_parent_angular_4_2 * act_constraint_linear_4_1));
  double r_428_mout_angular_cross_linear_4_1 = ((oa_gf_parent_angular_4_2 * act_constraint_linear_4_0) - (oa_gf_parent_angular_4_0 * act_constraint_linear_4_2));
  double r_428_mout_angular_cross_linear_4_2 = ((oa_gf_parent_angular_4_0 * act_constraint_linear_4_1) - (oa_gf_parent_angular_4_1 * act_constraint_linear_4_0));
  double r_429_mout_linear_4_0 = (r_427_mout_linear_cross_angular_4_0 + r_428_mout_angular_cross_linear_4_0);
  double r_429_mout_linear_4_1 = (r_427_mout_linear_cross_angular_4_1 + r_428_mout_angular_cross_linear_4_1);
  double r_429_mout_linear_4_2 = (r_427_mout_linear_cross_angular_4_2 + r_428_mout_angular_cross_linear_4_2);
  double r_430_mout_angular_4_0 = ((oa_gf_parent_angular_4_1 * act_constraint_rotation_col_4_2) - (oa_gf_parent_angular_4_2 * act_constraint_rotation_col_4_1));
  double r_430_mout_angular_4_1 = ((oa_gf_parent_angular_4_2 * act_constraint_rotation_col_4_0) - (oa_gf_parent_angular_4_0 * act_constraint_rotation_col_4_2));
  double r_430_mout_angular_4_2 = ((oa_gf_parent_angular_4_0 * act_constraint_rotation_col_4_1) - (oa_gf_parent_angular_4_1 * act_constraint_rotation_col_4_0));
  double dAdv_cols_linear_4_0 = mout_linear_4_0;
  double dAdv_cols_linear_4_1 = mout_linear_4_1;
  double dAdv_cols_linear_4_2 = mout_linear_4_2;
  double dAdv_cols_angular_4_0 = mout_angular_4_0;
  double dAdv_cols_angular_4_1 = mout_angular_4_1;
  double dAdv_cols_angular_4_2 = mout_angular_4_2;
  double data_ov_parent_linear_4_0 = ov_3_0;
  double data_ov_parent_linear_4_1 = ov_3_1;
  double data_ov_parent_linear_4_2 = ov_3_2;
  double data_ov_parent_angular_4_0 = ov_3_3;
  double data_ov_parent_angular_4_1 = ov_3_4;
  double data_ov_parent_angular_4_2 = ov_3_5;
  double r_431_mout_linear_cross_angular_4_0 = ((data_ov_parent_linear_4_1 * act_constraint_rotation_col_4_2) - (data_ov_parent_linear_4_2 * act_constraint_rotation_col_4_1));
  double r_431_mout_linear_cross_angular_4_1 = ((data_ov_parent_linear_4_2 * act_constraint_rotation_col_4_0) - (data_ov_parent_linear_4_0 * act_constraint_rotation_col_4_2));
  double r_431_mout_linear_cross_angular_4_2 = ((data_ov_parent_linear_4_0 * act_constraint_rotation_col_4_1) - (data_ov_parent_linear_4_1 * act_constraint_rotation_col_4_0));
  double r_432_mout_angular_cross_linear_4_0 = ((data_ov_parent_angular_4_1 * act_constraint_linear_4_2) - (data_ov_parent_angular_4_2 * act_constraint_linear_4_1));
  double r_432_mout_angular_cross_linear_4_1 = ((data_ov_parent_angular_4_2 * act_constraint_linear_4_0) - (data_ov_parent_angular_4_0 * act_constraint_linear_4_2));
  double r_432_mout_angular_cross_linear_4_2 = ((data_ov_parent_angular_4_0 * act_constraint_linear_4_1) - (data_ov_parent_angular_4_1 * act_constraint_linear_4_0));
  double r_433_mout_linear_4_0 = (r_431_mout_linear_cross_angular_4_0 + r_432_mout_angular_cross_linear_4_0);
  double r_433_mout_linear_4_1 = (r_431_mout_linear_cross_angular_4_1 + r_432_mout_angular_cross_linear_4_1);
  double r_433_mout_linear_4_2 = (r_431_mout_linear_cross_angular_4_2 + r_432_mout_angular_cross_linear_4_2);
  double r_434_mout_angular_4_0 = ((data_ov_parent_angular_4_1 * act_constraint_rotation_col_4_2) - (data_ov_parent_angular_4_2 * act_constraint_rotation_col_4_1));
  double r_434_mout_angular_4_1 = ((data_ov_parent_angular_4_2 * act_constraint_rotation_col_4_0) - (data_ov_parent_angular_4_0 * act_constraint_rotation_col_4_2));
  double r_434_mout_angular_4_2 = ((data_ov_parent_angular_4_0 * act_constraint_rotation_col_4_1) - (data_ov_parent_angular_4_1 * act_constraint_rotation_col_4_0));
  double r_435_data_ov_parent_linear_4_0 = ov_3_0;
  double r_435_data_ov_parent_linear_4_1 = ov_3_1;
  double r_435_data_ov_parent_linear_4_2 = ov_3_2;
  double r_436_data_ov_parent_angular_4_0 = ov_3_3;
  double r_436_data_ov_parent_angular_4_1 = ov_3_4;
  double r_436_data_ov_parent_angular_4_2 = ov_3_5;
  double r_437_mout_linear_cross_angular_4_0 = ((r_435_data_ov_parent_linear_4_1 * r_434_mout_angular_4_2) - (r_435_data_ov_parent_linear_4_2 * r_434_mout_angular_4_1));
  double r_437_mout_linear_cross_angular_4_1 = ((r_435_data_ov_parent_linear_4_2 * r_434_mout_angular_4_0) - (r_435_data_ov_parent_linear_4_0 * r_434_mout_angular_4_2));
  double r_437_mout_linear_cross_angular_4_2 = ((r_435_data_ov_parent_linear_4_0 * r_434_mout_angular_4_1) - (r_435_data_ov_parent_linear_4_1 * r_434_mout_angular_4_0));
  double r_438_mout_angular_cross_linear_4_0 = ((r_436_data_ov_parent_angular_4_1 * r_433_mout_linear_4_2) - (r_436_data_ov_parent_angular_4_2 * r_433_mout_linear_4_1));
  double r_438_mout_angular_cross_linear_4_1 = ((r_436_data_ov_parent_angular_4_2 * r_433_mout_linear_4_0) - (r_436_data_ov_parent_angular_4_0 * r_433_mout_linear_4_2));
  double r_438_mout_angular_cross_linear_4_2 = ((r_436_data_ov_parent_angular_4_0 * r_433_mout_linear_4_1) - (r_436_data_ov_parent_angular_4_1 * r_433_mout_linear_4_0));
  double r_439_mout_linear_4_0 = (r_437_mout_linear_cross_angular_4_0 + r_438_mout_angular_cross_linear_4_0);
  double r_439_mout_linear_4_1 = (r_437_mout_linear_cross_angular_4_1 + r_438_mout_angular_cross_linear_4_1);
  double r_439_mout_linear_4_2 = (r_437_mout_linear_cross_angular_4_2 + r_438_mout_angular_cross_linear_4_2);
  double r_440_mout_angular_4_0 = ((r_436_data_ov_parent_angular_4_1 * r_434_mout_angular_4_2) - (r_436_data_ov_parent_angular_4_2 * r_434_mout_angular_4_1));
  double r_440_mout_angular_4_1 = ((r_436_data_ov_parent_angular_4_2 * r_434_mout_angular_4_0) - (r_436_data_ov_parent_angular_4_0 * r_434_mout_angular_4_2));
  double r_440_mout_angular_4_2 = ((r_436_data_ov_parent_angular_4_0 * r_434_mout_angular_4_1) - (r_436_data_ov_parent_angular_4_1 * r_434_mout_angular_4_0));
  double dAdq_cols_linear_4_0 = (r_429_mout_linear_4_0 + r_439_mout_linear_4_0);
  double dAdq_cols_linear_4_1 = (r_429_mout_linear_4_1 + r_439_mout_linear_4_1);
  double dAdq_cols_linear_4_2 = (r_429_mout_linear_4_2 + r_439_mout_linear_4_2);
  double dAdq_cols_angular_4_0 = (r_430_mout_angular_4_0 + r_440_mout_angular_4_0);
  double dAdq_cols_angular_4_1 = (r_430_mout_angular_4_1 + r_440_mout_angular_4_1);
  double dAdq_cols_angular_4_2 = (r_430_mout_angular_4_2 + r_440_mout_angular_4_2);
  double dAdv_cols_linear_updated_4_0 = (dAdv_cols_linear_4_0 + r_433_mout_linear_4_0);
  double dAdv_cols_linear_updated_4_1 = (dAdv_cols_linear_4_1 + r_433_mout_linear_4_1);
  double dAdv_cols_linear_updated_4_2 = (dAdv_cols_linear_4_2 + r_433_mout_linear_4_2);
  double dAdv_cols_angular_updated_4_0 = (dAdv_cols_angular_4_0 + r_434_mout_angular_4_0);
  double dAdv_cols_angular_updated_4_1 = (dAdv_cols_angular_4_1 + r_434_mout_angular_4_1);
  double dAdv_cols_angular_updated_4_2 = (dAdv_cols_angular_4_2 + r_434_mout_angular_4_2);
  double dAdq_cols_4_0 = dAdq_cols_linear_4_0;
  double dAdq_cols_4_1 = dAdq_cols_linear_4_1;
  double dAdq_cols_4_2 = dAdq_cols_linear_4_2;
  double dAdq_cols_4_3 = dAdq_cols_angular_4_0;
  double dAdq_cols_4_4 = dAdq_cols_angular_4_1;
  double dAdq_cols_4_5 = dAdq_cols_angular_4_2;
  double dAdv_cols_4_0 = dAdv_cols_linear_updated_4_0;
  double dAdv_cols_4_1 = dAdv_cols_linear_updated_4_1;
  double dAdv_cols_4_2 = dAdv_cols_linear_updated_4_2;
  double dAdv_cols_4_3 = dAdv_cols_angular_updated_4_0;
  double dAdv_cols_4_4 = dAdv_cols_angular_updated_4_1;
  double dAdv_cols_4_5 = dAdv_cols_angular_updated_4_2;
  double dVdq_cols_4_0 = r_433_mout_linear_4_0;
  double dVdq_cols_4_1 = r_433_mout_linear_4_1;
  double dVdq_cols_4_2 = r_433_mout_linear_4_2;
  double dVdq_cols_4_3 = r_434_mout_angular_4_0;
  double dVdq_cols_4_4 = r_434_mout_angular_4_1;
  double dVdq_cols_4_5 = r_434_mout_angular_4_2;
  double r_441_mv_linear_0 = (masses_4 * ov_linear_4_0);
  double r_441_mv_linear_1 = (masses_4 * ov_linear_4_1);
  double r_441_mv_linear_2 = (masses_4 * ov_linear_4_2);
  double r_442_mv_angular_0 = (masses_4 * ov_angular_4_0);
  double r_442_mv_angular_1 = (masses_4 * ov_angular_4_1);
  double r_442_mv_angular_2 = (masses_4 * ov_angular_4_2);
  double r_443_skew_vec3d_0_0 = 0;
  double r_443_skew_vec3d_0_1 = -(r_441_mv_linear_2);
  double r_443_skew_vec3d_0_2 = r_441_mv_linear_1;
  double r_443_skew_vec3d_1_0 = r_441_mv_linear_2;
  double r_443_skew_vec3d_1_1 = 0;
  double r_443_skew_vec3d_1_2 = -(r_441_mv_linear_0);
  double r_443_skew_vec3d_2_0 = -(r_441_mv_linear_1);
  double r_443_skew_vec3d_2_1 = r_441_mv_linear_0;
  double r_443_skew_vec3d_2_2 = 0;
  double r_444_skew_square_c1_0_0 = (r_442_mv_angular_0 * r_382_new_translation_0);
  double r_444_skew_square_c1_0_1 = (r_442_mv_angular_1 * r_382_new_translation_0);
  double r_444_skew_square_c1_0_2 = (r_442_mv_angular_2 * r_382_new_translation_0);
  double r_444_skew_square_c1_1_0 = (r_442_mv_angular_0 * r_382_new_translation_1);
  double r_444_skew_square_c1_1_1 = (r_442_mv_angular_1 * r_382_new_translation_1);
  double r_444_skew_square_c1_1_2 = (r_442_mv_angular_2 * r_382_new_translation_1);
  double r_444_skew_square_c1_2_0 = (r_442_mv_angular_0 * r_382_new_translation_2);
  double r_444_skew_square_c1_2_1 = (r_442_mv_angular_1 * r_382_new_translation_2);
  double r_444_skew_square_c1_2_2 = (r_442_mv_angular_2 * r_382_new_translation_2);
  double r_445_skew_square_udotv = (((r_382_new_translation_0 * r_442_mv_angular_0) + (r_382_new_translation_1 * r_442_mv_angular_1)) + (r_382_new_translation_2 * r_442_mv_angular_2));
  double r_446_skew_square_c2_0_0 = (r_444_skew_square_c1_0_0 - r_445_skew_square_udotv);
  double r_446_skew_square_c2_0_1 = r_444_skew_square_c1_0_1;
  double r_446_skew_square_c2_0_2 = r_444_skew_square_c1_0_2;
  double r_446_skew_square_c2_1_0 = r_444_skew_square_c1_1_0;
  double r_446_skew_square_c2_1_1 = (r_444_skew_square_c1_1_1 - r_445_skew_square_udotv);
  double r_446_skew_square_c2_1_2 = r_444_skew_square_c1_1_2;
  double r_446_skew_square_c2_2_0 = r_444_skew_square_c1_2_0;
  double r_446_skew_square_c2_2_1 = r_444_skew_square_c1_2_1;
  double r_446_skew_square_c2_2_2 = (r_444_skew_square_c1_2_2 - r_445_skew_square_udotv);
  double r_447_skew_square_c1_0_0 = (r_382_new_translation_0 * r_442_mv_angular_0);
  double r_447_skew_square_c1_0_1 = (r_382_new_translation_1 * r_442_mv_angular_0);
  double r_447_skew_square_c1_0_2 = (r_382_new_translation_2 * r_442_mv_angular_0);
  double r_447_skew_square_c1_1_0 = (r_382_new_translation_0 * r_442_mv_angular_1);
  double r_447_skew_square_c1_1_1 = (r_382_new_translation_1 * r_442_mv_angular_1);
  double r_447_skew_square_c1_1_2 = (r_382_new_translation_2 * r_442_mv_angular_1);
  double r_447_skew_square_c1_2_0 = (r_382_new_translation_0 * r_442_mv_angular_2);
  double r_447_skew_square_c1_2_1 = (r_382_new_translation_1 * r_442_mv_angular_2);
  double r_447_skew_square_c1_2_2 = (r_382_new_translation_2 * r_442_mv_angular_2);
  double r_448_skew_square_udotv = (((r_442_mv_angular_0 * r_382_new_translation_0) + (r_442_mv_angular_1 * r_382_new_translation_1)) + (r_442_mv_angular_2 * r_382_new_translation_2));
  double r_449_skew_square_c2_0_0 = (r_447_skew_square_c1_0_0 - r_448_skew_square_udotv);
  double r_449_skew_square_c2_0_1 = r_447_skew_square_c1_0_1;
  double r_449_skew_square_c2_0_2 = r_447_skew_square_c1_0_2;
  double r_449_skew_square_c2_1_0 = r_447_skew_square_c1_1_0;
  double r_449_skew_square_c2_1_1 = (r_447_skew_square_c1_1_1 - r_448_skew_square_udotv);
  double r_449_skew_square_c2_1_2 = r_447_skew_square_c1_1_2;
  double r_449_skew_square_c2_2_0 = r_447_skew_square_c1_2_0;
  double r_449_skew_square_c2_2_1 = r_447_skew_square_c1_2_1;
  double r_449_skew_square_c2_2_2 = (r_447_skew_square_c1_2_2 - r_448_skew_square_udotv);
  double r_450_res_first_temp_0_0 = (r_449_skew_square_c2_0_0 - r_446_skew_square_c2_0_0);
  double r_450_res_first_temp_0_1 = (r_449_skew_square_c2_0_1 - r_446_skew_square_c2_0_1);
  double r_450_res_first_temp_0_2 = (r_449_skew_square_c2_0_2 - r_446_skew_square_c2_0_2);
  double r_450_res_first_temp_1_0 = (r_449_skew_square_c2_1_0 - r_446_skew_square_c2_1_0);
  double r_450_res_first_temp_1_1 = (r_449_skew_square_c2_1_1 - r_446_skew_square_c2_1_1);
  double r_450_res_first_temp_1_2 = (r_449_skew_square_c2_1_2 - r_446_skew_square_c2_1_2);
  double r_450_res_first_temp_2_0 = (r_449_skew_square_c2_2_0 - r_446_skew_square_c2_2_0);
  double r_450_res_first_temp_2_1 = (r_449_skew_square_c2_2_1 - r_446_skew_square_c2_2_1);
  double r_450_res_first_temp_2_2 = (r_449_skew_square_c2_2_2 - r_446_skew_square_c2_2_2);
  double r_451_res_first_0_0 = (r_450_res_first_temp_0_0 - r_443_skew_vec3d_0_0);
  double r_451_res_first_0_1 = (r_450_res_first_temp_0_1 - r_443_skew_vec3d_0_1);
  double r_451_res_first_0_2 = (r_450_res_first_temp_0_2 - r_443_skew_vec3d_0_2);
  double r_451_res_first_1_0 = (r_450_res_first_temp_1_0 - r_443_skew_vec3d_1_0);
  double r_451_res_first_1_1 = (r_450_res_first_temp_1_1 - r_443_skew_vec3d_1_1);
  double r_451_res_first_1_2 = (r_450_res_first_temp_1_2 - r_443_skew_vec3d_1_2);
  double r_451_res_first_2_0 = (r_450_res_first_temp_2_0 - r_443_skew_vec3d_2_0);
  double r_451_res_first_2_1 = (r_450_res_first_temp_2_1 - r_443_skew_vec3d_2_1);
  double r_451_res_first_2_2 = (r_450_res_first_temp_2_2 - r_443_skew_vec3d_2_2);
  double r_452_skew_square_c1_0_0 = (r_441_mv_linear_0 * r_382_new_translation_0);
  double r_452_skew_square_c1_0_1 = (r_441_mv_linear_1 * r_382_new_translation_0);
  double r_452_skew_square_c1_0_2 = (r_441_mv_linear_2 * r_382_new_translation_0);
  double r_452_skew_square_c1_1_0 = (r_441_mv_linear_0 * r_382_new_translation_1);
  double r_452_skew_square_c1_1_1 = (r_441_mv_linear_1 * r_382_new_translation_1);
  double r_452_skew_square_c1_1_2 = (r_441_mv_linear_2 * r_382_new_translation_1);
  double r_452_skew_square_c1_2_0 = (r_441_mv_linear_0 * r_382_new_translation_2);
  double r_452_skew_square_c1_2_1 = (r_441_mv_linear_1 * r_382_new_translation_2);
  double r_452_skew_square_c1_2_2 = (r_441_mv_linear_2 * r_382_new_translation_2);
  double r_453_skew_square_udotv = (((r_382_new_translation_0 * r_441_mv_linear_0) + (r_382_new_translation_1 * r_441_mv_linear_1)) + (r_382_new_translation_2 * r_441_mv_linear_2));
  double r_454_skew_square_c2_0_0 = (r_452_skew_square_c1_0_0 - r_453_skew_square_udotv);
  double r_454_skew_square_c2_0_1 = r_452_skew_square_c1_0_1;
  double r_454_skew_square_c2_0_2 = r_452_skew_square_c1_0_2;
  double r_454_skew_square_c2_1_0 = r_452_skew_square_c1_1_0;
  double r_454_skew_square_c2_1_1 = (r_452_skew_square_c1_1_1 - r_453_skew_square_udotv);
  double r_454_skew_square_c2_1_2 = r_452_skew_square_c1_1_2;
  double r_454_skew_square_c2_2_0 = r_452_skew_square_c1_2_0;
  double r_454_skew_square_c2_2_1 = r_452_skew_square_c1_2_1;
  double r_454_skew_square_c2_2_2 = (r_452_skew_square_c1_2_2 - r_453_skew_square_udotv);
  double r_455_skew_square_c1_0_0 = (r_382_new_translation_0 * r_441_mv_linear_0);
  double r_455_skew_square_c1_0_1 = (r_382_new_translation_1 * r_441_mv_linear_0);
  double r_455_skew_square_c1_0_2 = (r_382_new_translation_2 * r_441_mv_linear_0);
  double r_455_skew_square_c1_1_0 = (r_382_new_translation_0 * r_441_mv_linear_1);
  double r_455_skew_square_c1_1_1 = (r_382_new_translation_1 * r_441_mv_linear_1);
  double r_455_skew_square_c1_1_2 = (r_382_new_translation_2 * r_441_mv_linear_1);
  double r_455_skew_square_c1_2_0 = (r_382_new_translation_0 * r_441_mv_linear_2);
  double r_455_skew_square_c1_2_1 = (r_382_new_translation_1 * r_441_mv_linear_2);
  double r_455_skew_square_c1_2_2 = (r_382_new_translation_2 * r_441_mv_linear_2);
  double r_456_skew_square_udotv = (((r_441_mv_linear_0 * r_382_new_translation_0) + (r_441_mv_linear_1 * r_382_new_translation_1)) + (r_441_mv_linear_2 * r_382_new_translation_2));
  double r_457_skew_square_c2_0_0 = (r_455_skew_square_c1_0_0 - r_456_skew_square_udotv);
  double r_457_skew_square_c2_0_1 = r_455_skew_square_c1_0_1;
  double r_457_skew_square_c2_0_2 = r_455_skew_square_c1_0_2;
  double r_457_skew_square_c2_1_0 = r_455_skew_square_c1_1_0;
  double r_457_skew_square_c2_1_1 = (r_455_skew_square_c1_1_1 - r_456_skew_square_udotv);
  double r_457_skew_square_c2_1_2 = r_455_skew_square_c1_1_2;
  double r_457_skew_square_c2_2_0 = r_455_skew_square_c1_2_0;
  double r_457_skew_square_c2_2_1 = r_455_skew_square_c1_2_1;
  double r_457_skew_square_c2_2_2 = (r_455_skew_square_c1_2_2 - r_456_skew_square_udotv);
  double r_458_skew_second_second_neg_0_0 = -(r_454_skew_square_c2_0_0);
  double r_458_skew_second_second_neg_0_1 = -(r_454_skew_square_c2_0_1);
  double r_458_skew_second_second_neg_0_2 = -(r_454_skew_square_c2_0_2);
  double r_458_skew_second_second_neg_1_0 = -(r_454_skew_square_c2_1_0);
  double r_458_skew_second_second_neg_1_1 = -(r_454_skew_square_c2_1_1);
  double r_458_skew_second_second_neg_1_2 = -(r_454_skew_square_c2_1_2);
  double r_458_skew_second_second_neg_2_0 = -(r_454_skew_square_c2_2_0);
  double r_458_skew_second_second_neg_2_1 = -(r_454_skew_square_c2_2_1);
  double r_458_skew_second_second_neg_2_2 = -(r_454_skew_square_c2_2_2);
  double r_459_res_second_0_0 = (r_458_skew_second_second_neg_0_0 - r_457_skew_square_c2_0_0);
  double r_459_res_second_0_1 = (r_458_skew_second_second_neg_0_1 - r_457_skew_square_c2_0_1);
  double r_459_res_second_0_2 = (r_458_skew_second_second_neg_0_2 - r_457_skew_square_c2_0_2);
  double r_459_res_second_1_0 = (r_458_skew_second_second_neg_1_0 - r_457_skew_square_c2_1_0);
  double r_459_res_second_1_1 = (r_458_skew_second_second_neg_1_1 - r_457_skew_square_c2_1_1);
  double r_459_res_second_1_2 = (r_458_skew_second_second_neg_1_2 - r_457_skew_square_c2_1_2);
  double r_459_res_second_2_0 = (r_458_skew_second_second_neg_2_0 - r_457_skew_square_c2_2_0);
  double r_459_res_second_2_1 = (r_458_skew_second_second_neg_2_1 - r_457_skew_square_c2_2_1);
  double r_459_res_second_2_2 = (r_458_skew_second_second_neg_2_2 - r_457_skew_square_c2_2_2);
  double r_460_alpha_skew_square_0_0 = (((r_382_new_translation_1 * r_382_new_translation_1) + (r_382_new_translation_2 * r_382_new_translation_2)) * -(masses_4));
  double r_460_alpha_skew_square_0_1 = (r_382_new_translation_1 * (r_382_new_translation_0 * masses_4));
  double r_460_alpha_skew_square_0_2 = (r_382_new_translation_2 * (r_382_new_translation_0 * masses_4));
  double r_460_alpha_skew_square_1_0 = (r_382_new_translation_1 * (r_382_new_translation_0 * masses_4));
  double r_460_alpha_skew_square_1_1 = (((r_382_new_translation_0 * r_382_new_translation_0) + (r_382_new_translation_2 * r_382_new_translation_2)) * -(masses_4));
  double r_460_alpha_skew_square_1_2 = (r_382_new_translation_2 * (r_382_new_translation_1 * masses_4));
  double r_460_alpha_skew_square_2_0 = (r_382_new_translation_2 * (r_382_new_translation_0 * masses_4));
  double r_460_alpha_skew_square_2_1 = (r_382_new_translation_2 * (r_382_new_translation_1 * masses_4));
  double r_460_alpha_skew_square_2_2 = (((r_382_new_translation_0 * r_382_new_translation_0) + (r_382_new_translation_1 * r_382_new_translation_1)) * -(masses_4));
  double r_461_res_third_0_0 = (r_395_symmetric3_rotate_0_0 - r_460_alpha_skew_square_0_0);
  double r_461_res_third_0_1 = (r_395_symmetric3_rotate_0_1 - r_460_alpha_skew_square_0_1);
  double r_461_res_third_0_2 = (r_395_symmetric3_rotate_0_2 - r_460_alpha_skew_square_0_2);
  double r_461_res_third_1_0 = (r_395_symmetric3_rotate_1_0 - r_460_alpha_skew_square_1_0);
  double r_461_res_third_1_1 = (r_395_symmetric3_rotate_1_1 - r_460_alpha_skew_square_1_1);
  double r_461_res_third_1_2 = (r_395_symmetric3_rotate_1_2 - r_460_alpha_skew_square_1_2);
  double r_461_res_third_2_0 = (r_395_symmetric3_rotate_2_0 - r_460_alpha_skew_square_2_0);
  double r_461_res_third_2_1 = (r_395_symmetric3_rotate_2_1 - r_460_alpha_skew_square_2_1);
  double r_461_res_third_2_2 = (r_395_symmetric3_rotate_2_2 - r_460_alpha_skew_square_2_2);
  double r_462_skew_vec3d_0_0 = 0;
  double r_462_skew_vec3d_0_1 = -(ov_angular_4_2);
  double r_462_skew_vec3d_0_2 = ov_angular_4_1;
  double r_462_skew_vec3d_1_0 = ov_angular_4_2;
  double r_462_skew_vec3d_1_1 = 0;
  double r_462_skew_vec3d_1_2 = -(ov_angular_4_0);
  double r_462_skew_vec3d_2_0 = -(ov_angular_4_1);
  double r_462_skew_vec3d_2_1 = ov_angular_4_0;
  double r_462_skew_vec3d_2_2 = 0;
  double r_463_res_fourth_0_0 = (((r_461_res_third_0_0 * r_462_skew_vec3d_0_0) + (r_461_res_third_0_1 * r_462_skew_vec3d_1_0)) + (r_461_res_third_0_2 * r_462_skew_vec3d_2_0));
  double r_463_res_fourth_0_1 = (((r_461_res_third_0_0 * r_462_skew_vec3d_0_1) + (r_461_res_third_0_1 * r_462_skew_vec3d_1_1)) + (r_461_res_third_0_2 * r_462_skew_vec3d_2_1));
  double r_463_res_fourth_0_2 = (((r_461_res_third_0_0 * r_462_skew_vec3d_0_2) + (r_461_res_third_0_1 * r_462_skew_vec3d_1_2)) + (r_461_res_third_0_2 * r_462_skew_vec3d_2_2));
  double r_463_res_fourth_1_0 = (((r_461_res_third_1_0 * r_462_skew_vec3d_0_0) + (r_461_res_third_1_1 * r_462_skew_vec3d_1_0)) + (r_461_res_third_1_2 * r_462_skew_vec3d_2_0));
  double r_463_res_fourth_1_1 = (((r_461_res_third_1_0 * r_462_skew_vec3d_0_1) + (r_461_res_third_1_1 * r_462_skew_vec3d_1_1)) + (r_461_res_third_1_2 * r_462_skew_vec3d_2_1));
  double r_463_res_fourth_1_2 = (((r_461_res_third_1_0 * r_462_skew_vec3d_0_2) + (r_461_res_third_1_1 * r_462_skew_vec3d_1_2)) + (r_461_res_third_1_2 * r_462_skew_vec3d_2_2));
  double r_463_res_fourth_2_0 = (((r_461_res_third_2_0 * r_462_skew_vec3d_0_0) + (r_461_res_third_2_1 * r_462_skew_vec3d_1_0)) + (r_461_res_third_2_2 * r_462_skew_vec3d_2_0));
  double r_463_res_fourth_2_1 = (((r_461_res_third_2_0 * r_462_skew_vec3d_0_1) + (r_461_res_third_2_1 * r_462_skew_vec3d_1_1)) + (r_461_res_third_2_2 * r_462_skew_vec3d_2_1));
  double r_463_res_fourth_2_2 = (((r_461_res_third_2_0 * r_462_skew_vec3d_0_2) + (r_461_res_third_2_1 * r_462_skew_vec3d_1_2)) + (r_461_res_third_2_2 * r_462_skew_vec3d_2_2));
  double r_464_res_fifth_0_0 = (r_459_res_second_0_0 - r_463_res_fourth_0_0);
  double r_464_res_fifth_0_1 = (r_459_res_second_0_1 - r_463_res_fourth_0_1);
  double r_464_res_fifth_0_2 = (r_459_res_second_0_2 - r_463_res_fourth_0_2);
  double r_464_res_fifth_1_0 = (r_459_res_second_1_0 - r_463_res_fourth_1_0);
  double r_464_res_fifth_1_1 = (r_459_res_second_1_1 - r_463_res_fourth_1_1);
  double r_464_res_fifth_1_2 = (r_459_res_second_1_2 - r_463_res_fourth_1_2);
  double r_464_res_fifth_2_0 = (r_459_res_second_2_0 - r_463_res_fourth_2_0);
  double r_464_res_fifth_2_1 = (r_459_res_second_2_1 - r_463_res_fourth_2_1);
  double r_464_res_fifth_2_2 = (r_459_res_second_2_2 - r_463_res_fourth_2_2);
  double r_465_res_third_first_col_0 = r_461_res_third_0_0;
  double r_465_res_third_first_col_1 = r_461_res_third_1_0;
  double r_465_res_third_first_col_2 = r_461_res_third_2_0;
  double r_466_res_third_second_col_0 = r_461_res_third_0_1;
  double r_466_res_third_second_col_1 = r_461_res_third_1_1;
  double r_466_res_third_second_col_2 = r_461_res_third_2_1;
  double r_467_res_third_third_col_0 = r_461_res_third_0_2;
  double r_467_res_third_third_col_1 = r_461_res_third_1_2;
  double r_467_res_third_third_col_2 = r_461_res_third_2_2;
  double r_468_res_sixth_first_col_0 = ((ov_angular_4_1 * r_465_res_third_first_col_2) - (ov_angular_4_2 * r_465_res_third_first_col_1));
  double r_468_res_sixth_first_col_1 = ((ov_angular_4_2 * r_465_res_third_first_col_0) - (ov_angular_4_0 * r_465_res_third_first_col_2));
  double r_468_res_sixth_first_col_2 = ((ov_angular_4_0 * r_465_res_third_first_col_1) - (ov_angular_4_1 * r_465_res_third_first_col_0));
  double r_469_res_sixth_second_col_0 = ((ov_angular_4_1 * r_466_res_third_second_col_2) - (ov_angular_4_2 * r_466_res_third_second_col_1));
  double r_469_res_sixth_second_col_1 = ((ov_angular_4_2 * r_466_res_third_second_col_0) - (ov_angular_4_0 * r_466_res_third_second_col_2));
  double r_469_res_sixth_second_col_2 = ((ov_angular_4_0 * r_466_res_third_second_col_1) - (ov_angular_4_1 * r_466_res_third_second_col_0));
  double r_470_res_sixth_third_col_0 = ((ov_angular_4_1 * r_467_res_third_third_col_2) - (ov_angular_4_2 * r_467_res_third_third_col_1));
  double r_470_res_sixth_third_col_1 = ((ov_angular_4_2 * r_467_res_third_third_col_0) - (ov_angular_4_0 * r_467_res_third_third_col_2));
  double r_470_res_sixth_third_col_2 = ((ov_angular_4_0 * r_467_res_third_third_col_1) - (ov_angular_4_1 * r_467_res_third_third_col_0));
  double r_471_res_sixth_0_0 = (r_464_res_fifth_0_0 + r_468_res_sixth_first_col_0);
  double r_471_res_sixth_0_1 = (r_464_res_fifth_0_1 + r_469_res_sixth_second_col_0);
  double r_471_res_sixth_0_2 = (r_464_res_fifth_0_2 + r_470_res_sixth_third_col_0);
  double r_471_res_sixth_1_0 = (r_464_res_fifth_1_0 + r_468_res_sixth_first_col_1);
  double r_471_res_sixth_1_1 = (r_464_res_fifth_1_1 + r_469_res_sixth_second_col_1);
  double r_471_res_sixth_1_2 = (r_464_res_fifth_1_2 + r_470_res_sixth_third_col_1);
  double r_471_res_sixth_2_0 = (r_464_res_fifth_2_0 + r_468_res_sixth_first_col_2);
  double r_471_res_sixth_2_1 = (r_464_res_fifth_2_1 + r_469_res_sixth_second_col_2);
  double r_471_res_sixth_2_2 = (r_464_res_fifth_2_2 + r_470_res_sixth_third_col_2);
  double inertia_variation_4_0_0 = 0;
  double inertia_variation_4_0_1 = 0;
  double inertia_variation_4_0_2 = 0;
  double inertia_variation_4_0_3 = r_451_res_first_0_0;
  double inertia_variation_4_0_4 = r_451_res_first_0_1;
  double inertia_variation_4_0_5 = r_451_res_first_0_2;
  double inertia_variation_4_1_0 = 0;
  double inertia_variation_4_1_1 = 0;
  double inertia_variation_4_1_2 = 0;
  double inertia_variation_4_1_3 = r_451_res_first_1_0;
  double inertia_variation_4_1_4 = r_451_res_first_1_1;
  double inertia_variation_4_1_5 = r_451_res_first_1_2;
  double inertia_variation_4_2_0 = 0;
  double inertia_variation_4_2_1 = 0;
  double inertia_variation_4_2_2 = 0;
  double inertia_variation_4_2_3 = r_451_res_first_2_0;
  double inertia_variation_4_2_4 = r_451_res_first_2_1;
  double inertia_variation_4_2_5 = r_451_res_first_2_2;
  double inertia_variation_4_3_0 = r_451_res_first_0_0;
  double inertia_variation_4_3_1 = r_451_res_first_1_0;
  double inertia_variation_4_3_2 = r_451_res_first_2_0;
  double inertia_variation_4_3_3 = r_471_res_sixth_0_0;
  double inertia_variation_4_3_4 = r_471_res_sixth_0_1;
  double inertia_variation_4_3_5 = r_471_res_sixth_0_2;
  double inertia_variation_4_4_0 = r_451_res_first_0_1;
  double inertia_variation_4_4_1 = r_451_res_first_1_1;
  double inertia_variation_4_4_2 = r_451_res_first_2_1;
  double inertia_variation_4_4_3 = r_471_res_sixth_1_0;
  double inertia_variation_4_4_4 = r_471_res_sixth_1_1;
  double inertia_variation_4_4_5 = r_471_res_sixth_1_2;
  double inertia_variation_4_5_0 = r_451_res_first_0_2;
  double inertia_variation_4_5_1 = r_451_res_first_1_2;
  double inertia_variation_4_5_2 = r_451_res_first_2_2;
  double inertia_variation_4_5_3 = r_471_res_sixth_2_0;
  double inertia_variation_4_5_4 = r_471_res_sixth_2_1;
  double inertia_variation_4_5_5 = r_471_res_sixth_2_2;
  double r_472_add_force_cross_linear_angular_0_0 = inertia_variation_4_0_3;
  double r_472_add_force_cross_linear_angular_0_1 = inertia_variation_4_0_4;
  double r_472_add_force_cross_linear_angular_0_2 = inertia_variation_4_0_5;
  double r_472_add_force_cross_linear_angular_1_0 = inertia_variation_4_1_3;
  double r_472_add_force_cross_linear_angular_1_1 = inertia_variation_4_1_4;
  double r_472_add_force_cross_linear_angular_1_2 = inertia_variation_4_1_5;
  double r_472_add_force_cross_linear_angular_2_0 = inertia_variation_4_2_3;
  double r_472_add_force_cross_linear_angular_2_1 = inertia_variation_4_2_4;
  double r_472_add_force_cross_linear_angular_2_2 = inertia_variation_4_2_5;
  double r_473_add_force_cross_angular_linear_0_0 = inertia_variation_4_3_0;
  double r_473_add_force_cross_angular_linear_0_1 = inertia_variation_4_3_1;
  double r_473_add_force_cross_angular_linear_0_2 = inertia_variation_4_3_2;
  double r_473_add_force_cross_angular_linear_1_0 = inertia_variation_4_4_0;
  double r_473_add_force_cross_angular_linear_1_1 = inertia_variation_4_4_1;
  double r_473_add_force_cross_angular_linear_1_2 = inertia_variation_4_4_2;
  double r_473_add_force_cross_angular_linear_2_0 = inertia_variation_4_5_0;
  double r_473_add_force_cross_angular_linear_2_1 = inertia_variation_4_5_1;
  double r_473_add_force_cross_angular_linear_2_2 = inertia_variation_4_5_2;
  double r_474_add_force_cross_angular_angular_0_0 = inertia_variation_4_3_3;
  double r_474_add_force_cross_angular_angular_0_1 = inertia_variation_4_3_4;
  double r_474_add_force_cross_angular_angular_0_2 = inertia_variation_4_3_5;
  double r_474_add_force_cross_angular_angular_1_0 = inertia_variation_4_4_3;
  double r_474_add_force_cross_angular_angular_1_1 = inertia_variation_4_4_4;
  double r_474_add_force_cross_angular_angular_1_2 = inertia_variation_4_4_5;
  double r_474_add_force_cross_angular_angular_2_0 = inertia_variation_4_5_3;
  double r_474_add_force_cross_angular_angular_2_1 = inertia_variation_4_5_4;
  double r_474_add_force_cross_angular_angular_2_2 = inertia_variation_4_5_5;
  double r_475_minus_f_linear_0 = -(data_oh_linear_4_0);
  double r_475_minus_f_linear_1 = -(data_oh_linear_4_1);
  double r_475_minus_f_linear_2 = -(data_oh_linear_4_2);
  double r_476_minus_f_angular_0 = -(data_oh_angular_4_0);
  double r_476_minus_f_angular_1 = -(data_oh_angular_4_1);
  double r_476_minus_f_angular_2 = -(data_oh_angular_4_2);
  double r_477_add_skew_0_0 = r_472_add_force_cross_linear_angular_0_0;
  double r_477_add_skew_0_1 = (r_472_add_force_cross_linear_angular_0_1 - r_475_minus_f_linear_2);
  double r_477_add_skew_0_2 = (r_472_add_force_cross_linear_angular_0_2 + r_475_minus_f_linear_1);
  double r_477_add_skew_1_0 = (r_472_add_force_cross_linear_angular_1_0 + r_475_minus_f_linear_2);
  double r_477_add_skew_1_1 = r_472_add_force_cross_linear_angular_1_1;
  double r_477_add_skew_1_2 = (r_472_add_force_cross_linear_angular_1_2 - r_475_minus_f_linear_0);
  double r_477_add_skew_2_0 = (r_472_add_force_cross_linear_angular_2_0 - r_475_minus_f_linear_1);
  double r_477_add_skew_2_1 = (r_472_add_force_cross_linear_angular_2_1 + r_475_minus_f_linear_0);
  double r_477_add_skew_2_2 = r_472_add_force_cross_linear_angular_2_2;
  double r_478_res_linear_angular_0_0 = r_477_add_skew_0_0;
  double r_478_res_linear_angular_0_1 = r_477_add_skew_0_1;
  double r_478_res_linear_angular_0_2 = r_477_add_skew_0_2;
  double r_478_res_linear_angular_1_0 = r_477_add_skew_1_0;
  double r_478_res_linear_angular_1_1 = r_477_add_skew_1_1;
  double r_478_res_linear_angular_1_2 = r_477_add_skew_1_2;
  double r_478_res_linear_angular_2_0 = r_477_add_skew_2_0;
  double r_478_res_linear_angular_2_1 = r_477_add_skew_2_1;
  double r_478_res_linear_angular_2_2 = r_477_add_skew_2_2;
  double r_479_add_skew_0_0 = r_473_add_force_cross_angular_linear_0_0;
  double r_479_add_skew_0_1 = (r_473_add_force_cross_angular_linear_0_1 - r_475_minus_f_linear_2);
  double r_479_add_skew_0_2 = (r_473_add_force_cross_angular_linear_0_2 + r_475_minus_f_linear_1);
  double r_479_add_skew_1_0 = (r_473_add_force_cross_angular_linear_1_0 + r_475_minus_f_linear_2);
  double r_479_add_skew_1_1 = r_473_add_force_cross_angular_linear_1_1;
  double r_479_add_skew_1_2 = (r_473_add_force_cross_angular_linear_1_2 - r_475_minus_f_linear_0);
  double r_479_add_skew_2_0 = (r_473_add_force_cross_angular_linear_2_0 - r_475_minus_f_linear_1);
  double r_479_add_skew_2_1 = (r_473_add_force_cross_angular_linear_2_1 + r_475_minus_f_linear_0);
  double r_479_add_skew_2_2 = r_473_add_force_cross_angular_linear_2_2;
  double r_480_res_angular_linear_0_0 = r_479_add_skew_0_0;
  double r_480_res_angular_linear_0_1 = r_479_add_skew_0_1;
  double r_480_res_angular_linear_0_2 = r_479_add_skew_0_2;
  double r_480_res_angular_linear_1_0 = r_479_add_skew_1_0;
  double r_480_res_angular_linear_1_1 = r_479_add_skew_1_1;
  double r_480_res_angular_linear_1_2 = r_479_add_skew_1_2;
  double r_480_res_angular_linear_2_0 = r_479_add_skew_2_0;
  double r_480_res_angular_linear_2_1 = r_479_add_skew_2_1;
  double r_480_res_angular_linear_2_2 = r_479_add_skew_2_2;
  double r_481_add_skew_0_0 = r_474_add_force_cross_angular_angular_0_0;
  double r_481_add_skew_0_1 = (r_474_add_force_cross_angular_angular_0_1 - r_476_minus_f_angular_2);
  double r_481_add_skew_0_2 = (r_474_add_force_cross_angular_angular_0_2 + r_476_minus_f_angular_1);
  double r_481_add_skew_1_0 = (r_474_add_force_cross_angular_angular_1_0 + r_476_minus_f_angular_2);
  double r_481_add_skew_1_1 = r_474_add_force_cross_angular_angular_1_1;
  double r_481_add_skew_1_2 = (r_474_add_force_cross_angular_angular_1_2 - r_476_minus_f_angular_0);
  double r_481_add_skew_2_0 = (r_474_add_force_cross_angular_angular_2_0 - r_476_minus_f_angular_1);
  double r_481_add_skew_2_1 = (r_474_add_force_cross_angular_angular_2_1 + r_476_minus_f_angular_0);
  double r_481_add_skew_2_2 = r_474_add_force_cross_angular_angular_2_2;
  double r_482_res_angular_angular_0_0 = r_481_add_skew_0_0;
  double r_482_res_angular_angular_0_1 = r_481_add_skew_0_1;
  double r_482_res_angular_angular_0_2 = r_481_add_skew_0_2;
  double r_482_res_angular_angular_1_0 = r_481_add_skew_1_0;
  double r_482_res_angular_angular_1_1 = r_481_add_skew_1_1;
  double r_482_res_angular_angular_1_2 = r_481_add_skew_1_2;
  double r_482_res_angular_angular_2_0 = r_481_add_skew_2_0;
  double r_482_res_angular_angular_2_1 = r_481_add_skew_2_1;
  double r_482_res_angular_angular_2_2 = r_481_add_skew_2_2;
  double add_force_cross_matrix_4_0_0 = inertia_variation_4_0_0;
  double add_force_cross_matrix_4_0_1 = inertia_variation_4_0_1;
  double add_force_cross_matrix_4_0_2 = inertia_variation_4_0_2;
  double add_force_cross_matrix_4_0_3 = r_478_res_linear_angular_0_0;
  double add_force_cross_matrix_4_0_4 = r_478_res_linear_angular_0_1;
  double add_force_cross_matrix_4_0_5 = r_478_res_linear_angular_0_2;
  double add_force_cross_matrix_4_1_0 = inertia_variation_4_1_0;
  double add_force_cross_matrix_4_1_1 = inertia_variation_4_1_1;
  double add_force_cross_matrix_4_1_2 = inertia_variation_4_1_2;
  double add_force_cross_matrix_4_1_3 = r_478_res_linear_angular_1_0;
  double add_force_cross_matrix_4_1_4 = r_478_res_linear_angular_1_1;
  double add_force_cross_matrix_4_1_5 = r_478_res_linear_angular_1_2;
  double add_force_cross_matrix_4_2_0 = inertia_variation_4_2_0;
  double add_force_cross_matrix_4_2_1 = inertia_variation_4_2_1;
  double add_force_cross_matrix_4_2_2 = inertia_variation_4_2_2;
  double add_force_cross_matrix_4_2_3 = r_478_res_linear_angular_2_0;
  double add_force_cross_matrix_4_2_4 = r_478_res_linear_angular_2_1;
  double add_force_cross_matrix_4_2_5 = r_478_res_linear_angular_2_2;
  double add_force_cross_matrix_4_3_0 = r_480_res_angular_linear_0_0;
  double add_force_cross_matrix_4_3_1 = r_480_res_angular_linear_0_1;
  double add_force_cross_matrix_4_3_2 = r_480_res_angular_linear_0_2;
  double add_force_cross_matrix_4_3_3 = r_482_res_angular_angular_0_0;
  double add_force_cross_matrix_4_3_4 = r_482_res_angular_angular_0_1;
  double add_force_cross_matrix_4_3_5 = r_482_res_angular_angular_0_2;
  double add_force_cross_matrix_4_4_0 = r_480_res_angular_linear_1_0;
  double add_force_cross_matrix_4_4_1 = r_480_res_angular_linear_1_1;
  double add_force_cross_matrix_4_4_2 = r_480_res_angular_linear_1_2;
  double add_force_cross_matrix_4_4_3 = r_482_res_angular_angular_1_0;
  double add_force_cross_matrix_4_4_4 = r_482_res_angular_angular_1_1;
  double add_force_cross_matrix_4_4_5 = r_482_res_angular_angular_1_2;
  double add_force_cross_matrix_4_5_0 = r_480_res_angular_linear_2_0;
  double add_force_cross_matrix_4_5_1 = r_480_res_angular_linear_2_1;
  double add_force_cross_matrix_4_5_2 = r_480_res_angular_linear_2_2;
  double add_force_cross_matrix_4_5_3 = r_482_res_angular_angular_2_0;
  double add_force_cross_matrix_4_5_4 = r_482_res_angular_angular_2_1;
  double add_force_cross_matrix_4_5_5 = r_482_res_angular_angular_2_2;
  double rotation_matrix_5_0_0 = qcos_5;
  double rotation_matrix_5_0_1 = -(qsin_5);
  double rotation_matrix_5_0_2 = 0;
  double rotation_matrix_5_1_0 = qsin_5;
  double rotation_matrix_5_1_1 = qcos_5;
  double rotation_matrix_5_1_2 = 0;
  double rotation_matrix_5_2_0 = 0;
  double rotation_matrix_5_2_1 = 0;
  double rotation_matrix_5_2_2 = 1;
  double limi_rotation_5_0_0 = rotation_matrix_5_0_0;
  double limi_rotation_5_0_1 = rotation_matrix_5_0_1;
  double limi_rotation_5_0_2 = 0;
  double limi_rotation_5_1_0 = 0;
  double limi_rotation_5_1_1 = 0;
  double limi_rotation_5_1_2 = -1;
  double limi_rotation_5_2_0 = rotation_matrix_5_1_0;
  double limi_rotation_5_2_1 = rotation_matrix_5_1_1;
  double limi_rotation_5_2_2 = 0;
  double v_linear_5_0 = data_v_5_0;
  double v_linear_5_1 = data_v_5_1;
  double v_linear_5_2 = data_v_5_2;
  double v_angular_5_0 = data_v_5_3;
  double v_angular_5_1 = data_v_5_4;
  double v_angular_5_2 = v_5;
  double parent_v_linear_5_0 = all_v_4_0;
  double parent_v_linear_5_1 = all_v_4_1;
  double parent_v_linear_5_2 = all_v_4_2;
  double parent_v_angular_5_0 = all_v_4_3;
  double parent_v_angular_5_1 = all_v_4_4;
  double parent_v_angular_5_2 = all_v_4_5;
  double parent_a_linear_5_0 = a_final_4_0;
  double parent_a_linear_5_1 = a_final_4_1;
  double parent_a_linear_5_2 = a_final_4_2;
  double parent_a_angular_5_0 = a_final_4_3;
  double parent_a_angular_5_1 = a_final_4_4;
  double parent_a_angular_5_2 = a_final_4_5;
  double oMi_rotation_5_0_0 = (((oMi_rotation_4_0_0 * limi_rotation_5_0_0) + (oMi_rotation_4_0_1 * limi_rotation_5_1_0)) + (oMi_rotation_4_0_2 * limi_rotation_5_2_0));
  double oMi_rotation_5_0_1 = (((oMi_rotation_4_0_0 * limi_rotation_5_0_1) + (oMi_rotation_4_0_1 * limi_rotation_5_1_1)) + (oMi_rotation_4_0_2 * limi_rotation_5_2_1));
  double oMi_rotation_5_0_2 = (((oMi_rotation_4_0_0 * limi_rotation_5_0_2) + (oMi_rotation_4_0_1 * limi_rotation_5_1_2)) + (oMi_rotation_4_0_2 * limi_rotation_5_2_2));
  double oMi_rotation_5_1_0 = (((oMi_rotation_4_1_0 * limi_rotation_5_0_0) + (oMi_rotation_4_1_1 * limi_rotation_5_1_0)) + (oMi_rotation_4_1_2 * limi_rotation_5_2_0));
  double oMi_rotation_5_1_1 = (((oMi_rotation_4_1_0 * limi_rotation_5_0_1) + (oMi_rotation_4_1_1 * limi_rotation_5_1_1)) + (oMi_rotation_4_1_2 * limi_rotation_5_2_1));
  double oMi_rotation_5_1_2 = (((oMi_rotation_4_1_0 * limi_rotation_5_0_2) + (oMi_rotation_4_1_1 * limi_rotation_5_1_2)) + (oMi_rotation_4_1_2 * limi_rotation_5_2_2));
  double oMi_rotation_5_2_0 = (((oMi_rotation_4_2_0 * limi_rotation_5_0_0) + (oMi_rotation_4_2_1 * limi_rotation_5_1_0)) + (oMi_rotation_4_2_2 * limi_rotation_5_2_0));
  double oMi_rotation_5_2_1 = (((oMi_rotation_4_2_0 * limi_rotation_5_0_1) + (oMi_rotation_4_2_1 * limi_rotation_5_1_1)) + (oMi_rotation_4_2_2 * limi_rotation_5_2_1));
  double oMi_rotation_5_2_2 = (((oMi_rotation_4_2_0 * limi_rotation_5_0_2) + (oMi_rotation_4_2_1 * limi_rotation_5_1_2)) + (oMi_rotation_4_2_2 * limi_rotation_5_2_2));
  double oMi_translation_to_add_5_0 = (((oMi_rotation_4_0_0 * limi_translation_5_0) + (oMi_rotation_4_0_1 * limi_translation_5_1)) + (oMi_rotation_4_0_2 * limi_translation_5_2));
  double oMi_translation_to_add_5_1 = (((oMi_rotation_4_1_0 * limi_translation_5_0) + (oMi_rotation_4_1_1 * limi_translation_5_1)) + (oMi_rotation_4_1_2 * limi_translation_5_2));
  double oMi_translation_to_add_5_2 = (((oMi_rotation_4_2_0 * limi_translation_5_0) + (oMi_rotation_4_2_1 * limi_translation_5_1)) + (oMi_rotation_4_2_2 * limi_translation_5_2));
  double oMi_translation_5_0 = (oMi_translation_4_0 + oMi_translation_to_add_5_0);
  double oMi_translation_5_1 = (oMi_translation_4_1 + oMi_translation_to_add_5_1);
  double oMi_translation_5_2 = (oMi_translation_4_2 + oMi_translation_to_add_5_2);
  double actInv1_5_0 = ((limi_translation_5_1 * parent_v_angular_5_2) - (limi_translation_5_2 * parent_v_angular_5_1));
  double actInv1_5_1 = ((limi_translation_5_2 * parent_v_angular_5_0) - (limi_translation_5_0 * parent_v_angular_5_2));
  double actInv1_5_2 = ((limi_translation_5_0 * parent_v_angular_5_1) - (limi_translation_5_1 * parent_v_angular_5_0));
  double actInv2_5_0 = (parent_v_linear_5_0 - actInv1_5_0);
  double actInv2_5_1 = (parent_v_linear_5_1 - actInv1_5_1);
  double actInv2_5_2 = (parent_v_linear_5_2 - actInv1_5_2);
  double actInv3_5_0_0 = limi_rotation_5_0_0;
  double actInv3_5_1_0 = limi_rotation_5_0_1;
  double actInv3_5_2_0 = limi_rotation_5_0_2;
  double actInv3_5_0_1 = limi_rotation_5_1_0;
  double actInv3_5_1_1 = limi_rotation_5_1_1;
  double actInv3_5_2_1 = limi_rotation_5_1_2;
  double actInv3_5_0_2 = limi_rotation_5_2_0;
  double actInv3_5_1_2 = limi_rotation_5_2_1;
  double actInv3_5_2_2 = limi_rotation_5_2_2;
  double actInv4_5_0 = (((actInv3_5_0_0 * actInv2_5_0) + (actInv3_5_0_1 * actInv2_5_1)) + (actInv3_5_0_2 * actInv2_5_2));
  double actInv4_5_1 = (((actInv3_5_1_0 * actInv2_5_0) + (actInv3_5_1_1 * actInv2_5_1)) + (actInv3_5_1_2 * actInv2_5_2));
  double actInv4_5_2 = (((actInv3_5_2_0 * actInv2_5_0) + (actInv3_5_2_1 * actInv2_5_1)) + (actInv3_5_2_2 * actInv2_5_2));
  double act_inv_linear_5_0 = (v_linear_5_0 + actInv4_5_0);
  double act_inv_linear_5_1 = (v_linear_5_1 + actInv4_5_1);
  double act_inv_linear_5_2 = (v_linear_5_2 + actInv4_5_2);
  double actInv5_5_0 = (((actInv3_5_0_0 * parent_v_angular_5_0) + (actInv3_5_0_1 * parent_v_angular_5_1)) + (actInv3_5_0_2 * parent_v_angular_5_2));
  double actInv5_5_1 = (((actInv3_5_1_0 * parent_v_angular_5_0) + (actInv3_5_1_1 * parent_v_angular_5_1)) + (actInv3_5_1_2 * parent_v_angular_5_2));
  double actInv5_5_2 = (((actInv3_5_2_0 * parent_v_angular_5_0) + (actInv3_5_2_1 * parent_v_angular_5_1)) + (actInv3_5_2_2 * parent_v_angular_5_2));
  double act_inv_angular_5_0 = (v_angular_5_0 + actInv5_5_0);
  double act_inv_angular_5_1 = (v_angular_5_1 + actInv5_5_1);
  double act_inv_angular_5_2 = (v_angular_5_2 + actInv5_5_2);
  double all_v_5_0 = act_inv_linear_5_0;
  double all_v_5_1 = act_inv_linear_5_1;
  double all_v_5_2 = act_inv_linear_5_2;
  double all_v_5_3 = act_inv_angular_5_0;
  double all_v_5_4 = act_inv_angular_5_1;
  double all_v_5_5 = act_inv_angular_5_2;
  double minus_m_w_5 = -(v_5);
  double alpha_cross1_linear_5 = (-(minus_m_w_5) * act_inv_linear_5_1);
  double alpha_cross2_linear_5 = (minus_m_w_5 * act_inv_linear_5_0);
  double alpha_cross_linear_5_0 = alpha_cross1_linear_5;
  double alpha_cross_linear_5_1 = alpha_cross2_linear_5;
  double alpha_cross_linear_5_2 = 0;
  double alpha_cross1_angular_5 = (-(minus_m_w_5) * act_inv_angular_5_1);
  double alpha_cross2_angular_5 = (minus_m_w_5 * act_inv_angular_5_0);
  double alpha_cross_angular_5_0 = alpha_cross1_angular_5;
  double alpha_cross_angular_5_1 = alpha_cross2_angular_5;
  double alpha_cross_angular_5_2 = 0;
  double new_data_a_5_0 = alpha_cross_linear_5_0;
  double new_data_a_5_1 = alpha_cross_linear_5_1;
  double new_data_a_5_2 = alpha_cross_linear_5_2;
  double new_data_a_5_3 = alpha_cross_angular_5_0;
  double new_data_a_5_4 = alpha_cross_angular_5_1;
  double new_data_a_5_5 = a_5;
  double temp_a_linear_5_0 = new_data_a_5_0;
  double temp_a_linear_5_1 = new_data_a_5_1;
  double temp_a_linear_5_2 = new_data_a_5_2;
  double temp_a_angular_5_0 = new_data_a_5_3;
  double temp_a_angular_5_1 = new_data_a_5_4;
  double temp_a_angular_5_2 = new_data_a_5_5;
  double r_483_actInv1_5_0 = ((limi_translation_5_1 * parent_a_angular_5_2) - (limi_translation_5_2 * parent_a_angular_5_1));
  double r_483_actInv1_5_1 = ((limi_translation_5_2 * parent_a_angular_5_0) - (limi_translation_5_0 * parent_a_angular_5_2));
  double r_483_actInv1_5_2 = ((limi_translation_5_0 * parent_a_angular_5_1) - (limi_translation_5_1 * parent_a_angular_5_0));
  double r_484_actInv2_5_0 = (parent_a_linear_5_0 - r_483_actInv1_5_0);
  double r_484_actInv2_5_1 = (parent_a_linear_5_1 - r_483_actInv1_5_1);
  double r_484_actInv2_5_2 = (parent_a_linear_5_2 - r_483_actInv1_5_2);
  double r_485_actInv3_5_0_0 = limi_rotation_5_0_0;
  double r_485_actInv3_5_1_0 = limi_rotation_5_0_1;
  double r_485_actInv3_5_2_0 = limi_rotation_5_0_2;
  double r_485_actInv3_5_0_1 = limi_rotation_5_1_0;
  double r_485_actInv3_5_1_1 = limi_rotation_5_1_1;
  double r_485_actInv3_5_2_1 = limi_rotation_5_1_2;
  double r_485_actInv3_5_0_2 = limi_rotation_5_2_0;
  double r_485_actInv3_5_1_2 = limi_rotation_5_2_1;
  double r_485_actInv3_5_2_2 = limi_rotation_5_2_2;
  double r_486_actInv4_5_0 = (((r_485_actInv3_5_0_0 * r_484_actInv2_5_0) + (r_485_actInv3_5_0_1 * r_484_actInv2_5_1)) + (r_485_actInv3_5_0_2 * r_484_actInv2_5_2));
  double r_486_actInv4_5_1 = (((r_485_actInv3_5_1_0 * r_484_actInv2_5_0) + (r_485_actInv3_5_1_1 * r_484_actInv2_5_1)) + (r_485_actInv3_5_1_2 * r_484_actInv2_5_2));
  double r_486_actInv4_5_2 = (((r_485_actInv3_5_2_0 * r_484_actInv2_5_0) + (r_485_actInv3_5_2_1 * r_484_actInv2_5_1)) + (r_485_actInv3_5_2_2 * r_484_actInv2_5_2));
  double r_487_act_inv_linear_5_0 = (temp_a_linear_5_0 + r_486_actInv4_5_0);
  double r_487_act_inv_linear_5_1 = (temp_a_linear_5_1 + r_486_actInv4_5_1);
  double r_487_act_inv_linear_5_2 = (temp_a_linear_5_2 + r_486_actInv4_5_2);
  double r_488_actInv5_5_0 = (((r_485_actInv3_5_0_0 * parent_a_angular_5_0) + (r_485_actInv3_5_0_1 * parent_a_angular_5_1)) + (r_485_actInv3_5_0_2 * parent_a_angular_5_2));
  double r_488_actInv5_5_1 = (((r_485_actInv3_5_1_0 * parent_a_angular_5_0) + (r_485_actInv3_5_1_1 * parent_a_angular_5_1)) + (r_485_actInv3_5_1_2 * parent_a_angular_5_2));
  double r_488_actInv5_5_2 = (((r_485_actInv3_5_2_0 * parent_a_angular_5_0) + (r_485_actInv3_5_2_1 * parent_a_angular_5_1)) + (r_485_actInv3_5_2_2 * parent_a_angular_5_2));
  double r_489_act_inv_angular_5_0 = (temp_a_angular_5_0 + r_488_actInv5_5_0);
  double r_489_act_inv_angular_5_1 = (temp_a_angular_5_1 + r_488_actInv5_5_1);
  double r_489_act_inv_angular_5_2 = (temp_a_angular_5_2 + r_488_actInv5_5_2);
  double a_final_5_0 = r_487_act_inv_linear_5_0;
  double a_final_5_1 = r_487_act_inv_linear_5_1;
  double a_final_5_2 = r_487_act_inv_linear_5_2;
  double a_final_5_3 = r_489_act_inv_angular_5_0;
  double a_final_5_4 = r_489_act_inv_angular_5_1;
  double a_final_5_5 = r_489_act_inv_angular_5_2;
  double r_490_new_translation_temp_0 = (((oMi_rotation_5_0_0 * lever_5_0) + (oMi_rotation_5_0_1 * lever_5_1)) + (oMi_rotation_5_0_2 * lever_5_2));
  double r_490_new_translation_temp_1 = (((oMi_rotation_5_1_0 * lever_5_0) + (oMi_rotation_5_1_1 * lever_5_1)) + (oMi_rotation_5_1_2 * lever_5_2));
  double r_490_new_translation_temp_2 = (((oMi_rotation_5_2_0 * lever_5_0) + (oMi_rotation_5_2_1 * lever_5_1)) + (oMi_rotation_5_2_2 * lever_5_2));
  double r_491_new_translation_0 = (oMi_translation_5_0 + r_490_new_translation_temp_0);
  double r_491_new_translation_1 = (oMi_translation_5_1 + r_490_new_translation_temp_1);
  double r_491_new_translation_2 = (oMi_translation_5_2 + r_490_new_translation_temp_2);
  double r_492_decompose_it_i_0_0 = (inertia_5_0_0 - inertia_5_2_2);
  double r_492_decompose_it_i_0_1 = inertia_5_0_1;
  double r_492_decompose_it_i_1_0 = inertia_5_0_1;
  double r_492_decompose_it_i_1_1 = (inertia_5_1_1 - inertia_5_2_2);
  double r_492_decompose_it_i_2_0 = (inertia_5_0_2 * 2);
  double r_492_decompose_it_i_2_1 = (inertia_5_1_2 + inertia_5_1_2);
  double r_493_rotate_bottom_r_0_0 = oMi_rotation_5_1_0;
  double r_493_rotate_bottom_r_0_1 = oMi_rotation_5_1_1;
  double r_493_rotate_bottom_r_0_2 = oMi_rotation_5_1_2;
  double r_493_rotate_bottom_r_1_0 = oMi_rotation_5_2_0;
  double r_493_rotate_bottom_r_1_1 = oMi_rotation_5_2_1;
  double r_493_rotate_bottom_r_1_2 = oMi_rotation_5_2_2;
  double r_494_rotate_y_0_0 = (((r_493_rotate_bottom_r_0_0 * r_492_decompose_it_i_0_0) + (r_493_rotate_bottom_r_0_1 * r_492_decompose_it_i_1_0)) + (r_493_rotate_bottom_r_0_2 * r_492_decompose_it_i_2_0));
  double r_494_rotate_y_0_1 = (((r_493_rotate_bottom_r_0_0 * r_492_decompose_it_i_0_1) + (r_493_rotate_bottom_r_0_1 * r_492_decompose_it_i_1_1)) + (r_493_rotate_bottom_r_0_2 * r_492_decompose_it_i_2_1));
  double r_494_rotate_y_1_0 = (((r_493_rotate_bottom_r_1_0 * r_492_decompose_it_i_0_0) + (r_493_rotate_bottom_r_1_1 * r_492_decompose_it_i_1_0)) + (r_493_rotate_bottom_r_1_2 * r_492_decompose_it_i_2_0));
  double r_494_rotate_y_1_1 = (((r_493_rotate_bottom_r_1_0 * r_492_decompose_it_i_0_1) + (r_493_rotate_bottom_r_1_1 * r_492_decompose_it_i_1_1)) + (r_493_rotate_bottom_r_1_2 * r_492_decompose_it_i_2_1));
  double r_495_sres_first_1 = ((oMi_rotation_5_0_0 * r_494_rotate_y_0_0) + (oMi_rotation_5_0_1 * r_494_rotate_y_0_1));
  double r_496_sres_first_2 = ((oMi_rotation_5_1_0 * r_494_rotate_y_0_0) + (oMi_rotation_5_1_1 * r_494_rotate_y_0_1));
  double r_497_sres_first_3 = ((oMi_rotation_5_0_0 * r_494_rotate_y_1_0) + (oMi_rotation_5_0_1 * r_494_rotate_y_1_1));
  double r_498_sres_first_4 = ((oMi_rotation_5_1_0 * r_494_rotate_y_1_0) + (oMi_rotation_5_1_1 * r_494_rotate_y_1_1));
  double r_499_sres_first_5 = ((oMi_rotation_5_2_0 * r_494_rotate_y_1_0) + (oMi_rotation_5_2_1 * r_494_rotate_y_1_1));
  double r_500_const_r_0 = ((-(inertia_5_1_2) * oMi_rotation_5_0_0) + (inertia_5_0_2 * oMi_rotation_5_0_1));
  double r_500_const_r_1 = ((-(inertia_5_1_2) * oMi_rotation_5_1_0) + (inertia_5_0_2 * oMi_rotation_5_1_1));
  double r_500_const_r_2 = ((-(inertia_5_1_2) * oMi_rotation_5_2_0) + (inertia_5_0_2 * oMi_rotation_5_2_1));
  double r_501_sres_update_0_tmp1 = (r_492_decompose_it_i_0_0 + r_492_decompose_it_i_1_1);
  double r_502_sres_update_0_tmp2 = (r_496_sres_first_2 + r_499_sres_first_5);
  double r_503_sres_update_0 = (r_501_sres_update_0_tmp1 - r_502_sres_update_0_tmp2);
  double r_504_symmetric3_rotate_0_0 = (r_503_sres_update_0 + inertia_5_2_2);
  double r_504_symmetric3_rotate_0_1 = (r_495_sres_first_1 + r_500_const_r_2);
  double r_504_symmetric3_rotate_0_2 = (r_497_sres_first_3 - r_500_const_r_1);
  double r_504_symmetric3_rotate_1_0 = (r_495_sres_first_1 + r_500_const_r_2);
  double r_504_symmetric3_rotate_1_1 = (r_496_sres_first_2 + inertia_5_2_2);
  double r_504_symmetric3_rotate_1_2 = (r_498_sres_first_4 + r_500_const_r_0);
  double r_504_symmetric3_rotate_2_0 = (r_497_sres_first_3 - r_500_const_r_1);
  double r_504_symmetric3_rotate_2_1 = (r_498_sres_first_4 + r_500_const_r_0);
  double r_504_symmetric3_rotate_2_2 = (r_499_sres_first_5 + inertia_5_2_2);
  double data_oinertias_trans_5_0 = r_491_new_translation_0;
  double data_oinertias_trans_5_1 = r_491_new_translation_1;
  double data_oinertias_trans_5_2 = r_491_new_translation_2;
  double data_oinertias_rot_5_0_0 = r_504_symmetric3_rotate_0_0;
  double data_oinertias_rot_5_0_1 = r_504_symmetric3_rotate_0_1;
  double data_oinertias_rot_5_0_2 = r_504_symmetric3_rotate_0_2;
  double data_oinertias_rot_5_1_0 = r_504_symmetric3_rotate_1_0;
  double data_oinertias_rot_5_1_1 = r_504_symmetric3_rotate_1_1;
  double data_oinertias_rot_5_1_2 = r_504_symmetric3_rotate_1_2;
  double data_oinertias_rot_5_2_0 = r_504_symmetric3_rotate_2_0;
  double data_oinertias_rot_5_2_1 = r_504_symmetric3_rotate_2_1;
  double data_oinertias_rot_5_2_2 = r_504_symmetric3_rotate_2_2;
  double motion_act_linear_5_0 = (((oMi_rotation_5_0_0 * act_inv_linear_5_0) + (oMi_rotation_5_0_1 * act_inv_linear_5_1)) + (oMi_rotation_5_0_2 * act_inv_linear_5_2));
  double motion_act_linear_5_1 = (((oMi_rotation_5_1_0 * act_inv_linear_5_0) + (oMi_rotation_5_1_1 * act_inv_linear_5_1)) + (oMi_rotation_5_1_2 * act_inv_linear_5_2));
  double motion_act_linear_5_2 = (((oMi_rotation_5_2_0 * act_inv_linear_5_0) + (oMi_rotation_5_2_1 * act_inv_linear_5_1)) + (oMi_rotation_5_2_2 * act_inv_linear_5_2));
  double motion_act_angular_5_0 = (((oMi_rotation_5_0_0 * act_inv_angular_5_0) + (oMi_rotation_5_0_1 * act_inv_angular_5_1)) + (oMi_rotation_5_0_2 * act_inv_angular_5_2));
  double motion_act_angular_5_1 = (((oMi_rotation_5_1_0 * act_inv_angular_5_0) + (oMi_rotation_5_1_1 * act_inv_angular_5_1)) + (oMi_rotation_5_1_2 * act_inv_angular_5_2));
  double motion_act_angular_5_2 = (((oMi_rotation_5_2_0 * act_inv_angular_5_0) + (oMi_rotation_5_2_1 * act_inv_angular_5_1)) + (oMi_rotation_5_2_2 * act_inv_angular_5_2));
  double motion_act_cross_5_0 = ((oMi_translation_5_1 * motion_act_angular_5_2) - (oMi_translation_5_2 * motion_act_angular_5_1));
  double motion_act_cross_5_1 = ((oMi_translation_5_2 * motion_act_angular_5_0) - (oMi_translation_5_0 * motion_act_angular_5_2));
  double motion_act_cross_5_2 = ((oMi_translation_5_0 * motion_act_angular_5_1) - (oMi_translation_5_1 * motion_act_angular_5_0));
  double motion_act_linear2_5_0 = (motion_act_linear_5_0 + motion_act_cross_5_0);
  double motion_act_linear2_5_1 = (motion_act_linear_5_1 + motion_act_cross_5_1);
  double motion_act_linear2_5_2 = (motion_act_linear_5_2 + motion_act_cross_5_2);
  double act_motion_res_5_0 = motion_act_linear2_5_0;
  double act_motion_res_5_1 = motion_act_linear2_5_1;
  double act_motion_res_5_2 = motion_act_linear2_5_2;
  double act_motion_res_5_3 = motion_act_angular_5_0;
  double act_motion_res_5_4 = motion_act_angular_5_1;
  double act_motion_res_5_5 = motion_act_angular_5_2;
  double ov_5_0 = act_motion_res_5_0;
  double ov_5_1 = act_motion_res_5_1;
  double ov_5_2 = act_motion_res_5_2;
  double ov_5_3 = act_motion_res_5_3;
  double ov_5_4 = act_motion_res_5_4;
  double ov_5_5 = act_motion_res_5_5;
  double t_linear_5_0 = a_final_5_0;
  double t_linear_5_1 = a_final_5_1;
  double t_linear_5_2 = a_final_5_2;
  double t_angular_5_0 = a_final_5_3;
  double t_angular_5_1 = a_final_5_4;
  double t_angular_5_2 = a_final_5_5;
  double r_505_motion_act_linear_5_0 = (((oMi_rotation_5_0_0 * t_linear_5_0) + (oMi_rotation_5_0_1 * t_linear_5_1)) + (oMi_rotation_5_0_2 * t_linear_5_2));
  double r_505_motion_act_linear_5_1 = (((oMi_rotation_5_1_0 * t_linear_5_0) + (oMi_rotation_5_1_1 * t_linear_5_1)) + (oMi_rotation_5_1_2 * t_linear_5_2));
  double r_505_motion_act_linear_5_2 = (((oMi_rotation_5_2_0 * t_linear_5_0) + (oMi_rotation_5_2_1 * t_linear_5_1)) + (oMi_rotation_5_2_2 * t_linear_5_2));
  double r_506_motion_act_angular_5_0 = (((oMi_rotation_5_0_0 * t_angular_5_0) + (oMi_rotation_5_0_1 * t_angular_5_1)) + (oMi_rotation_5_0_2 * t_angular_5_2));
  double r_506_motion_act_angular_5_1 = (((oMi_rotation_5_1_0 * t_angular_5_0) + (oMi_rotation_5_1_1 * t_angular_5_1)) + (oMi_rotation_5_1_2 * t_angular_5_2));
  double r_506_motion_act_angular_5_2 = (((oMi_rotation_5_2_0 * t_angular_5_0) + (oMi_rotation_5_2_1 * t_angular_5_1)) + (oMi_rotation_5_2_2 * t_angular_5_2));
  double r_507_motion_act_cross_5_0 = ((oMi_translation_5_1 * r_506_motion_act_angular_5_2) - (oMi_translation_5_2 * r_506_motion_act_angular_5_1));
  double r_507_motion_act_cross_5_1 = ((oMi_translation_5_2 * r_506_motion_act_angular_5_0) - (oMi_translation_5_0 * r_506_motion_act_angular_5_2));
  double r_507_motion_act_cross_5_2 = ((oMi_translation_5_0 * r_506_motion_act_angular_5_1) - (oMi_translation_5_1 * r_506_motion_act_angular_5_0));
  double r_508_motion_act_linear2_5_0 = (r_505_motion_act_linear_5_0 + r_507_motion_act_cross_5_0);
  double r_508_motion_act_linear2_5_1 = (r_505_motion_act_linear_5_1 + r_507_motion_act_cross_5_1);
  double r_508_motion_act_linear2_5_2 = (r_505_motion_act_linear_5_2 + r_507_motion_act_cross_5_2);
  double r_509_act_motion_res_5_0 = r_508_motion_act_linear2_5_0;
  double r_509_act_motion_res_5_1 = r_508_motion_act_linear2_5_1;
  double r_509_act_motion_res_5_2 = r_508_motion_act_linear2_5_2;
  double r_509_act_motion_res_5_3 = r_506_motion_act_angular_5_0;
  double r_509_act_motion_res_5_4 = r_506_motion_act_angular_5_1;
  double r_509_act_motion_res_5_5 = r_506_motion_act_angular_5_2;
  double oa_5_0 = r_509_act_motion_res_5_0;
  double oa_5_1 = r_509_act_motion_res_5_1;
  double oa_5_2 = r_509_act_motion_res_5_2;
  double oa_5_3 = r_509_act_motion_res_5_3;
  double oa_5_4 = r_509_act_motion_res_5_4;
  double oa_5_5 = r_509_act_motion_res_5_5;
  double r_510_model_gravity_0 = 0;
  double r_510_model_gravity_1 = 0;
  double r_510_model_gravity_2 = -9.81;
  double r_510_model_gravity_3 = 0;
  double r_510_model_gravity_4 = 0;
  double r_510_model_gravity_5 = 0;
  double oa_gf_5_0 = (oa_5_0 - r_510_model_gravity_0);
  double oa_gf_5_1 = (oa_5_1 - r_510_model_gravity_1);
  double oa_gf_5_2 = (oa_5_2 - r_510_model_gravity_2);
  double oa_gf_5_3 = (oa_5_3 - r_510_model_gravity_3);
  double oa_gf_5_4 = (oa_5_4 - r_510_model_gravity_4);
  double oa_gf_5_5 = (oa_5_5 - r_510_model_gravity_5);
  double ov_linear_5_0 = ov_5_0;
  double ov_linear_5_1 = ov_5_1;
  double ov_linear_5_2 = ov_5_2;
  double ov_angular_5_0 = ov_5_3;
  double ov_angular_5_1 = ov_5_4;
  double ov_angular_5_2 = ov_5_5;
  double data_oh_linear_temp1_5_0 = ((r_491_new_translation_1 * ov_angular_5_2) - (r_491_new_translation_2 * ov_angular_5_1));
  double data_oh_linear_temp1_5_1 = ((r_491_new_translation_2 * ov_angular_5_0) - (r_491_new_translation_0 * ov_angular_5_2));
  double data_oh_linear_temp1_5_2 = ((r_491_new_translation_0 * ov_angular_5_1) - (r_491_new_translation_1 * ov_angular_5_0));
  double data_oh_linear_temp2_5_0 = (ov_linear_5_0 - data_oh_linear_temp1_5_0);
  double data_oh_linear_temp2_5_1 = (ov_linear_5_1 - data_oh_linear_temp1_5_1);
  double data_oh_linear_temp2_5_2 = (ov_linear_5_2 - data_oh_linear_temp1_5_2);
  double data_oh_linear_5_0 = (masses_5 * data_oh_linear_temp2_5_0);
  double data_oh_linear_5_1 = (masses_5 * data_oh_linear_temp2_5_1);
  double data_oh_linear_5_2 = (masses_5 * data_oh_linear_temp2_5_2);
  double r_511_ = (r_504_symmetric3_rotate_0_0 * ov_angular_5_0);
  double r_512_ = (r_504_symmetric3_rotate_0_1 * ov_angular_5_1);
  double r_513_ = (r_504_symmetric3_rotate_0_2 * ov_angular_5_2);
  double r_514_ = (r_504_symmetric3_rotate_0_1 * ov_angular_5_0);
  double r_515_ = (r_504_symmetric3_rotate_1_1 * ov_angular_5_1);
  double r_516_ = (r_504_symmetric3_rotate_1_2 * ov_angular_5_2);
  double r_517_ = (r_504_symmetric3_rotate_0_2 * ov_angular_5_0);
  double r_518_ = (r_504_symmetric3_rotate_1_2 * ov_angular_5_1);
  double r_519_ = (r_504_symmetric3_rotate_2_2 * ov_angular_5_2);
  double rhsMult1_temp_5 = (r_511_ + r_512_);
  double rhsMult1_5 = (rhsMult1_temp_5 + r_513_);
  double rhsMult2_temp_5 = (r_514_ + r_515_);
  double rhsMult2_5 = (rhsMult2_temp_5 + r_516_);
  double rhsMult3_temp_5 = (r_517_ + r_518_);
  double rhsMult3_5 = (rhsMult3_temp_5 + r_519_);
  double rhsMult_5_0 = rhsMult1_5;
  double rhsMult_5_1 = rhsMult2_5;
  double rhsMult_5_2 = rhsMult3_5;
  double data_oh_angular_temp2_5_0 = ((r_491_new_translation_1 * data_oh_linear_5_2) - (r_491_new_translation_2 * data_oh_linear_5_1));
  double data_oh_angular_temp2_5_1 = ((r_491_new_translation_2 * data_oh_linear_5_0) - (r_491_new_translation_0 * data_oh_linear_5_2));
  double data_oh_angular_temp2_5_2 = ((r_491_new_translation_0 * data_oh_linear_5_1) - (r_491_new_translation_1 * data_oh_linear_5_0));
  double data_oh_angular_5_0 = (rhsMult_5_0 + data_oh_angular_temp2_5_0);
  double data_oh_angular_5_1 = (rhsMult_5_1 + data_oh_angular_temp2_5_1);
  double data_oh_angular_5_2 = (rhsMult_5_2 + data_oh_angular_temp2_5_2);
  double all_oh_5_0 = data_oh_linear_5_0;
  double all_oh_5_1 = data_oh_linear_5_1;
  double all_oh_5_2 = data_oh_linear_5_2;
  double all_oh_5_3 = data_oh_angular_5_0;
  double all_oh_5_4 = data_oh_angular_5_1;
  double all_oh_5_5 = data_oh_angular_5_2;
  double oa_gf_linear_5_0 = oa_gf_5_0;
  double oa_gf_linear_5_1 = oa_gf_5_1;
  double oa_gf_linear_5_2 = oa_gf_5_2;
  double oa_gf_angular_5_0 = oa_gf_5_3;
  double oa_gf_angular_5_1 = oa_gf_5_4;
  double oa_gf_angular_5_2 = oa_gf_5_5;
  double data_of_linear_temp1_5_0 = ((r_491_new_translation_1 * oa_gf_angular_5_2) - (r_491_new_translation_2 * oa_gf_angular_5_1));
  double data_of_linear_temp1_5_1 = ((r_491_new_translation_2 * oa_gf_angular_5_0) - (r_491_new_translation_0 * oa_gf_angular_5_2));
  double data_of_linear_temp1_5_2 = ((r_491_new_translation_0 * oa_gf_angular_5_1) - (r_491_new_translation_1 * oa_gf_angular_5_0));
  double data_of_linear_temp2_5_0 = (oa_gf_linear_5_0 - data_of_linear_temp1_5_0);
  double data_of_linear_temp2_5_1 = (oa_gf_linear_5_1 - data_of_linear_temp1_5_1);
  double data_of_linear_temp2_5_2 = (oa_gf_linear_5_2 - data_of_linear_temp1_5_2);
  double data_of_linear_temp3_5_0 = (masses_5 * data_of_linear_temp2_5_0);
  double data_of_linear_temp3_5_1 = (masses_5 * data_of_linear_temp2_5_1);
  double data_of_linear_temp3_5_2 = (masses_5 * data_of_linear_temp2_5_2);
  double r_520_ = (r_504_symmetric3_rotate_0_0 * oa_gf_angular_5_0);
  double r_521_ = (r_504_symmetric3_rotate_0_1 * oa_gf_angular_5_1);
  double r_522_ = (r_504_symmetric3_rotate_0_2 * oa_gf_angular_5_2);
  double r_523_ = (r_504_symmetric3_rotate_0_1 * oa_gf_angular_5_0);
  double r_524_ = (r_504_symmetric3_rotate_1_1 * oa_gf_angular_5_1);
  double r_525_ = (r_504_symmetric3_rotate_1_2 * oa_gf_angular_5_2);
  double r_526_ = (r_504_symmetric3_rotate_0_2 * oa_gf_angular_5_0);
  double r_527_ = (r_504_symmetric3_rotate_1_2 * oa_gf_angular_5_1);
  double r_528_ = (r_504_symmetric3_rotate_2_2 * oa_gf_angular_5_2);
  double r_529_rhsMult1_temp_5 = (r_520_ + r_521_);
  double r_530_rhsMult1_5 = (r_529_rhsMult1_temp_5 + r_522_);
  double r_531_rhsMult2_temp_5 = (r_523_ + r_524_);
  double r_532_rhsMult2_5 = (r_531_rhsMult2_temp_5 + r_525_);
  double r_533_rhsMult3_temp_5 = (r_526_ + r_527_);
  double r_534_rhsMult3_5 = (r_533_rhsMult3_temp_5 + r_528_);
  double r_535_rhsMult_5_0 = r_530_rhsMult1_5;
  double r_535_rhsMult_5_1 = r_532_rhsMult2_5;
  double r_535_rhsMult_5_2 = r_534_rhsMult3_5;
  double data_of_angular_temp2_5_0 = ((r_491_new_translation_1 * data_of_linear_temp3_5_2) - (r_491_new_translation_2 * data_of_linear_temp3_5_1));
  double data_of_angular_temp2_5_1 = ((r_491_new_translation_2 * data_of_linear_temp3_5_0) - (r_491_new_translation_0 * data_of_linear_temp3_5_2));
  double data_of_angular_temp2_5_2 = ((r_491_new_translation_0 * data_of_linear_temp3_5_1) - (r_491_new_translation_1 * data_of_linear_temp3_5_0));
  double data_of_angular_temp3_5_0 = (r_535_rhsMult_5_0 + data_of_angular_temp2_5_0);
  double data_of_angular_temp3_5_1 = (r_535_rhsMult_5_1 + data_of_angular_temp2_5_1);
  double data_of_angular_temp3_5_2 = (r_535_rhsMult_5_2 + data_of_angular_temp2_5_2);
  double data_of_linear_temp4_5_0 = ((ov_angular_5_1 * data_oh_linear_5_2) - (ov_angular_5_2 * data_oh_linear_5_1));
  double data_of_linear_temp4_5_1 = ((ov_angular_5_2 * data_oh_linear_5_0) - (ov_angular_5_0 * data_oh_linear_5_2));
  double data_of_linear_temp4_5_2 = ((ov_angular_5_0 * data_oh_linear_5_1) - (ov_angular_5_1 * data_oh_linear_5_0));
  double data_of_angular_temp4_5_0 = ((ov_angular_5_1 * data_oh_angular_5_2) - (ov_angular_5_2 * data_oh_angular_5_1));
  double data_of_angular_temp4_5_1 = ((ov_angular_5_2 * data_oh_angular_5_0) - (ov_angular_5_0 * data_oh_angular_5_2));
  double data_of_angular_temp4_5_2 = ((ov_angular_5_0 * data_oh_angular_5_1) - (ov_angular_5_1 * data_oh_angular_5_0));
  double data_of_angular_temp5_5_0 = ((ov_linear_5_1 * data_oh_linear_5_2) - (ov_linear_5_2 * data_oh_linear_5_1));
  double data_of_angular_temp5_5_1 = ((ov_linear_5_2 * data_oh_linear_5_0) - (ov_linear_5_0 * data_oh_linear_5_2));
  double data_of_angular_temp5_5_2 = ((ov_linear_5_0 * data_oh_linear_5_1) - (ov_linear_5_1 * data_oh_linear_5_0));
  double data_of_angular_temp6_5_0 = (data_of_angular_temp4_5_0 + data_of_angular_temp5_5_0);
  double data_of_angular_temp6_5_1 = (data_of_angular_temp4_5_1 + data_of_angular_temp5_5_1);
  double data_of_angular_temp6_5_2 = (data_of_angular_temp4_5_2 + data_of_angular_temp5_5_2);
  double data_of_linear_5_0 = (data_of_linear_temp3_5_0 + data_of_linear_temp4_5_0);
  double data_of_linear_5_1 = (data_of_linear_temp3_5_1 + data_of_linear_temp4_5_1);
  double data_of_linear_5_2 = (data_of_linear_temp3_5_2 + data_of_linear_temp4_5_2);
  double data_of_angular_5_0 = (data_of_angular_temp3_5_0 + data_of_angular_temp6_5_0);
  double data_of_angular_5_1 = (data_of_angular_temp3_5_1 + data_of_angular_temp6_5_1);
  double data_of_angular_5_2 = (data_of_angular_temp3_5_2 + data_of_angular_temp6_5_2);
  double all_of_5_0 = data_of_linear_5_0;
  double all_of_5_1 = data_of_linear_5_1;
  double all_of_5_2 = data_of_linear_5_2;
  double all_of_5_3 = data_of_angular_5_0;
  double all_of_5_4 = data_of_angular_5_1;
  double all_of_5_5 = data_of_angular_5_2;
  double act_constraint_rotation_col_5_0 = oMi_rotation_5_0_2;
  double act_constraint_rotation_col_5_1 = oMi_rotation_5_1_2;
  double act_constraint_rotation_col_5_2 = oMi_rotation_5_2_2;
  double act_constraint_linear_5_0 = ((oMi_translation_5_1 * act_constraint_rotation_col_5_2) - (oMi_translation_5_2 * act_constraint_rotation_col_5_1));
  double act_constraint_linear_5_1 = ((oMi_translation_5_2 * act_constraint_rotation_col_5_0) - (oMi_translation_5_0 * act_constraint_rotation_col_5_2));
  double act_constraint_linear_5_2 = ((oMi_translation_5_0 * act_constraint_rotation_col_5_1) - (oMi_translation_5_1 * act_constraint_rotation_col_5_0));
  double j_cols_5_0 = act_constraint_linear_5_0;
  double j_cols_5_1 = act_constraint_linear_5_1;
  double j_cols_5_2 = act_constraint_linear_5_2;
  double j_cols_5_3 = act_constraint_rotation_col_5_0;
  double j_cols_5_4 = act_constraint_rotation_col_5_1;
  double j_cols_5_5 = act_constraint_rotation_col_5_2;
  double mout_linear_cross_angular_5_0 = ((ov_linear_5_1 * act_constraint_rotation_col_5_2) - (ov_linear_5_2 * act_constraint_rotation_col_5_1));
  double mout_linear_cross_angular_5_1 = ((ov_linear_5_2 * act_constraint_rotation_col_5_0) - (ov_linear_5_0 * act_constraint_rotation_col_5_2));
  double mout_linear_cross_angular_5_2 = ((ov_linear_5_0 * act_constraint_rotation_col_5_1) - (ov_linear_5_1 * act_constraint_rotation_col_5_0));
  double mout_angular_cross_linear_5_0 = ((ov_angular_5_1 * act_constraint_linear_5_2) - (ov_angular_5_2 * act_constraint_linear_5_1));
  double mout_angular_cross_linear_5_1 = ((ov_angular_5_2 * act_constraint_linear_5_0) - (ov_angular_5_0 * act_constraint_linear_5_2));
  double mout_angular_cross_linear_5_2 = ((ov_angular_5_0 * act_constraint_linear_5_1) - (ov_angular_5_1 * act_constraint_linear_5_0));
  double mout_linear_5_0 = (mout_linear_cross_angular_5_0 + mout_angular_cross_linear_5_0);
  double mout_linear_5_1 = (mout_linear_cross_angular_5_1 + mout_angular_cross_linear_5_1);
  double mout_linear_5_2 = (mout_linear_cross_angular_5_2 + mout_angular_cross_linear_5_2);
  double mout_angular_5_0 = ((ov_angular_5_1 * act_constraint_rotation_col_5_2) - (ov_angular_5_2 * act_constraint_rotation_col_5_1));
  double mout_angular_5_1 = ((ov_angular_5_2 * act_constraint_rotation_col_5_0) - (ov_angular_5_0 * act_constraint_rotation_col_5_2));
  double mout_angular_5_2 = ((ov_angular_5_0 * act_constraint_rotation_col_5_1) - (ov_angular_5_1 * act_constraint_rotation_col_5_0));
  double dj_cols_5_0 = mout_linear_5_0;
  double dj_cols_5_1 = mout_linear_5_1;
  double dj_cols_5_2 = mout_linear_5_2;
  double dj_cols_5_3 = mout_angular_5_0;
  double dj_cols_5_4 = mout_angular_5_1;
  double dj_cols_5_5 = mout_angular_5_2;
  double oa_gf_parent_linear_5_0 = oa_gf_4_0;
  double oa_gf_parent_linear_5_1 = oa_gf_4_1;
  double oa_gf_parent_linear_5_2 = oa_gf_4_2;
  double oa_gf_parent_angular_5_0 = oa_gf_4_3;
  double oa_gf_parent_angular_5_1 = oa_gf_4_4;
  double oa_gf_parent_angular_5_2 = oa_gf_4_5;
  double r_536_mout_linear_cross_angular_5_0 = ((oa_gf_parent_linear_5_1 * act_constraint_rotation_col_5_2) - (oa_gf_parent_linear_5_2 * act_constraint_rotation_col_5_1));
  double r_536_mout_linear_cross_angular_5_1 = ((oa_gf_parent_linear_5_2 * act_constraint_rotation_col_5_0) - (oa_gf_parent_linear_5_0 * act_constraint_rotation_col_5_2));
  double r_536_mout_linear_cross_angular_5_2 = ((oa_gf_parent_linear_5_0 * act_constraint_rotation_col_5_1) - (oa_gf_parent_linear_5_1 * act_constraint_rotation_col_5_0));
  double r_537_mout_angular_cross_linear_5_0 = ((oa_gf_parent_angular_5_1 * act_constraint_linear_5_2) - (oa_gf_parent_angular_5_2 * act_constraint_linear_5_1));
  double r_537_mout_angular_cross_linear_5_1 = ((oa_gf_parent_angular_5_2 * act_constraint_linear_5_0) - (oa_gf_parent_angular_5_0 * act_constraint_linear_5_2));
  double r_537_mout_angular_cross_linear_5_2 = ((oa_gf_parent_angular_5_0 * act_constraint_linear_5_1) - (oa_gf_parent_angular_5_1 * act_constraint_linear_5_0));
  double r_538_mout_linear_5_0 = (r_536_mout_linear_cross_angular_5_0 + r_537_mout_angular_cross_linear_5_0);
  double r_538_mout_linear_5_1 = (r_536_mout_linear_cross_angular_5_1 + r_537_mout_angular_cross_linear_5_1);
  double r_538_mout_linear_5_2 = (r_536_mout_linear_cross_angular_5_2 + r_537_mout_angular_cross_linear_5_2);
  double r_539_mout_angular_5_0 = ((oa_gf_parent_angular_5_1 * act_constraint_rotation_col_5_2) - (oa_gf_parent_angular_5_2 * act_constraint_rotation_col_5_1));
  double r_539_mout_angular_5_1 = ((oa_gf_parent_angular_5_2 * act_constraint_rotation_col_5_0) - (oa_gf_parent_angular_5_0 * act_constraint_rotation_col_5_2));
  double r_539_mout_angular_5_2 = ((oa_gf_parent_angular_5_0 * act_constraint_rotation_col_5_1) - (oa_gf_parent_angular_5_1 * act_constraint_rotation_col_5_0));
  double dAdv_cols_linear_5_0 = mout_linear_5_0;
  double dAdv_cols_linear_5_1 = mout_linear_5_1;
  double dAdv_cols_linear_5_2 = mout_linear_5_2;
  double dAdv_cols_angular_5_0 = mout_angular_5_0;
  double dAdv_cols_angular_5_1 = mout_angular_5_1;
  double dAdv_cols_angular_5_2 = mout_angular_5_2;
  double data_ov_parent_linear_5_0 = ov_4_0;
  double data_ov_parent_linear_5_1 = ov_4_1;
  double data_ov_parent_linear_5_2 = ov_4_2;
  double data_ov_parent_angular_5_0 = ov_4_3;
  double data_ov_parent_angular_5_1 = ov_4_4;
  double data_ov_parent_angular_5_2 = ov_4_5;
  double r_540_mout_linear_cross_angular_5_0 = ((data_ov_parent_linear_5_1 * act_constraint_rotation_col_5_2) - (data_ov_parent_linear_5_2 * act_constraint_rotation_col_5_1));
  double r_540_mout_linear_cross_angular_5_1 = ((data_ov_parent_linear_5_2 * act_constraint_rotation_col_5_0) - (data_ov_parent_linear_5_0 * act_constraint_rotation_col_5_2));
  double r_540_mout_linear_cross_angular_5_2 = ((data_ov_parent_linear_5_0 * act_constraint_rotation_col_5_1) - (data_ov_parent_linear_5_1 * act_constraint_rotation_col_5_0));
  double r_541_mout_angular_cross_linear_5_0 = ((data_ov_parent_angular_5_1 * act_constraint_linear_5_2) - (data_ov_parent_angular_5_2 * act_constraint_linear_5_1));
  double r_541_mout_angular_cross_linear_5_1 = ((data_ov_parent_angular_5_2 * act_constraint_linear_5_0) - (data_ov_parent_angular_5_0 * act_constraint_linear_5_2));
  double r_541_mout_angular_cross_linear_5_2 = ((data_ov_parent_angular_5_0 * act_constraint_linear_5_1) - (data_ov_parent_angular_5_1 * act_constraint_linear_5_0));
  double r_542_mout_linear_5_0 = (r_540_mout_linear_cross_angular_5_0 + r_541_mout_angular_cross_linear_5_0);
  double r_542_mout_linear_5_1 = (r_540_mout_linear_cross_angular_5_1 + r_541_mout_angular_cross_linear_5_1);
  double r_542_mout_linear_5_2 = (r_540_mout_linear_cross_angular_5_2 + r_541_mout_angular_cross_linear_5_2);
  double r_543_mout_angular_5_0 = ((data_ov_parent_angular_5_1 * act_constraint_rotation_col_5_2) - (data_ov_parent_angular_5_2 * act_constraint_rotation_col_5_1));
  double r_543_mout_angular_5_1 = ((data_ov_parent_angular_5_2 * act_constraint_rotation_col_5_0) - (data_ov_parent_angular_5_0 * act_constraint_rotation_col_5_2));
  double r_543_mout_angular_5_2 = ((data_ov_parent_angular_5_0 * act_constraint_rotation_col_5_1) - (data_ov_parent_angular_5_1 * act_constraint_rotation_col_5_0));
  double r_544_data_ov_parent_linear_5_0 = ov_4_0;
  double r_544_data_ov_parent_linear_5_1 = ov_4_1;
  double r_544_data_ov_parent_linear_5_2 = ov_4_2;
  double r_545_data_ov_parent_angular_5_0 = ov_4_3;
  double r_545_data_ov_parent_angular_5_1 = ov_4_4;
  double r_545_data_ov_parent_angular_5_2 = ov_4_5;
  double r_546_mout_linear_cross_angular_5_0 = ((r_544_data_ov_parent_linear_5_1 * r_543_mout_angular_5_2) - (r_544_data_ov_parent_linear_5_2 * r_543_mout_angular_5_1));
  double r_546_mout_linear_cross_angular_5_1 = ((r_544_data_ov_parent_linear_5_2 * r_543_mout_angular_5_0) - (r_544_data_ov_parent_linear_5_0 * r_543_mout_angular_5_2));
  double r_546_mout_linear_cross_angular_5_2 = ((r_544_data_ov_parent_linear_5_0 * r_543_mout_angular_5_1) - (r_544_data_ov_parent_linear_5_1 * r_543_mout_angular_5_0));
  double r_547_mout_angular_cross_linear_5_0 = ((r_545_data_ov_parent_angular_5_1 * r_542_mout_linear_5_2) - (r_545_data_ov_parent_angular_5_2 * r_542_mout_linear_5_1));
  double r_547_mout_angular_cross_linear_5_1 = ((r_545_data_ov_parent_angular_5_2 * r_542_mout_linear_5_0) - (r_545_data_ov_parent_angular_5_0 * r_542_mout_linear_5_2));
  double r_547_mout_angular_cross_linear_5_2 = ((r_545_data_ov_parent_angular_5_0 * r_542_mout_linear_5_1) - (r_545_data_ov_parent_angular_5_1 * r_542_mout_linear_5_0));
  double r_548_mout_linear_5_0 = (r_546_mout_linear_cross_angular_5_0 + r_547_mout_angular_cross_linear_5_0);
  double r_548_mout_linear_5_1 = (r_546_mout_linear_cross_angular_5_1 + r_547_mout_angular_cross_linear_5_1);
  double r_548_mout_linear_5_2 = (r_546_mout_linear_cross_angular_5_2 + r_547_mout_angular_cross_linear_5_2);
  double r_549_mout_angular_5_0 = ((r_545_data_ov_parent_angular_5_1 * r_543_mout_angular_5_2) - (r_545_data_ov_parent_angular_5_2 * r_543_mout_angular_5_1));
  double r_549_mout_angular_5_1 = ((r_545_data_ov_parent_angular_5_2 * r_543_mout_angular_5_0) - (r_545_data_ov_parent_angular_5_0 * r_543_mout_angular_5_2));
  double r_549_mout_angular_5_2 = ((r_545_data_ov_parent_angular_5_0 * r_543_mout_angular_5_1) - (r_545_data_ov_parent_angular_5_1 * r_543_mout_angular_5_0));
  double dAdq_cols_linear_5_0 = (r_538_mout_linear_5_0 + r_548_mout_linear_5_0);
  double dAdq_cols_linear_5_1 = (r_538_mout_linear_5_1 + r_548_mout_linear_5_1);
  double dAdq_cols_linear_5_2 = (r_538_mout_linear_5_2 + r_548_mout_linear_5_2);
  double dAdq_cols_angular_5_0 = (r_539_mout_angular_5_0 + r_549_mout_angular_5_0);
  double dAdq_cols_angular_5_1 = (r_539_mout_angular_5_1 + r_549_mout_angular_5_1);
  double dAdq_cols_angular_5_2 = (r_539_mout_angular_5_2 + r_549_mout_angular_5_2);
  double dAdv_cols_linear_updated_5_0 = (dAdv_cols_linear_5_0 + r_542_mout_linear_5_0);
  double dAdv_cols_linear_updated_5_1 = (dAdv_cols_linear_5_1 + r_542_mout_linear_5_1);
  double dAdv_cols_linear_updated_5_2 = (dAdv_cols_linear_5_2 + r_542_mout_linear_5_2);
  double dAdv_cols_angular_updated_5_0 = (dAdv_cols_angular_5_0 + r_543_mout_angular_5_0);
  double dAdv_cols_angular_updated_5_1 = (dAdv_cols_angular_5_1 + r_543_mout_angular_5_1);
  double dAdv_cols_angular_updated_5_2 = (dAdv_cols_angular_5_2 + r_543_mout_angular_5_2);
  double dAdq_cols_5_0 = dAdq_cols_linear_5_0;
  double dAdq_cols_5_1 = dAdq_cols_linear_5_1;
  double dAdq_cols_5_2 = dAdq_cols_linear_5_2;
  double dAdq_cols_5_3 = dAdq_cols_angular_5_0;
  double dAdq_cols_5_4 = dAdq_cols_angular_5_1;
  double dAdq_cols_5_5 = dAdq_cols_angular_5_2;
  double dAdv_cols_5_0 = dAdv_cols_linear_updated_5_0;
  double dAdv_cols_5_1 = dAdv_cols_linear_updated_5_1;
  double dAdv_cols_5_2 = dAdv_cols_linear_updated_5_2;
  double dAdv_cols_5_3 = dAdv_cols_angular_updated_5_0;
  double dAdv_cols_5_4 = dAdv_cols_angular_updated_5_1;
  double dAdv_cols_5_5 = dAdv_cols_angular_updated_5_2;
  double dVdq_cols_5_0 = r_542_mout_linear_5_0;
  double dVdq_cols_5_1 = r_542_mout_linear_5_1;
  double dVdq_cols_5_2 = r_542_mout_linear_5_2;
  double dVdq_cols_5_3 = r_543_mout_angular_5_0;
  double dVdq_cols_5_4 = r_543_mout_angular_5_1;
  double dVdq_cols_5_5 = r_543_mout_angular_5_2;
  double r_550_mv_linear_0 = (masses_5 * ov_linear_5_0);
  double r_550_mv_linear_1 = (masses_5 * ov_linear_5_1);
  double r_550_mv_linear_2 = (masses_5 * ov_linear_5_2);
  double r_551_mv_angular_0 = (masses_5 * ov_angular_5_0);
  double r_551_mv_angular_1 = (masses_5 * ov_angular_5_1);
  double r_551_mv_angular_2 = (masses_5 * ov_angular_5_2);
  double r_552_skew_vec3d_0_0 = 0;
  double r_552_skew_vec3d_0_1 = -(r_550_mv_linear_2);
  double r_552_skew_vec3d_0_2 = r_550_mv_linear_1;
  double r_552_skew_vec3d_1_0 = r_550_mv_linear_2;
  double r_552_skew_vec3d_1_1 = 0;
  double r_552_skew_vec3d_1_2 = -(r_550_mv_linear_0);
  double r_552_skew_vec3d_2_0 = -(r_550_mv_linear_1);
  double r_552_skew_vec3d_2_1 = r_550_mv_linear_0;
  double r_552_skew_vec3d_2_2 = 0;
  double r_553_skew_square_c1_0_0 = (r_551_mv_angular_0 * r_491_new_translation_0);
  double r_553_skew_square_c1_0_1 = (r_551_mv_angular_1 * r_491_new_translation_0);
  double r_553_skew_square_c1_0_2 = (r_551_mv_angular_2 * r_491_new_translation_0);
  double r_553_skew_square_c1_1_0 = (r_551_mv_angular_0 * r_491_new_translation_1);
  double r_553_skew_square_c1_1_1 = (r_551_mv_angular_1 * r_491_new_translation_1);
  double r_553_skew_square_c1_1_2 = (r_551_mv_angular_2 * r_491_new_translation_1);
  double r_553_skew_square_c1_2_0 = (r_551_mv_angular_0 * r_491_new_translation_2);
  double r_553_skew_square_c1_2_1 = (r_551_mv_angular_1 * r_491_new_translation_2);
  double r_553_skew_square_c1_2_2 = (r_551_mv_angular_2 * r_491_new_translation_2);
  double r_554_skew_square_udotv = (((r_491_new_translation_0 * r_551_mv_angular_0) + (r_491_new_translation_1 * r_551_mv_angular_1)) + (r_491_new_translation_2 * r_551_mv_angular_2));
  double r_555_skew_square_c2_0_0 = (r_553_skew_square_c1_0_0 - r_554_skew_square_udotv);
  double r_555_skew_square_c2_0_1 = r_553_skew_square_c1_0_1;
  double r_555_skew_square_c2_0_2 = r_553_skew_square_c1_0_2;
  double r_555_skew_square_c2_1_0 = r_553_skew_square_c1_1_0;
  double r_555_skew_square_c2_1_1 = (r_553_skew_square_c1_1_1 - r_554_skew_square_udotv);
  double r_555_skew_square_c2_1_2 = r_553_skew_square_c1_1_2;
  double r_555_skew_square_c2_2_0 = r_553_skew_square_c1_2_0;
  double r_555_skew_square_c2_2_1 = r_553_skew_square_c1_2_1;
  double r_555_skew_square_c2_2_2 = (r_553_skew_square_c1_2_2 - r_554_skew_square_udotv);
  double r_556_skew_square_c1_0_0 = (r_491_new_translation_0 * r_551_mv_angular_0);
  double r_556_skew_square_c1_0_1 = (r_491_new_translation_1 * r_551_mv_angular_0);
  double r_556_skew_square_c1_0_2 = (r_491_new_translation_2 * r_551_mv_angular_0);
  double r_556_skew_square_c1_1_0 = (r_491_new_translation_0 * r_551_mv_angular_1);
  double r_556_skew_square_c1_1_1 = (r_491_new_translation_1 * r_551_mv_angular_1);
  double r_556_skew_square_c1_1_2 = (r_491_new_translation_2 * r_551_mv_angular_1);
  double r_556_skew_square_c1_2_0 = (r_491_new_translation_0 * r_551_mv_angular_2);
  double r_556_skew_square_c1_2_1 = (r_491_new_translation_1 * r_551_mv_angular_2);
  double r_556_skew_square_c1_2_2 = (r_491_new_translation_2 * r_551_mv_angular_2);
  double r_557_skew_square_udotv = (((r_551_mv_angular_0 * r_491_new_translation_0) + (r_551_mv_angular_1 * r_491_new_translation_1)) + (r_551_mv_angular_2 * r_491_new_translation_2));
  double r_558_skew_square_c2_0_0 = (r_556_skew_square_c1_0_0 - r_557_skew_square_udotv);
  double r_558_skew_square_c2_0_1 = r_556_skew_square_c1_0_1;
  double r_558_skew_square_c2_0_2 = r_556_skew_square_c1_0_2;
  double r_558_skew_square_c2_1_0 = r_556_skew_square_c1_1_0;
  double r_558_skew_square_c2_1_1 = (r_556_skew_square_c1_1_1 - r_557_skew_square_udotv);
  double r_558_skew_square_c2_1_2 = r_556_skew_square_c1_1_2;
  double r_558_skew_square_c2_2_0 = r_556_skew_square_c1_2_0;
  double r_558_skew_square_c2_2_1 = r_556_skew_square_c1_2_1;
  double r_558_skew_square_c2_2_2 = (r_556_skew_square_c1_2_2 - r_557_skew_square_udotv);
  double r_559_res_first_temp_0_0 = (r_558_skew_square_c2_0_0 - r_555_skew_square_c2_0_0);
  double r_559_res_first_temp_0_1 = (r_558_skew_square_c2_0_1 - r_555_skew_square_c2_0_1);
  double r_559_res_first_temp_0_2 = (r_558_skew_square_c2_0_2 - r_555_skew_square_c2_0_2);
  double r_559_res_first_temp_1_0 = (r_558_skew_square_c2_1_0 - r_555_skew_square_c2_1_0);
  double r_559_res_first_temp_1_1 = (r_558_skew_square_c2_1_1 - r_555_skew_square_c2_1_1);
  double r_559_res_first_temp_1_2 = (r_558_skew_square_c2_1_2 - r_555_skew_square_c2_1_2);
  double r_559_res_first_temp_2_0 = (r_558_skew_square_c2_2_0 - r_555_skew_square_c2_2_0);
  double r_559_res_first_temp_2_1 = (r_558_skew_square_c2_2_1 - r_555_skew_square_c2_2_1);
  double r_559_res_first_temp_2_2 = (r_558_skew_square_c2_2_2 - r_555_skew_square_c2_2_2);
  double r_560_res_first_0_0 = (r_559_res_first_temp_0_0 - r_552_skew_vec3d_0_0);
  double r_560_res_first_0_1 = (r_559_res_first_temp_0_1 - r_552_skew_vec3d_0_1);
  double r_560_res_first_0_2 = (r_559_res_first_temp_0_2 - r_552_skew_vec3d_0_2);
  double r_560_res_first_1_0 = (r_559_res_first_temp_1_0 - r_552_skew_vec3d_1_0);
  double r_560_res_first_1_1 = (r_559_res_first_temp_1_1 - r_552_skew_vec3d_1_1);
  double r_560_res_first_1_2 = (r_559_res_first_temp_1_2 - r_552_skew_vec3d_1_2);
  double r_560_res_first_2_0 = (r_559_res_first_temp_2_0 - r_552_skew_vec3d_2_0);
  double r_560_res_first_2_1 = (r_559_res_first_temp_2_1 - r_552_skew_vec3d_2_1);
  double r_560_res_first_2_2 = (r_559_res_first_temp_2_2 - r_552_skew_vec3d_2_2);
  double r_561_skew_square_c1_0_0 = (r_550_mv_linear_0 * r_491_new_translation_0);
  double r_561_skew_square_c1_0_1 = (r_550_mv_linear_1 * r_491_new_translation_0);
  double r_561_skew_square_c1_0_2 = (r_550_mv_linear_2 * r_491_new_translation_0);
  double r_561_skew_square_c1_1_0 = (r_550_mv_linear_0 * r_491_new_translation_1);
  double r_561_skew_square_c1_1_1 = (r_550_mv_linear_1 * r_491_new_translation_1);
  double r_561_skew_square_c1_1_2 = (r_550_mv_linear_2 * r_491_new_translation_1);
  double r_561_skew_square_c1_2_0 = (r_550_mv_linear_0 * r_491_new_translation_2);
  double r_561_skew_square_c1_2_1 = (r_550_mv_linear_1 * r_491_new_translation_2);
  double r_561_skew_square_c1_2_2 = (r_550_mv_linear_2 * r_491_new_translation_2);
  double r_562_skew_square_udotv = (((r_491_new_translation_0 * r_550_mv_linear_0) + (r_491_new_translation_1 * r_550_mv_linear_1)) + (r_491_new_translation_2 * r_550_mv_linear_2));
  double r_563_skew_square_c2_0_0 = (r_561_skew_square_c1_0_0 - r_562_skew_square_udotv);
  double r_563_skew_square_c2_0_1 = r_561_skew_square_c1_0_1;
  double r_563_skew_square_c2_0_2 = r_561_skew_square_c1_0_2;
  double r_563_skew_square_c2_1_0 = r_561_skew_square_c1_1_0;
  double r_563_skew_square_c2_1_1 = (r_561_skew_square_c1_1_1 - r_562_skew_square_udotv);
  double r_563_skew_square_c2_1_2 = r_561_skew_square_c1_1_2;
  double r_563_skew_square_c2_2_0 = r_561_skew_square_c1_2_0;
  double r_563_skew_square_c2_2_1 = r_561_skew_square_c1_2_1;
  double r_563_skew_square_c2_2_2 = (r_561_skew_square_c1_2_2 - r_562_skew_square_udotv);
  double r_564_skew_square_c1_0_0 = (r_491_new_translation_0 * r_550_mv_linear_0);
  double r_564_skew_square_c1_0_1 = (r_491_new_translation_1 * r_550_mv_linear_0);
  double r_564_skew_square_c1_0_2 = (r_491_new_translation_2 * r_550_mv_linear_0);
  double r_564_skew_square_c1_1_0 = (r_491_new_translation_0 * r_550_mv_linear_1);
  double r_564_skew_square_c1_1_1 = (r_491_new_translation_1 * r_550_mv_linear_1);
  double r_564_skew_square_c1_1_2 = (r_491_new_translation_2 * r_550_mv_linear_1);
  double r_564_skew_square_c1_2_0 = (r_491_new_translation_0 * r_550_mv_linear_2);
  double r_564_skew_square_c1_2_1 = (r_491_new_translation_1 * r_550_mv_linear_2);
  double r_564_skew_square_c1_2_2 = (r_491_new_translation_2 * r_550_mv_linear_2);
  double r_565_skew_square_udotv = (((r_550_mv_linear_0 * r_491_new_translation_0) + (r_550_mv_linear_1 * r_491_new_translation_1)) + (r_550_mv_linear_2 * r_491_new_translation_2));
  double r_566_skew_square_c2_0_0 = (r_564_skew_square_c1_0_0 - r_565_skew_square_udotv);
  double r_566_skew_square_c2_0_1 = r_564_skew_square_c1_0_1;
  double r_566_skew_square_c2_0_2 = r_564_skew_square_c1_0_2;
  double r_566_skew_square_c2_1_0 = r_564_skew_square_c1_1_0;
  double r_566_skew_square_c2_1_1 = (r_564_skew_square_c1_1_1 - r_565_skew_square_udotv);
  double r_566_skew_square_c2_1_2 = r_564_skew_square_c1_1_2;
  double r_566_skew_square_c2_2_0 = r_564_skew_square_c1_2_0;
  double r_566_skew_square_c2_2_1 = r_564_skew_square_c1_2_1;
  double r_566_skew_square_c2_2_2 = (r_564_skew_square_c1_2_2 - r_565_skew_square_udotv);
  double r_567_skew_second_second_neg_0_0 = -(r_563_skew_square_c2_0_0);
  double r_567_skew_second_second_neg_0_1 = -(r_563_skew_square_c2_0_1);
  double r_567_skew_second_second_neg_0_2 = -(r_563_skew_square_c2_0_2);
  double r_567_skew_second_second_neg_1_0 = -(r_563_skew_square_c2_1_0);
  double r_567_skew_second_second_neg_1_1 = -(r_563_skew_square_c2_1_1);
  double r_567_skew_second_second_neg_1_2 = -(r_563_skew_square_c2_1_2);
  double r_567_skew_second_second_neg_2_0 = -(r_563_skew_square_c2_2_0);
  double r_567_skew_second_second_neg_2_1 = -(r_563_skew_square_c2_2_1);
  double r_567_skew_second_second_neg_2_2 = -(r_563_skew_square_c2_2_2);
  double r_568_res_second_0_0 = (r_567_skew_second_second_neg_0_0 - r_566_skew_square_c2_0_0);
  double r_568_res_second_0_1 = (r_567_skew_second_second_neg_0_1 - r_566_skew_square_c2_0_1);
  double r_568_res_second_0_2 = (r_567_skew_second_second_neg_0_2 - r_566_skew_square_c2_0_2);
  double r_568_res_second_1_0 = (r_567_skew_second_second_neg_1_0 - r_566_skew_square_c2_1_0);
  double r_568_res_second_1_1 = (r_567_skew_second_second_neg_1_1 - r_566_skew_square_c2_1_1);
  double r_568_res_second_1_2 = (r_567_skew_second_second_neg_1_2 - r_566_skew_square_c2_1_2);
  double r_568_res_second_2_0 = (r_567_skew_second_second_neg_2_0 - r_566_skew_square_c2_2_0);
  double r_568_res_second_2_1 = (r_567_skew_second_second_neg_2_1 - r_566_skew_square_c2_2_1);
  double r_568_res_second_2_2 = (r_567_skew_second_second_neg_2_2 - r_566_skew_square_c2_2_2);
  double r_569_alpha_skew_square_0_0 = (((r_491_new_translation_1 * r_491_new_translation_1) + (r_491_new_translation_2 * r_491_new_translation_2)) * -(masses_5));
  double r_569_alpha_skew_square_0_1 = (r_491_new_translation_1 * (r_491_new_translation_0 * masses_5));
  double r_569_alpha_skew_square_0_2 = (r_491_new_translation_2 * (r_491_new_translation_0 * masses_5));
  double r_569_alpha_skew_square_1_0 = (r_491_new_translation_1 * (r_491_new_translation_0 * masses_5));
  double r_569_alpha_skew_square_1_1 = (((r_491_new_translation_0 * r_491_new_translation_0) + (r_491_new_translation_2 * r_491_new_translation_2)) * -(masses_5));
  double r_569_alpha_skew_square_1_2 = (r_491_new_translation_2 * (r_491_new_translation_1 * masses_5));
  double r_569_alpha_skew_square_2_0 = (r_491_new_translation_2 * (r_491_new_translation_0 * masses_5));
  double r_569_alpha_skew_square_2_1 = (r_491_new_translation_2 * (r_491_new_translation_1 * masses_5));
  double r_569_alpha_skew_square_2_2 = (((r_491_new_translation_0 * r_491_new_translation_0) + (r_491_new_translation_1 * r_491_new_translation_1)) * -(masses_5));
  double r_570_res_third_0_0 = (r_504_symmetric3_rotate_0_0 - r_569_alpha_skew_square_0_0);
  double r_570_res_third_0_1 = (r_504_symmetric3_rotate_0_1 - r_569_alpha_skew_square_0_1);
  double r_570_res_third_0_2 = (r_504_symmetric3_rotate_0_2 - r_569_alpha_skew_square_0_2);
  double r_570_res_third_1_0 = (r_504_symmetric3_rotate_1_0 - r_569_alpha_skew_square_1_0);
  double r_570_res_third_1_1 = (r_504_symmetric3_rotate_1_1 - r_569_alpha_skew_square_1_1);
  double r_570_res_third_1_2 = (r_504_symmetric3_rotate_1_2 - r_569_alpha_skew_square_1_2);
  double r_570_res_third_2_0 = (r_504_symmetric3_rotate_2_0 - r_569_alpha_skew_square_2_0);
  double r_570_res_third_2_1 = (r_504_symmetric3_rotate_2_1 - r_569_alpha_skew_square_2_1);
  double r_570_res_third_2_2 = (r_504_symmetric3_rotate_2_2 - r_569_alpha_skew_square_2_2);
  double r_571_skew_vec3d_0_0 = 0;
  double r_571_skew_vec3d_0_1 = -(ov_angular_5_2);
  double r_571_skew_vec3d_0_2 = ov_angular_5_1;
  double r_571_skew_vec3d_1_0 = ov_angular_5_2;
  double r_571_skew_vec3d_1_1 = 0;
  double r_571_skew_vec3d_1_2 = -(ov_angular_5_0);
  double r_571_skew_vec3d_2_0 = -(ov_angular_5_1);
  double r_571_skew_vec3d_2_1 = ov_angular_5_0;
  double r_571_skew_vec3d_2_2 = 0;
  double r_572_res_fourth_0_0 = (((r_570_res_third_0_0 * r_571_skew_vec3d_0_0) + (r_570_res_third_0_1 * r_571_skew_vec3d_1_0)) + (r_570_res_third_0_2 * r_571_skew_vec3d_2_0));
  double r_572_res_fourth_0_1 = (((r_570_res_third_0_0 * r_571_skew_vec3d_0_1) + (r_570_res_third_0_1 * r_571_skew_vec3d_1_1)) + (r_570_res_third_0_2 * r_571_skew_vec3d_2_1));
  double r_572_res_fourth_0_2 = (((r_570_res_third_0_0 * r_571_skew_vec3d_0_2) + (r_570_res_third_0_1 * r_571_skew_vec3d_1_2)) + (r_570_res_third_0_2 * r_571_skew_vec3d_2_2));
  double r_572_res_fourth_1_0 = (((r_570_res_third_1_0 * r_571_skew_vec3d_0_0) + (r_570_res_third_1_1 * r_571_skew_vec3d_1_0)) + (r_570_res_third_1_2 * r_571_skew_vec3d_2_0));
  double r_572_res_fourth_1_1 = (((r_570_res_third_1_0 * r_571_skew_vec3d_0_1) + (r_570_res_third_1_1 * r_571_skew_vec3d_1_1)) + (r_570_res_third_1_2 * r_571_skew_vec3d_2_1));
  double r_572_res_fourth_1_2 = (((r_570_res_third_1_0 * r_571_skew_vec3d_0_2) + (r_570_res_third_1_1 * r_571_skew_vec3d_1_2)) + (r_570_res_third_1_2 * r_571_skew_vec3d_2_2));
  double r_572_res_fourth_2_0 = (((r_570_res_third_2_0 * r_571_skew_vec3d_0_0) + (r_570_res_third_2_1 * r_571_skew_vec3d_1_0)) + (r_570_res_third_2_2 * r_571_skew_vec3d_2_0));
  double r_572_res_fourth_2_1 = (((r_570_res_third_2_0 * r_571_skew_vec3d_0_1) + (r_570_res_third_2_1 * r_571_skew_vec3d_1_1)) + (r_570_res_third_2_2 * r_571_skew_vec3d_2_1));
  double r_572_res_fourth_2_2 = (((r_570_res_third_2_0 * r_571_skew_vec3d_0_2) + (r_570_res_third_2_1 * r_571_skew_vec3d_1_2)) + (r_570_res_third_2_2 * r_571_skew_vec3d_2_2));
  double r_573_res_fifth_0_0 = (r_568_res_second_0_0 - r_572_res_fourth_0_0);
  double r_573_res_fifth_0_1 = (r_568_res_second_0_1 - r_572_res_fourth_0_1);
  double r_573_res_fifth_0_2 = (r_568_res_second_0_2 - r_572_res_fourth_0_2);
  double r_573_res_fifth_1_0 = (r_568_res_second_1_0 - r_572_res_fourth_1_0);
  double r_573_res_fifth_1_1 = (r_568_res_second_1_1 - r_572_res_fourth_1_1);
  double r_573_res_fifth_1_2 = (r_568_res_second_1_2 - r_572_res_fourth_1_2);
  double r_573_res_fifth_2_0 = (r_568_res_second_2_0 - r_572_res_fourth_2_0);
  double r_573_res_fifth_2_1 = (r_568_res_second_2_1 - r_572_res_fourth_2_1);
  double r_573_res_fifth_2_2 = (r_568_res_second_2_2 - r_572_res_fourth_2_2);
  double r_574_res_third_first_col_0 = r_570_res_third_0_0;
  double r_574_res_third_first_col_1 = r_570_res_third_1_0;
  double r_574_res_third_first_col_2 = r_570_res_third_2_0;
  double r_575_res_third_second_col_0 = r_570_res_third_0_1;
  double r_575_res_third_second_col_1 = r_570_res_third_1_1;
  double r_575_res_third_second_col_2 = r_570_res_third_2_1;
  double r_576_res_third_third_col_0 = r_570_res_third_0_2;
  double r_576_res_third_third_col_1 = r_570_res_third_1_2;
  double r_576_res_third_third_col_2 = r_570_res_third_2_2;
  double r_577_res_sixth_first_col_0 = ((ov_angular_5_1 * r_574_res_third_first_col_2) - (ov_angular_5_2 * r_574_res_third_first_col_1));
  double r_577_res_sixth_first_col_1 = ((ov_angular_5_2 * r_574_res_third_first_col_0) - (ov_angular_5_0 * r_574_res_third_first_col_2));
  double r_577_res_sixth_first_col_2 = ((ov_angular_5_0 * r_574_res_third_first_col_1) - (ov_angular_5_1 * r_574_res_third_first_col_0));
  double r_578_res_sixth_second_col_0 = ((ov_angular_5_1 * r_575_res_third_second_col_2) - (ov_angular_5_2 * r_575_res_third_second_col_1));
  double r_578_res_sixth_second_col_1 = ((ov_angular_5_2 * r_575_res_third_second_col_0) - (ov_angular_5_0 * r_575_res_third_second_col_2));
  double r_578_res_sixth_second_col_2 = ((ov_angular_5_0 * r_575_res_third_second_col_1) - (ov_angular_5_1 * r_575_res_third_second_col_0));
  double r_579_res_sixth_third_col_0 = ((ov_angular_5_1 * r_576_res_third_third_col_2) - (ov_angular_5_2 * r_576_res_third_third_col_1));
  double r_579_res_sixth_third_col_1 = ((ov_angular_5_2 * r_576_res_third_third_col_0) - (ov_angular_5_0 * r_576_res_third_third_col_2));
  double r_579_res_sixth_third_col_2 = ((ov_angular_5_0 * r_576_res_third_third_col_1) - (ov_angular_5_1 * r_576_res_third_third_col_0));
  double r_580_res_sixth_0_0 = (r_573_res_fifth_0_0 + r_577_res_sixth_first_col_0);
  double r_580_res_sixth_0_1 = (r_573_res_fifth_0_1 + r_578_res_sixth_second_col_0);
  double r_580_res_sixth_0_2 = (r_573_res_fifth_0_2 + r_579_res_sixth_third_col_0);
  double r_580_res_sixth_1_0 = (r_573_res_fifth_1_0 + r_577_res_sixth_first_col_1);
  double r_580_res_sixth_1_1 = (r_573_res_fifth_1_1 + r_578_res_sixth_second_col_1);
  double r_580_res_sixth_1_2 = (r_573_res_fifth_1_2 + r_579_res_sixth_third_col_1);
  double r_580_res_sixth_2_0 = (r_573_res_fifth_2_0 + r_577_res_sixth_first_col_2);
  double r_580_res_sixth_2_1 = (r_573_res_fifth_2_1 + r_578_res_sixth_second_col_2);
  double r_580_res_sixth_2_2 = (r_573_res_fifth_2_2 + r_579_res_sixth_third_col_2);
  double inertia_variation_5_0_0 = 0;
  double inertia_variation_5_0_1 = 0;
  double inertia_variation_5_0_2 = 0;
  double inertia_variation_5_0_3 = r_560_res_first_0_0;
  double inertia_variation_5_0_4 = r_560_res_first_0_1;
  double inertia_variation_5_0_5 = r_560_res_first_0_2;
  double inertia_variation_5_1_0 = 0;
  double inertia_variation_5_1_1 = 0;
  double inertia_variation_5_1_2 = 0;
  double inertia_variation_5_1_3 = r_560_res_first_1_0;
  double inertia_variation_5_1_4 = r_560_res_first_1_1;
  double inertia_variation_5_1_5 = r_560_res_first_1_2;
  double inertia_variation_5_2_0 = 0;
  double inertia_variation_5_2_1 = 0;
  double inertia_variation_5_2_2 = 0;
  double inertia_variation_5_2_3 = r_560_res_first_2_0;
  double inertia_variation_5_2_4 = r_560_res_first_2_1;
  double inertia_variation_5_2_5 = r_560_res_first_2_2;
  double inertia_variation_5_3_0 = r_560_res_first_0_0;
  double inertia_variation_5_3_1 = r_560_res_first_1_0;
  double inertia_variation_5_3_2 = r_560_res_first_2_0;
  double inertia_variation_5_3_3 = r_580_res_sixth_0_0;
  double inertia_variation_5_3_4 = r_580_res_sixth_0_1;
  double inertia_variation_5_3_5 = r_580_res_sixth_0_2;
  double inertia_variation_5_4_0 = r_560_res_first_0_1;
  double inertia_variation_5_4_1 = r_560_res_first_1_1;
  double inertia_variation_5_4_2 = r_560_res_first_2_1;
  double inertia_variation_5_4_3 = r_580_res_sixth_1_0;
  double inertia_variation_5_4_4 = r_580_res_sixth_1_1;
  double inertia_variation_5_4_5 = r_580_res_sixth_1_2;
  double inertia_variation_5_5_0 = r_560_res_first_0_2;
  double inertia_variation_5_5_1 = r_560_res_first_1_2;
  double inertia_variation_5_5_2 = r_560_res_first_2_2;
  double inertia_variation_5_5_3 = r_580_res_sixth_2_0;
  double inertia_variation_5_5_4 = r_580_res_sixth_2_1;
  double inertia_variation_5_5_5 = r_580_res_sixth_2_2;
  double r_581_add_force_cross_linear_angular_0_0 = inertia_variation_5_0_3;
  double r_581_add_force_cross_linear_angular_0_1 = inertia_variation_5_0_4;
  double r_581_add_force_cross_linear_angular_0_2 = inertia_variation_5_0_5;
  double r_581_add_force_cross_linear_angular_1_0 = inertia_variation_5_1_3;
  double r_581_add_force_cross_linear_angular_1_1 = inertia_variation_5_1_4;
  double r_581_add_force_cross_linear_angular_1_2 = inertia_variation_5_1_5;
  double r_581_add_force_cross_linear_angular_2_0 = inertia_variation_5_2_3;
  double r_581_add_force_cross_linear_angular_2_1 = inertia_variation_5_2_4;
  double r_581_add_force_cross_linear_angular_2_2 = inertia_variation_5_2_5;
  double r_582_add_force_cross_angular_linear_0_0 = inertia_variation_5_3_0;
  double r_582_add_force_cross_angular_linear_0_1 = inertia_variation_5_3_1;
  double r_582_add_force_cross_angular_linear_0_2 = inertia_variation_5_3_2;
  double r_582_add_force_cross_angular_linear_1_0 = inertia_variation_5_4_0;
  double r_582_add_force_cross_angular_linear_1_1 = inertia_variation_5_4_1;
  double r_582_add_force_cross_angular_linear_1_2 = inertia_variation_5_4_2;
  double r_582_add_force_cross_angular_linear_2_0 = inertia_variation_5_5_0;
  double r_582_add_force_cross_angular_linear_2_1 = inertia_variation_5_5_1;
  double r_582_add_force_cross_angular_linear_2_2 = inertia_variation_5_5_2;
  double r_583_add_force_cross_angular_angular_0_0 = inertia_variation_5_3_3;
  double r_583_add_force_cross_angular_angular_0_1 = inertia_variation_5_3_4;
  double r_583_add_force_cross_angular_angular_0_2 = inertia_variation_5_3_5;
  double r_583_add_force_cross_angular_angular_1_0 = inertia_variation_5_4_3;
  double r_583_add_force_cross_angular_angular_1_1 = inertia_variation_5_4_4;
  double r_583_add_force_cross_angular_angular_1_2 = inertia_variation_5_4_5;
  double r_583_add_force_cross_angular_angular_2_0 = inertia_variation_5_5_3;
  double r_583_add_force_cross_angular_angular_2_1 = inertia_variation_5_5_4;
  double r_583_add_force_cross_angular_angular_2_2 = inertia_variation_5_5_5;
  double r_584_minus_f_linear_0 = -(data_oh_linear_5_0);
  double r_584_minus_f_linear_1 = -(data_oh_linear_5_1);
  double r_584_minus_f_linear_2 = -(data_oh_linear_5_2);
  double r_585_minus_f_angular_0 = -(data_oh_angular_5_0);
  double r_585_minus_f_angular_1 = -(data_oh_angular_5_1);
  double r_585_minus_f_angular_2 = -(data_oh_angular_5_2);
  double r_586_add_skew_0_0 = r_581_add_force_cross_linear_angular_0_0;
  double r_586_add_skew_0_1 = (r_581_add_force_cross_linear_angular_0_1 - r_584_minus_f_linear_2);
  double r_586_add_skew_0_2 = (r_581_add_force_cross_linear_angular_0_2 + r_584_minus_f_linear_1);
  double r_586_add_skew_1_0 = (r_581_add_force_cross_linear_angular_1_0 + r_584_minus_f_linear_2);
  double r_586_add_skew_1_1 = r_581_add_force_cross_linear_angular_1_1;
  double r_586_add_skew_1_2 = (r_581_add_force_cross_linear_angular_1_2 - r_584_minus_f_linear_0);
  double r_586_add_skew_2_0 = (r_581_add_force_cross_linear_angular_2_0 - r_584_minus_f_linear_1);
  double r_586_add_skew_2_1 = (r_581_add_force_cross_linear_angular_2_1 + r_584_minus_f_linear_0);
  double r_586_add_skew_2_2 = r_581_add_force_cross_linear_angular_2_2;
  double r_587_res_linear_angular_0_0 = r_586_add_skew_0_0;
  double r_587_res_linear_angular_0_1 = r_586_add_skew_0_1;
  double r_587_res_linear_angular_0_2 = r_586_add_skew_0_2;
  double r_587_res_linear_angular_1_0 = r_586_add_skew_1_0;
  double r_587_res_linear_angular_1_1 = r_586_add_skew_1_1;
  double r_587_res_linear_angular_1_2 = r_586_add_skew_1_2;
  double r_587_res_linear_angular_2_0 = r_586_add_skew_2_0;
  double r_587_res_linear_angular_2_1 = r_586_add_skew_2_1;
  double r_587_res_linear_angular_2_2 = r_586_add_skew_2_2;
  double r_588_add_skew_0_0 = r_582_add_force_cross_angular_linear_0_0;
  double r_588_add_skew_0_1 = (r_582_add_force_cross_angular_linear_0_1 - r_584_minus_f_linear_2);
  double r_588_add_skew_0_2 = (r_582_add_force_cross_angular_linear_0_2 + r_584_minus_f_linear_1);
  double r_588_add_skew_1_0 = (r_582_add_force_cross_angular_linear_1_0 + r_584_minus_f_linear_2);
  double r_588_add_skew_1_1 = r_582_add_force_cross_angular_linear_1_1;
  double r_588_add_skew_1_2 = (r_582_add_force_cross_angular_linear_1_2 - r_584_minus_f_linear_0);
  double r_588_add_skew_2_0 = (r_582_add_force_cross_angular_linear_2_0 - r_584_minus_f_linear_1);
  double r_588_add_skew_2_1 = (r_582_add_force_cross_angular_linear_2_1 + r_584_minus_f_linear_0);
  double r_588_add_skew_2_2 = r_582_add_force_cross_angular_linear_2_2;
  double r_589_res_angular_linear_0_0 = r_588_add_skew_0_0;
  double r_589_res_angular_linear_0_1 = r_588_add_skew_0_1;
  double r_589_res_angular_linear_0_2 = r_588_add_skew_0_2;
  double r_589_res_angular_linear_1_0 = r_588_add_skew_1_0;
  double r_589_res_angular_linear_1_1 = r_588_add_skew_1_1;
  double r_589_res_angular_linear_1_2 = r_588_add_skew_1_2;
  double r_589_res_angular_linear_2_0 = r_588_add_skew_2_0;
  double r_589_res_angular_linear_2_1 = r_588_add_skew_2_1;
  double r_589_res_angular_linear_2_2 = r_588_add_skew_2_2;
  double r_590_add_skew_0_0 = r_583_add_force_cross_angular_angular_0_0;
  double r_590_add_skew_0_1 = (r_583_add_force_cross_angular_angular_0_1 - r_585_minus_f_angular_2);
  double r_590_add_skew_0_2 = (r_583_add_force_cross_angular_angular_0_2 + r_585_minus_f_angular_1);
  double r_590_add_skew_1_0 = (r_583_add_force_cross_angular_angular_1_0 + r_585_minus_f_angular_2);
  double r_590_add_skew_1_1 = r_583_add_force_cross_angular_angular_1_1;
  double r_590_add_skew_1_2 = (r_583_add_force_cross_angular_angular_1_2 - r_585_minus_f_angular_0);
  double r_590_add_skew_2_0 = (r_583_add_force_cross_angular_angular_2_0 - r_585_minus_f_angular_1);
  double r_590_add_skew_2_1 = (r_583_add_force_cross_angular_angular_2_1 + r_585_minus_f_angular_0);
  double r_590_add_skew_2_2 = r_583_add_force_cross_angular_angular_2_2;
  double r_591_res_angular_angular_0_0 = r_590_add_skew_0_0;
  double r_591_res_angular_angular_0_1 = r_590_add_skew_0_1;
  double r_591_res_angular_angular_0_2 = r_590_add_skew_0_2;
  double r_591_res_angular_angular_1_0 = r_590_add_skew_1_0;
  double r_591_res_angular_angular_1_1 = r_590_add_skew_1_1;
  double r_591_res_angular_angular_1_2 = r_590_add_skew_1_2;
  double r_591_res_angular_angular_2_0 = r_590_add_skew_2_0;
  double r_591_res_angular_angular_2_1 = r_590_add_skew_2_1;
  double r_591_res_angular_angular_2_2 = r_590_add_skew_2_2;
  double add_force_cross_matrix_5_0_0 = inertia_variation_5_0_0;
  double add_force_cross_matrix_5_0_1 = inertia_variation_5_0_1;
  double add_force_cross_matrix_5_0_2 = inertia_variation_5_0_2;
  double add_force_cross_matrix_5_0_3 = r_587_res_linear_angular_0_0;
  double add_force_cross_matrix_5_0_4 = r_587_res_linear_angular_0_1;
  double add_force_cross_matrix_5_0_5 = r_587_res_linear_angular_0_2;
  double add_force_cross_matrix_5_1_0 = inertia_variation_5_1_0;
  double add_force_cross_matrix_5_1_1 = inertia_variation_5_1_1;
  double add_force_cross_matrix_5_1_2 = inertia_variation_5_1_2;
  double add_force_cross_matrix_5_1_3 = r_587_res_linear_angular_1_0;
  double add_force_cross_matrix_5_1_4 = r_587_res_linear_angular_1_1;
  double add_force_cross_matrix_5_1_5 = r_587_res_linear_angular_1_2;
  double add_force_cross_matrix_5_2_0 = inertia_variation_5_2_0;
  double add_force_cross_matrix_5_2_1 = inertia_variation_5_2_1;
  double add_force_cross_matrix_5_2_2 = inertia_variation_5_2_2;
  double add_force_cross_matrix_5_2_3 = r_587_res_linear_angular_2_0;
  double add_force_cross_matrix_5_2_4 = r_587_res_linear_angular_2_1;
  double add_force_cross_matrix_5_2_5 = r_587_res_linear_angular_2_2;
  double add_force_cross_matrix_5_3_0 = r_589_res_angular_linear_0_0;
  double add_force_cross_matrix_5_3_1 = r_589_res_angular_linear_0_1;
  double add_force_cross_matrix_5_3_2 = r_589_res_angular_linear_0_2;
  double add_force_cross_matrix_5_3_3 = r_591_res_angular_angular_0_0;
  double add_force_cross_matrix_5_3_4 = r_591_res_angular_angular_0_1;
  double add_force_cross_matrix_5_3_5 = r_591_res_angular_angular_0_2;
  double add_force_cross_matrix_5_4_0 = r_589_res_angular_linear_1_0;
  double add_force_cross_matrix_5_4_1 = r_589_res_angular_linear_1_1;
  double add_force_cross_matrix_5_4_2 = r_589_res_angular_linear_1_2;
  double add_force_cross_matrix_5_4_3 = r_591_res_angular_angular_1_0;
  double add_force_cross_matrix_5_4_4 = r_591_res_angular_angular_1_1;
  double add_force_cross_matrix_5_4_5 = r_591_res_angular_angular_1_2;
  double add_force_cross_matrix_5_5_0 = r_589_res_angular_linear_2_0;
  double add_force_cross_matrix_5_5_1 = r_589_res_angular_linear_2_1;
  double add_force_cross_matrix_5_5_2 = r_589_res_angular_linear_2_2;
  double add_force_cross_matrix_5_5_3 = r_591_res_angular_angular_2_0;
  double add_force_cross_matrix_5_5_4 = r_591_res_angular_angular_2_1;
  double add_force_cross_matrix_5_5_5 = r_591_res_angular_angular_2_2;


    std::cout << "limi_rotation_ joint 0: " << std::endl;
    std::cout << limi_rotation_0_0_0 << " " << limi_rotation_0_0_1 << " " << limi_rotation_0_0_2 << std::endl;
    std::cout << limi_rotation_0_1_0 << " " << limi_rotation_0_1_1 << " " << limi_rotation_0_1_2 << std::endl;
    std::cout << limi_rotation_0_2_0 << " " << limi_rotation_0_2_1 << " " << limi_rotation_0_2_2 << std::endl;

    std::cout << "limi_rotation_ joint 1: " << std::endl;
    std::cout << limi_rotation_1_0_0 << " " << limi_rotation_1_0_1 << " " << limi_rotation_1_0_2 << std::endl;
    std::cout << limi_rotation_1_1_0 << " " << limi_rotation_1_1_1 << " " << limi_rotation_1_1_2 << std::endl;
    std::cout << limi_rotation_1_2_0 << " " << limi_rotation_1_2_1 << " " << limi_rotation_1_2_2 << std::endl;

    std::cout << "limi_rotation_ joint 2: " << std::endl;
    std::cout << limi_rotation_2_0_0 << " " << limi_rotation_2_0_1 << " " << limi_rotation_2_0_2 << std::endl;
    std::cout << limi_rotation_2_1_0 << " " << limi_rotation_2_1_1 << " " << limi_rotation_2_1_2 << std::endl;
    std::cout << limi_rotation_2_2_0 << " " << limi_rotation_2_2_1 << " " << limi_rotation_2_2_2 << std::endl;

    std::cout << "limi_rotation_ joint 3: " << std::endl;
    std::cout << limi_rotation_3_0_0 << " " << limi_rotation_3_0_1 << " " << limi_rotation_3_0_2 << std::endl;
    std::cout << limi_rotation_3_1_0 << " " << limi_rotation_3_1_1 << " " << limi_rotation_3_1_2 << std::endl;
    std::cout << limi_rotation_3_2_0 << " " << limi_rotation_3_2_1 << " " << limi_rotation_3_2_2 << std::endl;

    std::cout << "limi_rotation_ joint 4: " << std::endl;
    std::cout << limi_rotation_4_0_0 << " " << limi_rotation_4_0_1 << " " << limi_rotation_4_0_2 << std::endl;
    std::cout << limi_rotation_4_1_0 << " " << limi_rotation_4_1_1 << " " << limi_rotation_4_1_2 << std::endl;
    std::cout << limi_rotation_4_2_0 << " " << limi_rotation_4_2_1 << " " << limi_rotation_4_2_2 << std::endl;

    std::cout << "limi_rotation_ joint 5: " << std::endl;
    std::cout << limi_rotation_5_0_0 << " " << limi_rotation_5_0_1 << " " << limi_rotation_5_0_2 << std::endl;
    std::cout << limi_rotation_5_1_0 << " " << limi_rotation_5_1_1 << " " << limi_rotation_5_1_2 << std::endl;
    std::cout << limi_rotation_5_2_0 << " " << limi_rotation_5_2_1 << " " << limi_rotation_5_2_2 << std::endl;

    std::cout << "v_start: " << std::endl;
    std::cout << v_linear_0_0 << " " << v_linear_0_1 << " " << v_linear_0_2 << std::endl;
    std::cout << v_angular_0_0 << " " << v_angular_0_1 << " " << v_angular_0_2 << std::endl;

    std::cout << "v_sec_parent_linear: " << std::endl;
    std::cout << parent_v_linear_1_0 << " " << parent_v_linear_1_1 << " " << parent_v_linear_1_2 << std::endl;
    std::cout << parent_v_angular_1_0 << " " << parent_v_angular_1_1 << " " << parent_v_angular_1_2 << std::endl;

    std::cout << "v_sec_joint: " << std::endl;
    std::cout << act_inv_linear_1_0 << " " << act_inv_linear_1_1 << " " << act_inv_linear_1_2 << std::endl;
    std::cout << act_inv_angular_1_0 << " " << act_inv_angular_1_1 << " " << act_inv_angular_1_2 << std::endl;

    std::cout << "rotate_bottom_r: " << std::endl;
    std::cout << rotate_bottom_r_0_0 << " " << rotate_bottom_r_0_1 << " " << rotate_bottom_r_0_2 << std::endl;
    std::cout << rotate_bottom_r_1_0 << " " << rotate_bottom_r_1_1 << " " << rotate_bottom_r_1_2 << std::endl;

    std::cout << "rotate_y_0_0: " << std::endl;
    std::cout << rotate_y_0_0 << " " << rotate_y_0_1 << std::endl;
    std::cout << rotate_y_1_0 << " " << rotate_y_1_1 << std::endl;

    std::cout << "sres_first: " << std::endl;
    std::cout << sres_first_1 << std::endl;
    std::cout << sres_first_2 << std::endl;
    std::cout << sres_first_3 << std::endl;
    std::cout << sres_first_4 << std::endl;
    std::cout << sres_first_5 << std::endl;

    std::cout << "decompose_it_i: " << std::endl;
    std::cout << decompose_it_i_0_0 << " " << decompose_it_i_0_1 << std::endl;
    std::cout << decompose_it_i_1_0 << " " << decompose_it_i_1_1 << std::endl;
    std::cout << decompose_it_i_2_0 << " " << decompose_it_i_2_1 << std::endl;


    std::cout << "sres_update_0_tmp1: " << std::endl;
    std::cout << sres_update_0_tmp1 << std::endl;

    std::cout << "symmetric3_rotate: " << std::endl;
    std::cout << symmetric3_rotate_0_0 << " " << symmetric3_rotate_0_1 << " " << symmetric3_rotate_0_2 << std::endl;
    std::cout << symmetric3_rotate_1_0 << " " << symmetric3_rotate_1_1 << " " << symmetric3_rotate_1_2 << std::endl;
    std::cout << symmetric3_rotate_2_0 << " " << symmetric3_rotate_2_1 << " " << symmetric3_rotate_2_2 << std::endl;


    std::cout << "const_r_0: " << std::endl;
    std::cout << const_r_0 << std::endl;
    std::cout << const_r_1 << std::endl;
    std::cout << const_r_2 << std::endl;


    std::cout << "data_oinertias_trans_: " << std::endl;
    std::cout << data_oinertias_trans_0_0 << " " << data_oinertias_trans_0_1 << " " << data_oinertias_trans_0_2 << std::endl;

    std::cout << data_oinertias_trans_0_0 << " " << data_oinertias_trans_0_1 << " " << data_oinertias_trans_0_2 << std::endl;
    
    std::cout << "data_oinertias_rot_: " << std::endl;
    std::cout << data_oinertias_rot_0_0_0 << " " << data_oinertias_rot_0_0_1 << " " << data_oinertias_rot_0_0_2 << std::endl;
    std::cout << data_oinertias_rot_0_1_0 << " " << data_oinertias_rot_0_1_1 << " " << data_oinertias_rot_0_1_2 << std::endl;
    std::cout << data_oinertias_rot_0_2_0 << " " << data_oinertias_rot_0_2_1 << " " << data_oinertias_rot_0_2_2 << std::endl;

    // let's print v to make sure
    std::cout << "data.v[i] joint " << 1 << ": " << std::endl;
    std::cout << all_v_0_0 << " " << all_v_0_1 << " " <<  all_v_0_2 << " " << all_v_0_3 << " " << all_v_0_4 << " " << all_v_0_5 << std::endl;

    std::cout << "data.v[i] joint " << 2 << ": " << std::endl;
    std::cout << all_v_1_0 << " " << all_v_1_1 << " " <<  all_v_1_2 << " " << all_v_1_3 << " " << all_v_1_4 << " " << all_v_1_5 << std::endl;

    std::cout << "data.v[i] joint " << 3 << ": " << std::endl;
    std::cout << all_v_2_0 << " " << all_v_2_1 << " " <<  all_v_2_2 << " " << all_v_2_3 << " " << all_v_2_4 << " " << all_v_2_5 << std::endl;

    std::cout << "data.v[i] joint " << 4 << ": " << std::endl;
    std::cout << all_v_3_0 << " " << all_v_3_1 << " " <<  all_v_3_2 << " " << all_v_3_3 << " " << all_v_3_4 << " " << all_v_3_5 << std::endl;

    std::cout << "data.v[i] joint " << 5 << ": " << std::endl;
    std::cout << all_v_4_0 << " " << all_v_4_1 << " " <<  all_v_4_2 << " " << all_v_4_3 << " " << all_v_4_4 << " " << all_v_4_5 << std::endl;

    std::cout << "data.v[i] joint " << 6 << ": " << std::endl;
    std::cout << all_v_5_0 << " " << all_v_5_1 << " " <<  all_v_5_2 << " " << all_v_5_3 << " " << all_v_5_4 << " " << all_v_5_5 << std::endl;


    std::cout << "data.a[i] joint 1: " << std::endl;
    std::cout << new_data_a_0_0 << " " << new_data_a_0_1 << " " << new_data_a_0_2 << " " << new_data_a_0_3 << " " << new_data_a_0_4 << " " << new_data_a_0_5 << std::endl;

    std::cout << "data.a[i] joint 2: " << std::endl;
    std::cout << a_final_1_0 << " " << a_final_1_1 << " " << a_final_1_2 << " " << a_final_1_3 << " " << a_final_1_4 << " " << a_final_1_5 << std::endl;

    std::cout << "data.a[i] joint 3: " << std::endl;
    std::cout << a_final_2_0 << " " << a_final_2_1 << " " << a_final_2_2 << " " << a_final_2_3 << " " << a_final_2_4 << " " << a_final_2_5 << std::endl;

    std::cout << "data.a[i] joint 4: " << std::endl;
    std::cout << a_final_3_0 << " " << a_final_3_1 << " " << a_final_3_2 << " " << a_final_3_3 << " " << a_final_3_4 << " " << a_final_3_5 << std::endl;

    std::cout << "data.a[i] joint 5: " << std::endl;
    std::cout << a_final_4_0 << " " << a_final_4_1 << " " << a_final_4_2 << " " << a_final_4_3 << " " << a_final_4_4 << " " << a_final_4_5 << std::endl;

    std::cout << "data.a[i] joint 6: " << std::endl;
    std::cout << a_final_5_0 << " " << a_final_5_1 << " " << a_final_5_2 << " " << a_final_5_3 << " " << a_final_5_4 << " " << a_final_5_5 << std::endl;

    // r_9_oa_gf_0_0
    //std::cout << "r_7_oa_gf: " << std::endl;
    //std::cout << r_7_oa_gf_0_0 << " " << r_7_oa_gf_0_1 << " " << r_7_oa_gf_0_2 << std::endl;
    //std::cout << r_7_oa_gf_0_3 << " " << r_7_oa_gf_0_4 << " " << r_7_oa_gf_0_5 << std::endl;

    std::cout << "data_oh_linear_temp1_: " << std::endl;
    std::cout << data_oh_linear_temp1_0_0 << " " << data_oh_linear_temp1_0_1 << " " << data_oh_linear_temp1_0_2 << std::endl;

    std::cout << "data_oh_linear_temp2_: " << std::endl;
    std::cout << data_oh_linear_temp2_0_0 << " " << data_oh_linear_temp2_0_1 << " " << data_oh_linear_temp2_0_2 << std::endl;

    std::cout << "data_of_linear_temp4_: " << std::endl;
    std::cout << data_of_linear_temp4_0_0 << " " << data_of_linear_temp4_0_1 << " " << data_of_linear_temp4_0_2 << std::endl;

    std::cout << "data_of_angular_temp6_: " << std::endl;
    std::cout << data_of_angular_temp6_0_0 << " " << data_of_angular_temp6_0_1 << " " << data_of_angular_temp6_0_2 << std::endl;

    std::cout << "data_oycrb_trans_i_: " << std::endl;
    std::cout << new_translation_0 << " " << new_translation_1 << " " << new_translation_2 << std::endl;

    std::cout << "data_oycrb_rot_i_: " << std::endl;
    std::cout << data_oinertias_rot_0_0_0 << " " << data_oinertias_rot_0_0_1 << " " << data_oinertias_rot_0_0_2 << std::endl;
    std::cout << data_oinertias_rot_0_1_0 << " " << data_oinertias_rot_0_1_1 << " " << data_oinertias_rot_0_1_2 << std::endl;
    std::cout << data_oinertias_rot_0_2_0 << " " << data_oinertias_rot_0_2_1 << " " << data_oinertias_rot_0_2_2 << std::endl;

    std::cout << "data.oYcrb[i] * oa.gf: " << std::endl;
    std::cout << data_of_linear_temp3_0_0 << " " << data_of_linear_temp3_0_1 << " " << data_of_linear_temp3_0_2 << std::endl;
    std::cout << data_of_angular_temp3_0_0 << " " << data_of_angular_temp3_0_1 << " " << data_of_angular_temp3_0_2 << std::endl;

    std::cout << "data_oh_: " << std::endl;
    std::cout << data_oh_linear_0_0 << " " << data_oh_linear_0_1 << " " << data_oh_linear_0_2 << std::endl;
    std::cout << data_oh_angular_0_0 << " " << data_oh_angular_0_1 << " " << data_oh_angular_0_2 << std::endl;
  
    std::cout << "data_of_: " << std::endl;
    std::cout << data_of_linear_0_0 << " " << data_of_linear_0_1 << " " << data_of_linear_0_2 << std::endl;
    std::cout << data_of_angular_0_0 << " " << data_of_angular_0_1 << " " << data_of_angular_0_2 << std::endl;

    //motionSet::motionAction(ov,J_cols,dJ_cols);
    std::cout << "dJ_cols_linear: " << std::endl;
    std::cout << mout_linear_0_0 << " " << mout_linear_0_1 << " " << mout_linear_0_2 << std::endl;

    std::cout << "dJ_cols_angular: " << std::endl;
    std::cout << mout_angular_0_0 << " " << mout_angular_0_1 << " " << mout_angular_0_2 << std::endl;

    // motionSet::motionAction(data.oa_gf[parent],J_cols,dAdq_cols);
    // double r_35_mout_linear_0_0 = (r_33_mout_linear_cross_angular_0_0 + r_34_mout_angular_cross_linear_0_0);
    // double r_35_mout_linear_0_1 = (r_33_mout_linear_cross_angular_0_1 + r_34_mout_angular_cross_linear_0_1);
    // double r_35_mout_linear_0_2 = (r_33_mout_linear_cross_angular_0_2 + r_34_mout_angular_cross_linear_0_2);
    // double r_36_mout_angular_0_0 = ((oa_gf_parent_angular_0_1 * act_constraint_rotation_col_2) - (oa_gf_parent_angular_0_2 * act_constraint_rotation_col_1));
    // double r_36_mout_angular_0_1 = ((oa_gf_parent_angular_0_2 * act_constraint_rotation_col_0) - (oa_gf_parent_angular_0_0 * act_constraint_rotation_col_2));
    // double r_36_mout_angular_0_2 = ((oa_gf_parent_angular_0_0 * act_constraint_rotation_col_1) - (oa_gf_parent_angular_0_1 * act_constraint_rotation_col_0));
  
    //std::cout << "dAdq_cols_linear: " << std::endl;
    //std::cout << r_35_mout_linear_0_0 << " " << r_35_mout_linear_0_1 << " " << r_35_mout_linear_0_2 << std::endl;
//
    //std::cout << "dAdq_cols_angular: " << std::endl;
    //std::cout << r_36_mout_angular_0_0 << " " << r_36_mout_angular_0_1 << " " << r_36_mout_angular_0_2 << std::endl;

    std::cout << "skew_second_second_neg_: " << std::endl;
    std::cout << skew_second_second_neg_0_0 << " " << skew_second_second_neg_0_1 << " " << skew_second_second_neg_0_2 << std::endl;
    std::cout << skew_second_second_neg_1_0 << " " << skew_second_second_neg_1_1 << " " << skew_second_second_neg_1_2 << std::endl;
    std::cout << skew_second_second_neg_2_0 << " " << skew_second_second_neg_2_1 << " " << skew_second_second_neg_2_2 << std::endl;

    std::cout << "res_third: " << std::endl;
    std::cout << res_third_0_0 << " " << res_third_0_1 << " " << res_third_0_2 << std::endl;
    std::cout << res_third_1_0 << " " << res_third_1_1 << " " << res_third_1_2 << std::endl;
    std::cout << res_third_2_0 << " " << res_third_2_1 << " " << res_third_2_2 << std::endl;

    std::cout << "res_fourth: " << std::endl;
    std::cout << res_fourth_0_0 << " " << res_fourth_0_1 << " " << res_fourth_0_2 << std::endl;
    std::cout << res_fourth_1_0 << " " << res_fourth_1_1 << " " << res_fourth_1_2 << std::endl;
    std::cout << res_fourth_2_0 << " " << res_fourth_2_1 << " " << res_fourth_2_2 << std::endl;



    //std::cout << "v final? act_inv_linear_: " << std::endl;
    //ap_fixed<32,1> act_inv_linear_0_0 = (alpha_cross_linear_0_0 + actInv4_0_0);
    //ap_fixed<32,1> act_inv_linear_0_1 = (alpha_cross_linear_0_1 + actInv4_0_1);
    //ap_fixed<32,1> act_inv_linear_0_2 = (alpha_cross_linear_0_2 + actInv4_0_2);
    //ap_fixed<32,1> act_inv_angular_0_0 = (alpha_cross_angular_0_0 + actInv5_0_0);
    //ap_fixed<32,1> act_inv_angular_0_1 = (alpha_cross_angular_0_1 + actInv5_0_1);
    //ap_fixed<32,1> act_inv_angular_0_2 = (alpha_cross_angular_0_2 + actInv5_0_2);
    //std::cout << act_inv_linear_0_0 << " " << act_inv_linear_0_1 << " " << act_inv_linear_0_2 << std::endl;
    //std::cout << act_inv_angular_0_0 << " " << act_inv_angular_0_1 << " " << act_inv_angular_0_2 << std::endl;
    //float act_inv_linear_0_0 = ((float) act_inv_linear_0_0) / pow(2, 32 - 1);
    //float act_inv_linear_0_1 = ((float) act_inv_linear_0_1) / pow(2, 32 - 1);
    //float act_inv_linear_0_2 = ((float) act_inv_linear_0_2) / pow(2, 32 - 1);
    //float act_inv_angular_0_0 = ((float) act_inv_angular_0_0) / pow(2, 32 - 1);
    //float act_inv_angular_0_1 = ((float) act_inv_angular_0_1) / pow(2, 32 - 1);
    //float act_inv_angular_0_2 = ((float) act_inv_angular_0_2) / pow(2, 32 - 1);
    //std::cout << act_inv_linear_0_0 << " " << act_inv_linear_0_1 << " " << act_inv_linear_0_2 << std::endl;
    //std::cout << act_inv_angular_0_0 << " " << act_inv_angular_0_1 << " " << act_inv_angular_0_2 << std::endl;
  

    // oMi
    std::cout << "oMi 1st iter: " << std::endl;
    std::cout << oMi_rotation_1_0_0 << " " << oMi_rotation_1_0_1 << " " << oMi_rotation_1_0_2 << std::endl;
    std::cout << oMi_rotation_1_1_0 << " " << oMi_rotation_1_1_1 << " " << oMi_rotation_1_1_2 << std::endl;
    std::cout << oMi_rotation_1_2_0 << " " << oMi_rotation_1_2_1 << " " << oMi_rotation_1_2_2 << std::endl;
    std::cout << oMi_translation_1_0 << " " << oMi_translation_1_1 << " " << oMi_translation_1_2 << std::endl;

    std::cout << "oMi 2nd iter: " << std::endl;
    std::cout << oMi_rotation_2_0_0 << " " << oMi_rotation_2_0_1 << " " << oMi_rotation_2_0_2 << std::endl;
    std::cout << oMi_rotation_2_1_0 << " " << oMi_rotation_2_1_1 << " " << oMi_rotation_2_1_2 << std::endl;
    std::cout << oMi_rotation_2_2_0 << " " << oMi_rotation_2_2_1 << " " << oMi_rotation_2_2_2 << std::endl;
    std::cout << oMi_translation_2_0 << " " << oMi_translation_2_1 << " " << oMi_translation_2_2 << std::endl;

    std::cout << "oMi 3rd iter: " << std::endl;
    std::cout << oMi_rotation_3_0_0 << " " << oMi_rotation_3_0_1 << " " << oMi_rotation_3_0_2 << std::endl;
    std::cout << oMi_rotation_3_1_0 << " " << oMi_rotation_3_1_1 << " " << oMi_rotation_3_1_2 << std::endl;
    std::cout << oMi_rotation_3_2_0 << " " << oMi_rotation_3_2_1 << " " << oMi_rotation_3_2_2 << std::endl;
    std::cout << oMi_translation_3_0 << " " << oMi_translation_3_1 << " " << oMi_translation_3_2 << std::endl;

    std::cout << "oMi 4th iter: " << std::endl;
    std::cout << oMi_rotation_4_0_0 << " " << oMi_rotation_4_0_1 << " " << oMi_rotation_4_0_2 << std::endl;
    std::cout << oMi_rotation_4_1_0 << " " << oMi_rotation_4_1_1 << " " << oMi_rotation_4_1_2 << std::endl;
    std::cout << oMi_rotation_4_2_0 << " " << oMi_rotation_4_2_1 << " " << oMi_rotation_4_2_2 << std::endl;
    std::cout << oMi_translation_4_0 << " " << oMi_translation_4_1 << " " << oMi_translation_4_2 << std::endl;

    std::cout << "oMi 5th iter: " << std::endl;
    std::cout << oMi_rotation_5_0_0 << " " << oMi_rotation_5_0_1 << " " << oMi_rotation_5_0_2 << std::endl;
    std::cout << oMi_rotation_5_1_0 << " " << oMi_rotation_5_1_1 << " " << oMi_rotation_5_1_2 << std::endl;
    std::cout << oMi_rotation_5_2_0 << " " << oMi_rotation_5_2_1 << " " << oMi_rotation_5_2_2 << std::endl;
    std::cout << oMi_translation_5_0 << " " << oMi_translation_5_1 << " " << oMi_translation_5_2 << std::endl;


    // ov_
    std::cout << "ov_ 1st iter: " << std::endl;
    std::cout << ov_0_0 << " " << ov_0_1 << " " << ov_0_2 << " " << ov_0_3 << " " << ov_0_4 << " " << ov_0_5 << std::endl;

    std::cout << "ov_ 2nd iter: " << std::endl;
    std::cout << ov_1_0 << " " << ov_1_1 << " " << ov_1_2 << " " << ov_1_3 << " " << ov_1_4 << " " << ov_1_5 << std::endl;

    std::cout << "ov_ 3rd iter: " << std::endl;
    std::cout << ov_2_0 << " " << ov_2_1 << " " << ov_2_2 << " " << ov_2_3 << " " << ov_2_4 << " " << ov_2_5 << std::endl;

    std::cout << "ov_ 4th iter: " << std::endl;
    std::cout << ov_3_0 << " " << ov_3_1 << " " << ov_3_2 << " " << ov_3_3 << " " << ov_3_4 << " " << ov_3_5 << std::endl;

    std::cout << "ov_ 5th iter: " << std::endl;
    std::cout << ov_4_0 << " " << ov_4_1 << " " << ov_4_2 << " " << ov_4_3 << " " << ov_4_4 << " " << ov_4_5 << std::endl;

    std::cout << "ov_ 6th iter: " << std::endl;
    std::cout << ov_5_0 << " " << ov_5_1 << " " << ov_5_2 << " " << ov_5_3 << " " << ov_5_4 << " " << ov_5_5 << std::endl;

    std::cout << "oa_ 1st iter: " << std::endl;
    std::cout << oa_0_0 << " " << oa_0_1 << " " << oa_0_2 << " " << oa_0_3 << " " << oa_0_4 << " " << oa_0_5 << std::endl;

    std::cout << "oa_ 2nd iter: " << std::endl;
    std::cout << oa_1_0 << " " << oa_1_1 << " " << oa_1_2 << " " << oa_1_3 << " " << oa_1_4 << " " << oa_1_5 << std::endl;

    std::cout << "oa_ 3rd iter: " << std::endl;
    std::cout << oa_2_0 << " " << oa_2_1 << " " << oa_2_2 << " " << oa_2_3 << " " << oa_2_4 << " " << oa_2_5 << std::endl;

    std::cout << "oa_ 4th iter: " << std::endl;
    std::cout << oa_3_0 << " " << oa_3_1 << " " << oa_3_2 << " " << oa_3_3 << " " << oa_3_4 << " " << oa_3_5 << std::endl;

    std::cout << "oa_ 5th iter: " << std::endl;
    std::cout << oa_4_0 << " " << oa_4_1 << " " << oa_4_2 << " " << oa_4_3 << " " << oa_4_4 << " " << oa_4_5 << std::endl;

    std::cout << "oa_ 6th iter: " << std::endl;
    std::cout << oa_5_0 << " " << oa_5_1 << " " << oa_5_2 << " " << oa_5_3 << " " << oa_5_4 << " " << oa_5_5 << std::endl;

    std::cout << "oa_gf_ 1st iter: " << std::endl;
    std::cout << oa_gf_0_0 << " " << oa_gf_0_1 << " " << oa_gf_0_2 << " " << oa_gf_0_3 << " " << oa_gf_0_4 << " " << oa_gf_0_5 << std::endl;

    std::cout << "oa_gf_ 2nd iter: " << std::endl;
    std::cout << oa_gf_1_0 << " " << oa_gf_1_1 << " " << oa_gf_1_2 << " " << oa_gf_1_3 << " " << oa_gf_1_4 << " " << oa_gf_1_5 << std::endl;

    std::cout << "oa_gf_ 3rd iter: " << std::endl;
    std::cout << oa_gf_2_0 << " " << oa_gf_2_1 << " " << oa_gf_2_2 << " " << oa_gf_2_3 << " " << oa_gf_2_4 << " " << oa_gf_2_5 << std::endl;

    std::cout << "oa_gf_ 4th iter: " << std::endl;
    std::cout << oa_gf_3_0 << " " << oa_gf_3_1 << " " << oa_gf_3_2 << " " << oa_gf_3_3 << " " << oa_gf_3_4 << " " << oa_gf_3_5 << std::endl;

    std::cout << "oa_gf_ 5th iter: " << std::endl;
    std::cout << oa_gf_4_0 << " " << oa_gf_4_1 << " " << oa_gf_4_2 << " " << oa_gf_4_3 << " " << oa_gf_4_4 << " " << oa_gf_4_5 << std::endl;

    std::cout << "oa_gf_ 6th iter: " << std::endl;
    std::cout << oa_gf_5_0 << " " << oa_gf_5_1 << " " << oa_gf_5_2 << " " << oa_gf_5_3 << " " << oa_gf_5_4 << " " << oa_gf_5_5 << std::endl;

    std::cout << "oh_ 1st iter: " << std::endl;
    std::cout << all_oh_0_0 << " " << all_oh_0_1 << " " << all_oh_0_2 << " " << all_oh_0_3 << " " << all_oh_0_4 << " " << all_oh_0_5 << std::endl;

    std::cout << "oh_ 2nd iter: " << std::endl;
    std::cout << all_oh_1_0 << " " << all_oh_1_1 << " " << all_oh_1_2 << " " << all_oh_1_3 << " " << all_oh_1_4 << " " << all_oh_1_5 << std::endl;

    std::cout << "oh_ 3rd iter: " << std::endl;
    std::cout << all_oh_2_0 << " " << all_oh_2_1 << " " << all_oh_2_2 << " " << all_oh_2_3 << " " << all_oh_2_4 << " " << all_oh_2_5 << std::endl;

    std::cout << "oh_ 4th iter: " << std::endl;
    std::cout << all_oh_3_0 << " " << all_oh_3_1 << " " << all_oh_3_2 << " " << all_oh_3_3 << " " << all_oh_3_4 << " " << all_oh_3_5 << std::endl;

    std::cout << "oh_ 5th iter: " << std::endl;
    std::cout << all_oh_4_0 << " " << all_oh_4_1 << " " << all_oh_4_2 << " " << all_oh_4_3 << " " << all_oh_4_4 << " " << all_oh_4_5 << std::endl;

    std::cout << "oh_ 6th iter: " << std::endl;
    std::cout << all_oh_5_0 << " " << all_oh_5_1 << " " << all_oh_5_2 << " " << all_oh_5_3 << " " << all_oh_5_4 << " " << all_oh_5_5 << std::endl;

    std::cout << "of_ 1st iter: " << std::endl;
    std::cout << all_of_0_0 << " " << all_of_0_1 << " " << all_of_0_2 << " " << all_of_0_3 << " " << all_of_0_4 << " " << all_of_0_5 << std::endl;

    std::cout << "of_ 2nd iter: " << std::endl;
    std::cout << all_of_1_0 << " " << all_of_1_1 << " " << all_of_1_2 << " " << all_of_1_3 << " " << all_of_1_4 << " " << all_of_1_5 << std::endl;

    std::cout << "of_ 3rd iter: " << std::endl;
    std::cout << all_of_2_0 << " " << all_of_2_1 << " " << all_of_2_2 << " " << all_of_2_3 << " " << all_of_2_4 << " " << all_of_2_5 << std::endl;

    std::cout << "of_ 4th iter: " << std::endl;
    std::cout << all_of_3_0 << " " << all_of_3_1 << " " << all_of_3_2 << " " << all_of_3_3 << " " << all_of_3_4 << " " << all_of_3_5 << std::endl;

    std::cout << "of_ 5th iter: " << std::endl;
    std::cout << all_of_4_0 << " " << all_of_4_1 << " " << all_of_4_2 << " " << all_of_4_3 << " " << all_of_4_4 << " " << all_of_4_5 << std::endl;

    std::cout << "of_ 6th iter: " << std::endl;
    std::cout << all_of_5_0 << " " << all_of_5_1 << " " << all_of_5_2 << " " << all_of_5_3 << " " << all_of_5_4 << " " << all_of_5_5 << std::endl;


    // data_oinertias_trans_
    std::cout << "data_oinertias_trans_ first iter: " << std::endl;
    std::cout << data_oinertias_trans_0_0 << " " << data_oinertias_trans_0_1 << " " << data_oinertias_trans_0_2 << " " << std::endl;

    std::cout << "data_oinertias_rot_ first iter: " << std::endl;
    std::cout << data_oinertias_rot_0_0_0 << " " << data_oinertias_rot_0_0_1 << " " << data_oinertias_rot_0_0_2 << " " << std::endl;
    std::cout << data_oinertias_rot_0_1_0 << " " << data_oinertias_rot_0_1_1 << " " << data_oinertias_rot_0_1_2 << " " << std::endl;
    std::cout << data_oinertias_rot_0_2_0 << " " << data_oinertias_rot_0_2_1 << " " << data_oinertias_rot_0_2_2 << " " << std::endl;

    std::cout << "data_oinertias_trans 2nd iter: " << std::endl;
    std::cout << data_oinertias_trans_1_0 << " " << data_oinertias_trans_1_1 << " " << data_oinertias_trans_1_2 << " " << std::endl;

    std::cout << "data_oinertias_rot 2nd iter: " << std::endl;
    std::cout << data_oinertias_rot_1_0_0 << " " << data_oinertias_rot_1_0_1 << " " << data_oinertias_rot_1_0_2 << " " << std::endl;
    std::cout << data_oinertias_rot_1_1_0 << " " << data_oinertias_rot_1_1_1 << " " << data_oinertias_rot_1_1_2 << " " << std::endl;
    std::cout << data_oinertias_rot_1_2_0 << " " << data_oinertias_rot_1_2_1 << " " << data_oinertias_rot_1_2_2 << " " << std::endl;

    std::cout << "data_oinertias_rot 3rd iter: " << std::endl;
    std::cout << data_oinertias_rot_2_0_0 << " " << data_oinertias_rot_2_0_1 << " " << data_oinertias_rot_2_0_2 << " " << std::endl;
    std::cout << data_oinertias_rot_2_1_0 << " " << data_oinertias_rot_2_1_1 << " " << data_oinertias_rot_2_1_2 << " " << std::endl;
    std::cout << data_oinertias_rot_2_2_0 << " " << data_oinertias_rot_2_2_1 << " " << data_oinertias_rot_2_2_2 << " " << std::endl;

    std::cout << "data_oinertias_rot 4th iter: " << std::endl;
    std::cout << data_oinertias_rot_3_0_0 << " " << data_oinertias_rot_3_0_1 << " " << data_oinertias_rot_3_0_2 << " " << std::endl;
    std::cout << data_oinertias_rot_3_1_0 << " " << data_oinertias_rot_3_1_1 << " " << data_oinertias_rot_3_1_2 << " " << std::endl;
    std::cout << data_oinertias_rot_3_2_0 << " " << data_oinertias_rot_3_2_1 << " " << data_oinertias_rot_3_2_2 << " " << std::endl;

    std::cout << "data_oinertias_rot 5th iter: " << std::endl;
    std::cout << data_oinertias_rot_4_0_0 << " " << data_oinertias_rot_4_0_1 << " " << data_oinertias_rot_4_0_2 << " " << std::endl;
    std::cout << data_oinertias_rot_4_1_0 << " " << data_oinertias_rot_4_1_1 << " " << data_oinertias_rot_4_1_2 << " " << std::endl;
    std::cout << data_oinertias_rot_4_2_0 << " " << data_oinertias_rot_4_2_1 << " " << data_oinertias_rot_4_2_2 << " " << std::endl;

    std::cout << "data_oinertias_rot 6th iter: " << std::endl;
    std::cout << data_oinertias_rot_5_0_0 << " " << data_oinertias_rot_5_0_1 << " " << data_oinertias_rot_5_0_2 << " " << std::endl;
    std::cout << data_oinertias_rot_5_1_0 << " " << data_oinertias_rot_5_1_1 << " " << data_oinertias_rot_5_1_2 << " " << std::endl;
    std::cout << data_oinertias_rot_5_2_0 << " " << data_oinertias_rot_5_2_1 << " " << data_oinertias_rot_5_2_2 << " " << std::endl;

    std::cout << "\n\n\n" << std::endl;


    std::cout << "inertia_variation_ 1st iter: " << std::endl;
    std::cout << inertia_variation_0_0_0 << " " << inertia_variation_0_0_1 << " " << inertia_variation_0_0_2 << " " << inertia_variation_0_0_3 << " " << inertia_variation_0_0_4 << " " << inertia_variation_0_0_5 << std::endl;
    std::cout << inertia_variation_0_1_0 << " " << inertia_variation_0_1_1 << " " << inertia_variation_0_1_2 << " " << inertia_variation_0_1_3 << " " << inertia_variation_0_1_4 << " " << inertia_variation_0_1_5 << std::endl;
    std::cout << inertia_variation_0_2_0 << " " << inertia_variation_0_2_1 << " " << inertia_variation_0_2_2 << " " << inertia_variation_0_2_3 << " " << inertia_variation_0_2_4 << " " << inertia_variation_0_2_5 << std::endl;
    std::cout << inertia_variation_0_3_0 << " " << inertia_variation_0_3_1 << " " << inertia_variation_0_3_2 << " " << inertia_variation_0_3_3 << " " << inertia_variation_0_3_4 << " " << inertia_variation_0_3_5 << std::endl;
    std::cout << inertia_variation_0_4_0 << " " << inertia_variation_0_4_1 << " " << inertia_variation_0_4_2 << " " << inertia_variation_0_4_3 << " " << inertia_variation_0_4_4 << " " << inertia_variation_0_4_5 << std::endl;
    std::cout << inertia_variation_0_5_0 << " " << inertia_variation_0_5_1 << " " << inertia_variation_0_5_2 << " " << inertia_variation_0_5_3 << " " << inertia_variation_0_5_4 << " " << inertia_variation_0_5_5 << std::endl;

    std::cout << "inertia_variation_ 2nd iter: " << std::endl;
    std::cout << inertia_variation_1_0_0 << " " << inertia_variation_1_0_1 << " " << inertia_variation_1_0_2 << " " << inertia_variation_1_0_3 << " " << inertia_variation_1_0_4 << " " << inertia_variation_1_0_5 << std::endl;
    std::cout << inertia_variation_1_1_0 << " " << inertia_variation_1_1_1 << " " << inertia_variation_1_1_2 << " " << inertia_variation_1_1_3 << " " << inertia_variation_1_1_4 << " " << inertia_variation_1_1_5 << std::endl;
    std::cout << inertia_variation_1_2_0 << " " << inertia_variation_1_2_1 << " " << inertia_variation_1_2_2 << " " << inertia_variation_1_2_3 << " " << inertia_variation_1_2_4 << " " << inertia_variation_1_2_5 << std::endl;
    std::cout << inertia_variation_1_3_0 << " " << inertia_variation_1_3_1 << " " << inertia_variation_1_3_2 << " " << inertia_variation_1_3_3 << " " << inertia_variation_1_3_4 << " " << inertia_variation_1_3_5 << std::endl;
    std::cout << inertia_variation_1_4_0 << " " << inertia_variation_1_4_1 << " " << inertia_variation_1_4_2 << " " << inertia_variation_1_4_3 << " " << inertia_variation_1_4_4 << " " << inertia_variation_1_4_5 << std::endl;
    std::cout << inertia_variation_1_5_0 << " " << inertia_variation_1_5_1 << " " << inertia_variation_1_5_2 << " " << inertia_variation_1_5_3 << " " << inertia_variation_1_5_4 << " " << inertia_variation_1_5_5 << std::endl;

    std::cout << "inertia_variation_ 3rd iter: " << std::endl;
    std::cout << inertia_variation_2_0_0 << " " << inertia_variation_2_0_1 << " " << inertia_variation_2_0_2 << " " << inertia_variation_2_0_3 << " " << inertia_variation_2_0_4 << " " << inertia_variation_2_0_5 << std::endl;
    std::cout << inertia_variation_2_1_0 << " " << inertia_variation_2_1_1 << " " << inertia_variation_2_1_2 << " " << inertia_variation_2_1_3 << " " << inertia_variation_2_1_4 << " " << inertia_variation_2_1_5 << std::endl;
    std::cout << inertia_variation_2_2_0 << " " << inertia_variation_2_2_1 << " " << inertia_variation_2_2_2 << " " << inertia_variation_2_2_3 << " " << inertia_variation_2_2_4 << " " << inertia_variation_2_2_5 << std::endl;
    std::cout << inertia_variation_2_3_0 << " " << inertia_variation_2_3_1 << " " << inertia_variation_2_3_2 << " " << inertia_variation_2_3_3 << " " << inertia_variation_2_3_4 << " " << inertia_variation_2_3_5 << std::endl;
    std::cout << inertia_variation_2_4_0 << " " << inertia_variation_2_4_1 << " " << inertia_variation_2_4_2 << " " << inertia_variation_2_4_3 << " " << inertia_variation_2_4_4 << " " << inertia_variation_2_4_5 << std::endl;
    std::cout << inertia_variation_2_5_0 << " " << inertia_variation_2_5_1 << " " << inertia_variation_2_5_2 << " " << inertia_variation_2_5_3 << " " << inertia_variation_2_5_4 << " " << inertia_variation_2_5_5 << std::endl;

    std::cout << "inertia_variation_ 4th iter: " << std::endl;
    std::cout << inertia_variation_3_0_0 << " " << inertia_variation_3_0_1 << " " << inertia_variation_3_0_2 << " " << inertia_variation_3_0_3 << " " << inertia_variation_3_0_4 << " " << inertia_variation_3_0_5 << std::endl;
    std::cout << inertia_variation_3_1_0 << " " << inertia_variation_3_1_1 << " " << inertia_variation_3_1_2 << " " << inertia_variation_3_1_3 << " " << inertia_variation_3_1_4 << " " << inertia_variation_3_1_5 << std::endl;
    std::cout << inertia_variation_3_2_0 << " " << inertia_variation_3_2_1 << " " << inertia_variation_3_2_2 << " " << inertia_variation_3_2_3 << " " << inertia_variation_3_2_4 << " " << inertia_variation_3_2_5 << std::endl;
    std::cout << inertia_variation_3_3_0 << " " << inertia_variation_3_3_1 << " " << inertia_variation_3_3_2 << " " << inertia_variation_3_3_3 << " " << inertia_variation_3_3_4 << " " << inertia_variation_3_3_5 << std::endl;
    std::cout << inertia_variation_3_4_0 << " " << inertia_variation_3_4_1 << " " << inertia_variation_3_4_2 << " " << inertia_variation_3_4_3 << " " << inertia_variation_3_4_4 << " " << inertia_variation_3_4_5 << std::endl;
    std::cout << inertia_variation_3_5_0 << " " << inertia_variation_3_5_1 << " " << inertia_variation_3_5_2 << " " << inertia_variation_3_5_3 << " " << inertia_variation_3_5_4 << " " << inertia_variation_3_5_5 << std::endl;

    std::cout << "\n\n\n\n\n" << std::endl;

    std::cout << "first_pass_final_addforcecross 1st iter: " << std::endl;
    std::cout << add_force_cross_matrix_0_0_0 << " " << add_force_cross_matrix_0_0_1 << " " << add_force_cross_matrix_0_0_2 << " " << add_force_cross_matrix_0_0_3 << " " << add_force_cross_matrix_0_0_4 << " " << add_force_cross_matrix_0_0_5 << std::endl;
    std::cout << add_force_cross_matrix_0_1_0 << " " << add_force_cross_matrix_0_1_1 << " " << add_force_cross_matrix_0_1_2 << " " << add_force_cross_matrix_0_1_3 << " " << add_force_cross_matrix_0_1_4 << " " << add_force_cross_matrix_0_1_5 << std::endl;
    std::cout << add_force_cross_matrix_0_2_0 << " " << add_force_cross_matrix_0_2_1 << " " << add_force_cross_matrix_0_2_2 << " " << add_force_cross_matrix_0_2_3 << " " << add_force_cross_matrix_0_2_4 << " " << add_force_cross_matrix_0_2_5 << std::endl;
    std::cout << add_force_cross_matrix_0_3_0 << " " << add_force_cross_matrix_0_3_1 << " " << add_force_cross_matrix_0_3_2 << " " << add_force_cross_matrix_0_3_3 << " " << add_force_cross_matrix_0_3_4 << " " << add_force_cross_matrix_0_3_5 << std::endl;
    std::cout << add_force_cross_matrix_0_4_0 << " " << add_force_cross_matrix_0_4_1 << " " << add_force_cross_matrix_0_4_2 << " " << add_force_cross_matrix_0_4_3 << " " << add_force_cross_matrix_0_4_4 << " " << add_force_cross_matrix_0_4_5 << std::endl;
    std::cout << add_force_cross_matrix_0_5_0 << " " << add_force_cross_matrix_0_5_1 << " " << add_force_cross_matrix_0_5_2 << " " << add_force_cross_matrix_0_5_3 << " " << add_force_cross_matrix_0_5_4 << " " << add_force_cross_matrix_0_5_5 << std::endl;

    std::cout << "first_pass_final_addforcecross 2nd iter: " << std::endl;
    std::cout << add_force_cross_matrix_1_0_0 << " " << add_force_cross_matrix_1_0_1 << " " << add_force_cross_matrix_1_0_2 << " " << add_force_cross_matrix_1_0_3 << " " << add_force_cross_matrix_1_0_4 << " " << add_force_cross_matrix_1_0_5 << std::endl;
    std::cout << add_force_cross_matrix_1_1_0 << " " << add_force_cross_matrix_1_1_1 << " " << add_force_cross_matrix_1_1_2 << " " << add_force_cross_matrix_1_1_3 << " " << add_force_cross_matrix_1_1_4 << " " << add_force_cross_matrix_1_1_5 << std::endl;
    std::cout << add_force_cross_matrix_1_2_0 << " " << add_force_cross_matrix_1_2_1 << " " << add_force_cross_matrix_1_2_2 << " " << add_force_cross_matrix_1_2_3 << " " << add_force_cross_matrix_1_2_4 << " " << add_force_cross_matrix_1_2_5 << std::endl;
    std::cout << add_force_cross_matrix_1_3_0 << " " << add_force_cross_matrix_1_3_1 << " " << add_force_cross_matrix_1_3_2 << " " << add_force_cross_matrix_1_3_3 << " " << add_force_cross_matrix_1_3_4 << " " << add_force_cross_matrix_1_3_5 << std::endl;
    std::cout << add_force_cross_matrix_1_4_0 << " " << add_force_cross_matrix_1_4_1 << " " << add_force_cross_matrix_1_4_2 << " " << add_force_cross_matrix_1_4_3 << " " << add_force_cross_matrix_1_4_4 << " " << add_force_cross_matrix_1_4_5 << std::endl;
    std::cout << add_force_cross_matrix_1_5_0 << " " << add_force_cross_matrix_1_5_1 << " " << add_force_cross_matrix_1_5_2 << " " << add_force_cross_matrix_1_5_3 << " " << add_force_cross_matrix_1_5_4 << " " << add_force_cross_matrix_1_5_5 << std::endl;

    std::cout << "first_pass_final_addforcecross 3rd iter: " << std::endl;
    std::cout << add_force_cross_matrix_2_0_0 << " " << add_force_cross_matrix_2_0_1 << " " << add_force_cross_matrix_2_0_2 << " " << add_force_cross_matrix_2_0_3 << " " << add_force_cross_matrix_2_0_4 << " " << add_force_cross_matrix_2_0_5 << std::endl;
    std::cout << add_force_cross_matrix_2_1_0 << " " << add_force_cross_matrix_2_1_1 << " " << add_force_cross_matrix_2_1_2 << " " << add_force_cross_matrix_2_1_3 << " " << add_force_cross_matrix_2_1_4 << " " << add_force_cross_matrix_2_1_5 << std::endl;
    std::cout << add_force_cross_matrix_2_2_0 << " " << add_force_cross_matrix_2_2_1 << " " << add_force_cross_matrix_2_2_2 << " " << add_force_cross_matrix_2_2_3 << " " << add_force_cross_matrix_2_2_4 << " " << add_force_cross_matrix_2_2_5 << std::endl;
    std::cout << add_force_cross_matrix_2_3_0 << " " << add_force_cross_matrix_2_3_1 << " " << add_force_cross_matrix_2_3_2 << " " << add_force_cross_matrix_2_3_3 << " " << add_force_cross_matrix_2_3_4 << " " << add_force_cross_matrix_2_3_5 << std::endl;
    std::cout << add_force_cross_matrix_2_4_0 << " " << add_force_cross_matrix_2_4_1 << " " << add_force_cross_matrix_2_4_2 << " " << add_force_cross_matrix_2_4_3 << " " << add_force_cross_matrix_2_4_4 << " " << add_force_cross_matrix_2_4_5 << std::endl;
    std::cout << add_force_cross_matrix_2_5_0 << " " << add_force_cross_matrix_2_5_1 << " " << add_force_cross_matrix_2_5_2 << " " << add_force_cross_matrix_2_5_3 << " " << add_force_cross_matrix_2_5_4 << " " << add_force_cross_matrix_2_5_5 << std::endl;
  
    std::cout << "first_pass_final_addforcecross 4th iter: " << std::endl;
    std::cout << add_force_cross_matrix_3_0_0 << " " << add_force_cross_matrix_3_0_1 << " " << add_force_cross_matrix_3_0_2 << " " << add_force_cross_matrix_3_0_3 << " " << add_force_cross_matrix_3_0_4 << " " << add_force_cross_matrix_3_0_5 << std::endl;
    std::cout << add_force_cross_matrix_3_1_0 << " " << add_force_cross_matrix_3_1_1 << " " << add_force_cross_matrix_3_1_2 << " " << add_force_cross_matrix_3_1_3 << " " << add_force_cross_matrix_3_1_4 << " " << add_force_cross_matrix_3_1_5 << std::endl;
    std::cout << add_force_cross_matrix_3_2_0 << " " << add_force_cross_matrix_3_2_1 << " " << add_force_cross_matrix_3_2_2 << " " << add_force_cross_matrix_3_2_3 << " " << add_force_cross_matrix_3_2_4 << " " << add_force_cross_matrix_3_2_5 << std::endl;
    std::cout << add_force_cross_matrix_3_3_0 << " " << add_force_cross_matrix_3_3_1 << " " << add_force_cross_matrix_3_3_2 << " " << add_force_cross_matrix_3_3_3 << " " << add_force_cross_matrix_3_3_4 << " " << add_force_cross_matrix_3_3_5 << std::endl;
    std::cout << add_force_cross_matrix_3_4_0 << " " << add_force_cross_matrix_3_4_1 << " " << add_force_cross_matrix_3_4_2 << " " << add_force_cross_matrix_3_4_3 << " " << add_force_cross_matrix_3_4_4 << " " << add_force_cross_matrix_3_4_5 << std::endl;
    std::cout << add_force_cross_matrix_3_5_0 << " " << add_force_cross_matrix_3_5_1 << " " << add_force_cross_matrix_3_5_2 << " " << add_force_cross_matrix_3_5_3 << " " << add_force_cross_matrix_3_5_4 << " " << add_force_cross_matrix_3_5_5 << std::endl;

    std::cout << "first_pass_final_addforcecross 5th iter: " << std::endl;
    std::cout << add_force_cross_matrix_4_0_0 << " " << add_force_cross_matrix_4_0_1 << " " << add_force_cross_matrix_4_0_2 << " " << add_force_cross_matrix_4_0_3 << " " << add_force_cross_matrix_4_0_4 << " " << add_force_cross_matrix_4_0_5 << std::endl;
    std::cout << add_force_cross_matrix_4_1_0 << " " << add_force_cross_matrix_4_1_1 << " " << add_force_cross_matrix_4_1_2 << " " << add_force_cross_matrix_4_1_3 << " " << add_force_cross_matrix_4_1_4 << " " << add_force_cross_matrix_4_1_5 << std::endl;
    std::cout << add_force_cross_matrix_4_2_0 << " " << add_force_cross_matrix_4_2_1 << " " << add_force_cross_matrix_4_2_2 << " " << add_force_cross_matrix_4_2_3 << " " << add_force_cross_matrix_4_2_4 << " " << add_force_cross_matrix_4_2_5 << std::endl;
    std::cout << add_force_cross_matrix_4_3_0 << " " << add_force_cross_matrix_4_3_1 << " " << add_force_cross_matrix_4_3_2 << " " << add_force_cross_matrix_4_3_3 << " " << add_force_cross_matrix_4_3_4 << " " << add_force_cross_matrix_4_3_5 << std::endl;
    std::cout << add_force_cross_matrix_4_4_0 << " " << add_force_cross_matrix_4_4_1 << " " << add_force_cross_matrix_4_4_2 << " " << add_force_cross_matrix_4_4_3 << " " << add_force_cross_matrix_4_4_4 << " " << add_force_cross_matrix_4_4_5 << std::endl;
    std::cout << add_force_cross_matrix_4_5_0 << " " << add_force_cross_matrix_4_5_1 << " " << add_force_cross_matrix_4_5_2 << " " << add_force_cross_matrix_4_5_3 << " " << add_force_cross_matrix_4_5_4 << " " << add_force_cross_matrix_4_5_5 << std::endl;

    std::cout << "first_pass_final_addforcecross 6th iter: " << std::endl;
    std::cout << add_force_cross_matrix_5_0_0 << " " << add_force_cross_matrix_5_0_1 << " " << add_force_cross_matrix_5_0_2 << " " << add_force_cross_matrix_5_0_3 << " " << add_force_cross_matrix_5_0_4 << " " << add_force_cross_matrix_5_0_5 << std::endl;
    std::cout << add_force_cross_matrix_5_1_0 << " " << add_force_cross_matrix_5_1_1 << " " << add_force_cross_matrix_5_1_2 << " " << add_force_cross_matrix_5_1_3 << " " << add_force_cross_matrix_5_1_4 << " " << add_force_cross_matrix_5_1_5 << std::endl;
    std::cout << add_force_cross_matrix_5_2_0 << " " << add_force_cross_matrix_5_2_1 << " " << add_force_cross_matrix_5_2_2 << " " << add_force_cross_matrix_5_2_3 << " " << add_force_cross_matrix_5_2_4 << " " << add_force_cross_matrix_5_2_5 << std::endl;
    std::cout << add_force_cross_matrix_5_3_0 << " " << add_force_cross_matrix_5_3_1 << " " << add_force_cross_matrix_5_3_2 << " " << add_force_cross_matrix_5_3_3 << " " << add_force_cross_matrix_5_3_4 << " " << add_force_cross_matrix_5_3_5 << std::endl;
    std::cout << add_force_cross_matrix_5_4_0 << " " << add_force_cross_matrix_5_4_1 << " " << add_force_cross_matrix_5_4_2 << " " << add_force_cross_matrix_5_4_3 << " " << add_force_cross_matrix_5_4_4 << " " << add_force_cross_matrix_5_4_5 << std::endl;
    std::cout << add_force_cross_matrix_5_5_0 << " " << add_force_cross_matrix_5_5_1 << " " << add_force_cross_matrix_5_5_2 << " " << add_force_cross_matrix_5_5_3 << " " << add_force_cross_matrix_5_5_4 << " " << add_force_cross_matrix_5_5_5 << std::endl;

    std::cout << "J_cols 1st iter: " << std::endl;
    std::cout << act_constraint_linear_0_0 << " " << act_constraint_linear_0_1 << " " << act_constraint_linear_0_2 << " " << act_constraint_rotation_col_0_0 << " " << act_constraint_rotation_col_0_1 << " " << act_constraint_rotation_col_0_2 << std::endl;

    std::cout << "J_cols 2nd iter: " << std::endl;
    std::cout << act_constraint_linear_1_0 << " " << act_constraint_linear_1_1 << " " << act_constraint_linear_1_2 << " " << act_constraint_rotation_col_1_0 << " " << act_constraint_rotation_col_1_1 << " " << act_constraint_rotation_col_1_2 << std::endl;

    std::cout << "J_cols 3rd iter: " << std::endl;
    std::cout << act_constraint_linear_2_0 << " " << act_constraint_linear_2_1 << " " << act_constraint_linear_2_2 << " " << act_constraint_rotation_col_2_0 << " " << act_constraint_rotation_col_2_1 << " " << act_constraint_rotation_col_2_2 << std::endl;

    std::cout << "J_cols 4th iter: " << std::endl;
    std::cout << act_constraint_linear_3_0 << " " << act_constraint_linear_3_1 << " " << act_constraint_linear_3_2 << " " << act_constraint_rotation_col_3_0 << " " << act_constraint_rotation_col_3_1 << " " << act_constraint_rotation_col_3_2 << std::endl;

    std::cout << "J_cols 5th iter: " << std::endl;
    std::cout << act_constraint_linear_4_0 << " " << act_constraint_linear_4_1 << " " << act_constraint_linear_4_2 << " " << act_constraint_rotation_col_4_0 << " " << act_constraint_rotation_col_4_1 << " " << act_constraint_rotation_col_4_2 << std::endl;

    std::cout << "J_cols 6th iter: " << std::endl;
    std::cout << act_constraint_linear_5_0 << " " << act_constraint_linear_5_1 << " " << act_constraint_linear_5_2 << " " << act_constraint_rotation_col_5_0 << " " << act_constraint_rotation_col_5_1 << " " << act_constraint_rotation_col_5_2 << std::endl;

  
    std::cout << "dJ_cols 1st iter: " << std::endl;
    std::cout << dj_cols_0_0 << " " << dj_cols_0_1 << " " << dj_cols_0_2 << " " << dj_cols_0_3 << " " << dj_cols_0_4 << " " << dj_cols_0_5 << std::endl;

    std::cout << "dJ_cols 2nd iter: " << std::endl;
    std::cout << dj_cols_1_0 << " " << dj_cols_1_1 << " " << dj_cols_1_2 << " " << dj_cols_1_3 << " " << dj_cols_1_4 << " " << dj_cols_1_5 << std::endl;

    std::cout << "dJ_cols 3rd iter: " << std::endl;
    std::cout << dj_cols_2_0 << " " << dj_cols_2_1 << " " << dj_cols_2_2 << " " << dj_cols_2_3 << " " << dj_cols_2_4 << " " << dj_cols_2_5 << std::endl;

    std::cout << "dJ_cols 4th iter: " << std::endl;
    std::cout << dj_cols_3_0 << " " << dj_cols_3_1 << " " << dj_cols_3_2 << " " << dj_cols_3_3 << " " << dj_cols_3_4 << " " << dj_cols_3_5 << std::endl;

    std::cout << "dJ_cols 5th iter: " << std::endl;
    std::cout << dj_cols_4_0 << " " << dj_cols_4_1 << " " << dj_cols_4_2 << " " << dj_cols_4_3 << " " << dj_cols_4_4 << " " << dj_cols_4_5 << std::endl;

    std::cout << "dJ_cols 6th iter: " << std::endl;
    std::cout << dj_cols_5_0 << " " << dj_cols_5_1 << " " << dj_cols_5_2 << " " << dj_cols_5_3 << " " << dj_cols_5_4 << " " << dj_cols_5_5 << std::endl;

    std::cout << "dAdq_cols 1st iter: " << std::endl;
    std::cout << dAdq_cols_0_0 << " " << dAdq_cols_0_1 << " " << dAdq_cols_0_2 << " " << dAdq_cols_0_3 << " " << dAdq_cols_0_4 << " " << dAdq_cols_0_5 << std::endl;

    std::cout << "dAdq_cols 2nd iter: " << std::endl;
    std::cout << dAdq_cols_1_0 << " " << dAdq_cols_1_1 << " " << dAdq_cols_1_2 << " " << dAdq_cols_1_3 << " " << dAdq_cols_1_4 << " " << dAdq_cols_1_5 << std::endl;

    std::cout << "dAdq_cols 3rd iter: " << std::endl;
    std::cout << dAdq_cols_2_0 << " " << dAdq_cols_2_1 << " " << dAdq_cols_2_2 << " " << dAdq_cols_2_3 << " " << dAdq_cols_2_4 << " " << dAdq_cols_2_5 << std::endl;

    std::cout << "dAdq_cols 4th iter: " << std::endl;
    std::cout << dAdq_cols_3_0 << " " << dAdq_cols_3_1 << " " << dAdq_cols_3_2 << " " << dAdq_cols_3_3 << " " << dAdq_cols_3_4 << " " << dAdq_cols_3_5 << std::endl;

    std::cout << "dAdq_cols 5th iter: " << std::endl;
    std::cout << dAdq_cols_4_0 << " " << dAdq_cols_4_1 << " " << dAdq_cols_4_2 << " " << dAdq_cols_4_3 << " " << dAdq_cols_4_4 << " " << dAdq_cols_4_5 << std::endl;

    std::cout << "dAdq_cols 6th iter: " << std::endl;
    std::cout << dAdq_cols_5_0 << " " << dAdq_cols_5_1 << " " << dAdq_cols_5_2 << " " << dAdq_cols_5_3 << " " << dAdq_cols_5_4 << " " << dAdq_cols_5_5 << std::endl;

    std::cout << "dAdv_cols_ 1st iter: " << std::endl;
    std::cout << dAdv_cols_0_0 << " " << dAdv_cols_0_1 << " " << dAdv_cols_0_2 << " " << dAdv_cols_0_3 << " " << dAdv_cols_0_4 << " " << dAdv_cols_0_5 << std::endl;

    std::cout << "dAdv_cols_ 2nd iter: " << std::endl;
    std::cout << dAdv_cols_1_0 << " " << dAdv_cols_1_1 << " " << dAdv_cols_1_2 << " " << dAdv_cols_1_3 << " " << dAdv_cols_1_4 << " " << dAdv_cols_1_5 << std::endl;

    std::cout << "dAdv_cols_ 3rd iter: " << std::endl;
    std::cout << dAdv_cols_2_0 << " " << dAdv_cols_2_1 << " " << dAdv_cols_2_2 << " " << dAdv_cols_2_3 << " " << dAdv_cols_2_4 << " " << dAdv_cols_2_5 << std::endl;

    std::cout << "dAdv_cols_ 4th iter: " << std::endl;
    std::cout << dAdv_cols_3_0 << " " << dAdv_cols_3_1 << " " << dAdv_cols_3_2 << " " << dAdv_cols_3_3 << " " << dAdv_cols_3_4 << " " << dAdv_cols_3_5 << std::endl;

    std::cout << "dAdv_cols_ 5th iter: " << std::endl;
    std::cout << dAdv_cols_4_0 << " " << dAdv_cols_4_1 << " " << dAdv_cols_4_2 << " " << dAdv_cols_4_3 << " " << dAdv_cols_4_4 << " " << dAdv_cols_4_5 << std::endl;

    std::cout << "dAdv_cols_ 6th iter: " << std::endl;
    std::cout << dAdv_cols_5_0 << " " << dAdv_cols_5_1 << " " << dAdv_cols_5_2 << " " << dAdv_cols_5_3 << " " << dAdv_cols_5_4 << " " << dAdv_cols_5_5 << std::endl;

    std::cout << "dVdq_cols 1st iter: " << std::endl;
    std::cout << dVdq_cols_0_0 << " " << dVdq_cols_0_1 << " " << dVdq_cols_0_2 << " " << dVdq_cols_0_3 << " " << dVdq_cols_0_4 << " " << dVdq_cols_0_5 << std::endl;

    std::cout << "dVdq_cols 2nd iter: " << std::endl;
    std::cout << dVdq_cols_1_0 << " " << dVdq_cols_1_1 << " " << dVdq_cols_1_2 << " " << dVdq_cols_1_3 << " " << dVdq_cols_1_4 << " " << dVdq_cols_1_5 << std::endl;

    std::cout << "dVdq_cols 3rd iter: " << std::endl;
    std::cout << dVdq_cols_2_0 << " " << dVdq_cols_2_1 << " " << dVdq_cols_2_2 << " " << dVdq_cols_2_3 << " " << dVdq_cols_2_4 << " " << dVdq_cols_2_5 << std::endl;

    std::cout << "dVdq_cols 4th iter: " << std::endl;
    std::cout << dVdq_cols_3_0 << " " << dVdq_cols_3_1 << " " << dVdq_cols_3_2 << " " << dVdq_cols_3_3 << " " << dVdq_cols_3_4 << " " << dVdq_cols_3_5 << std::endl;

    std::cout << "dVdq_cols 5th iter: " << std::endl;
    std::cout << dVdq_cols_4_0 << " " << dVdq_cols_4_1 << " " << dVdq_cols_4_2 << " " << dVdq_cols_4_3 << " " << dVdq_cols_4_4 << " " << dVdq_cols_4_5 << std::endl;

    std::cout << "dVdq_cols 6th iter: " << std::endl;
    std::cout << dVdq_cols_5_0 << " " << dVdq_cols_5_1 << " " << dVdq_cols_5_2 << " " << dVdq_cols_5_3 << " " << dVdq_cols_5_4 << " " << dVdq_cols_5_5 << std::endl;


  return add_force_cross_matrix_5_5_5;
} // [-34311.5986328125, 34311.5986328125] +/- 2.591329477386054e-10


int main(){
    // give some random values
    // q =   1.97125 -0.372364   1.64045 -0.674883   2.38533  0.727269
    // v =  -0.329554   0.536459  -0.444451    0.10794 -0.0452059   0.257742
    // a = -0.270431 0.0268018  0.904459   0.83239  0.271423  0.434594 
    std::vector<double> q = {1.97125, -0.372364, 1.64045, -0.674883, 2.38533, 0.727269};
    std::vector<double> v = {-0.329554, 0.536459, -0.444451, 0.10794, -0.0452059, 0.257742};
    std::vector<double> a = {-0.270431, 0.0268018, 0.904459, 0.83239, 0.271423, 0.434594};
    std::vector<double> cos_qpos = {cos(q[0]), cos(q[1]), cos(q[2]), cos(q[3]), cos(q[4]), cos(q[5])};
    std::vector<double> sin_qpos = {sin(q[0]), sin(q[1]), sin(q[2]), sin(q[3]), sin(q[4]), sin(q[5])};

    // ap_fixed<32,2> qcos_0, ap_fixed<32,2> qcos_1, ap_fixed<32,2> qcos_2, ap_fixed<32,2> qcos_3, ap_fixed<32,2> qcos_4, ap_fixed<32,2> qcos_5, 
    // ap_fixed<32,2> qsin_0, ap_fixed<32,2> qsin_1, ap_fixed<32,2> qsin_2, ap_fixed<32,2> qsin_3, ap_fixed<32,2> qsin_4, ap_fixed<32,2> qsin_5, 
    // ap_fixed<32,4> v_0, ap_fixed<32,4> v_1, ap_fixed<32,4> v_2, ap_fixed<32,4> v_3, ap_fixed<32,4> v_4, ap_fixed<32,4> v_5, 
    // ap_fixed<32,4> a_0, ap_fixed<32,4> a_1, ap_fixed<32,4> a_2, ap_fixed<32,4> a_3, ap_fixed<32,4> a_4, ap_fixed<32,4> a_5)
    // for ap_fixed<x,y>, every number should be multiplied by 2^(x-y)

    //for(long i = 0; i < cos_qpos.size(); i++){
    //  cos_qpos[i] = cos_qpos[i] * pow(2, 30);
    //  sin_qpos[i] = sin_qpos[i] * pow(2, 30);
    //  v[i] = v[i] * pow(2, 30);
    //  a[i] = a[i] * pow(2, 30);
    //}


    rneaderiv(
        cos_qpos[0], cos_qpos[1], cos_qpos[2], cos_qpos[3], cos_qpos[4], cos_qpos[5],
        sin_qpos[0], sin_qpos[1], sin_qpos[2], sin_qpos[3], sin_qpos[4], sin_qpos[5],
        v[0], v[1], v[2], v[3], v[4], v[5],
        a[0], a[1], a[2], a[3], a[4], a[5]
    );
}